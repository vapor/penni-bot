// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    func apps_create_installation_access_token(_ input: Operations.apps_create_installation_access_token.Input) async throws -> Operations.apps_create_installation_access_token.Output
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    func orgs_get(_ input: Operations.orgs_get.Input) async throws -> Operations.orgs_get.Output
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    func projects_get_card(_ input: Operations.projects_get_card.Input) async throws -> Operations.projects_get_card.Output
    /// Update an existing project card
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    func projects_update_card(_ input: Operations.projects_update_card.Input) async throws -> Operations.projects_update_card.Output
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    func projects_delete_card(_ input: Operations.projects_delete_card.Input) async throws -> Operations.projects_delete_card.Output
    /// Move a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    func projects_move_card(_ input: Operations.projects_move_card.Input) async throws -> Operations.projects_move_card.Output
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    func projects_get_column(_ input: Operations.projects_get_column.Input) async throws -> Operations.projects_get_column.Output
    /// Update an existing project column
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    func projects_update_column(_ input: Operations.projects_update_column.Input) async throws -> Operations.projects_update_column.Output
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    func projects_delete_column(_ input: Operations.projects_delete_column.Input) async throws -> Operations.projects_delete_column.Output
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    func projects_list_cards(_ input: Operations.projects_list_cards.Input) async throws -> Operations.projects_list_cards.Output
    /// Create a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    func projects_create_card(_ input: Operations.projects_create_card.Input) async throws -> Operations.projects_create_card.Output
    /// Move a project column
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    func projects_move_column(_ input: Operations.projects_move_column.Input) async throws -> Operations.projects_move_column.Output
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    func projects_get(_ input: Operations.projects_get.Input) async throws -> Operations.projects_get.Output
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    func projects_update(_ input: Operations.projects_update.Input) async throws -> Operations.projects_update.Output
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    func projects_delete(_ input: Operations.projects_delete.Input) async throws -> Operations.projects_delete.Output
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    func projects_list_collaborators(_ input: Operations.projects_list_collaborators.Input) async throws -> Operations.projects_list_collaborators.Output
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    func projects_add_collaborator(_ input: Operations.projects_add_collaborator.Input) async throws -> Operations.projects_add_collaborator.Output
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    func projects_remove_collaborator(_ input: Operations.projects_remove_collaborator.Input) async throws -> Operations.projects_remove_collaborator.Output
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    func projects_get_permission_for_user(_ input: Operations.projects_get_permission_for_user.Input) async throws -> Operations.projects_get_permission_for_user.Output
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    func projects_list_columns(_ input: Operations.projects_list_columns.Input) async throws -> Operations.projects_list_columns.Output
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    func projects_create_column(_ input: Operations.projects_create_column.Input) async throws -> Operations.projects_create_column.Output
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    func rate_limit_get(_ input: Operations.rate_limit_get.Input) async throws -> Operations.rate_limit_get.Output
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    func repos_get(_ input: Operations.repos_get.Input) async throws -> Operations.repos_get.Output
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    func repos_list_commits(_ input: Operations.repos_list_commits.Input) async throws -> Operations.repos_list_commits.Output
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    func repos_list_pull_requests_associated_with_commit(_ input: Operations.repos_list_pull_requests_associated_with_commit.Input) async throws -> Operations.repos_list_pull_requests_associated_with_commit.Output
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    func repos_compare_commits(_ input: Operations.repos_compare_commits.Input) async throws -> Operations.repos_compare_commits.Output
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    func repos_list_contributors(_ input: Operations.repos_list_contributors.Input) async throws -> Operations.repos_list_contributors.Output
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    func issues_list_for_repo(_ input: Operations.issues_list_for_repo.Input) async throws -> Operations.issues_list_for_repo.Output
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    func issues_create(_ input: Operations.issues_create.Input) async throws -> Operations.issues_create.Output
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    func issues_get(_ input: Operations.issues_get.Input) async throws -> Operations.issues_get.Output
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    func issues_update(_ input: Operations.issues_update.Input) async throws -> Operations.issues_update.Output
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    func issues_create_comment(_ input: Operations.issues_create_comment.Input) async throws -> Operations.issues_create_comment.Output
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    func issues_list_events_for_timeline(_ input: Operations.issues_list_events_for_timeline.Input) async throws -> Operations.issues_list_events_for_timeline.Output
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    func pulls_list(_ input: Operations.pulls_list.Input) async throws -> Operations.pulls_list.Output
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    func pulls_get(_ input: Operations.pulls_get.Input) async throws -> Operations.pulls_get.Output
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    func pulls_update(_ input: Operations.pulls_update.Input) async throws -> Operations.pulls_update.Output
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    func pulls_list_review_comments(_ input: Operations.pulls_list_review_comments.Input) async throws -> Operations.pulls_list_review_comments.Output
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    func pulls_list_files(_ input: Operations.pulls_list_files.Input) async throws -> Operations.pulls_list_files.Output
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    func repos_list_releases(_ input: Operations.repos_list_releases.Input) async throws -> Operations.repos_list_releases.Output
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    func repos_create_release(_ input: Operations.repos_create_release.Input) async throws -> Operations.repos_create_release.Output
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func repos_get_latest_release(_ input: Operations.repos_get_latest_release.Input) async throws -> Operations.repos_get_latest_release.Output
    /// List repository tags
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    func repos_list_tags(_ input: Operations.repos_list_tags.Input) async throws -> Operations.repos_list_tags.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package func apps_create_installation_access_token(
        path: Operations.apps_create_installation_access_token.Input.Path,
        headers: Operations.apps_create_installation_access_token.Input.Headers = .init(),
        body: Operations.apps_create_installation_access_token.Input.Body? = nil
    ) async throws -> Operations.apps_create_installation_access_token.Output {
        try await apps_create_installation_access_token(Operations.apps_create_installation_access_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    package func orgs_get(
        path: Operations.orgs_get.Input.Path,
        headers: Operations.orgs_get.Input.Headers = .init()
    ) async throws -> Operations.orgs_get.Output {
        try await orgs_get(Operations.orgs_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    package func projects_get_card(
        path: Operations.projects_get_card.Input.Path,
        headers: Operations.projects_get_card.Input.Headers = .init()
    ) async throws -> Operations.projects_get_card.Output {
        try await projects_get_card(Operations.projects_get_card.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an existing project card
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    package func projects_update_card(
        path: Operations.projects_update_card.Input.Path,
        headers: Operations.projects_update_card.Input.Headers = .init(),
        body: Operations.projects_update_card.Input.Body? = nil
    ) async throws -> Operations.projects_update_card.Output {
        try await projects_update_card(Operations.projects_update_card.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package func projects_delete_card(
        path: Operations.projects_delete_card.Input.Path,
        headers: Operations.projects_delete_card.Input.Headers = .init()
    ) async throws -> Operations.projects_delete_card.Output {
        try await projects_delete_card(Operations.projects_delete_card.Input(
            path: path,
            headers: headers
        ))
    }
    /// Move a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package func projects_move_card(
        path: Operations.projects_move_card.Input.Path,
        headers: Operations.projects_move_card.Input.Headers = .init(),
        body: Operations.projects_move_card.Input.Body
    ) async throws -> Operations.projects_move_card.Output {
        try await projects_move_card(Operations.projects_move_card.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    package func projects_get_column(
        path: Operations.projects_get_column.Input.Path,
        headers: Operations.projects_get_column.Input.Headers = .init()
    ) async throws -> Operations.projects_get_column.Output {
        try await projects_get_column(Operations.projects_get_column.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an existing project column
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    package func projects_update_column(
        path: Operations.projects_update_column.Input.Path,
        headers: Operations.projects_update_column.Input.Headers = .init(),
        body: Operations.projects_update_column.Input.Body
    ) async throws -> Operations.projects_update_column.Output {
        try await projects_update_column(Operations.projects_update_column.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    package func projects_delete_column(
        path: Operations.projects_delete_column.Input.Path,
        headers: Operations.projects_delete_column.Input.Headers = .init()
    ) async throws -> Operations.projects_delete_column.Output {
        try await projects_delete_column(Operations.projects_delete_column.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package func projects_list_cards(
        path: Operations.projects_list_cards.Input.Path,
        query: Operations.projects_list_cards.Input.Query = .init(),
        headers: Operations.projects_list_cards.Input.Headers = .init()
    ) async throws -> Operations.projects_list_cards.Output {
        try await projects_list_cards(Operations.projects_list_cards.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package func projects_create_card(
        path: Operations.projects_create_card.Input.Path,
        headers: Operations.projects_create_card.Input.Headers = .init(),
        body: Operations.projects_create_card.Input.Body
    ) async throws -> Operations.projects_create_card.Output {
        try await projects_create_card(Operations.projects_create_card.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Move a project column
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    package func projects_move_column(
        path: Operations.projects_move_column.Input.Path,
        headers: Operations.projects_move_column.Input.Headers = .init(),
        body: Operations.projects_move_column.Input.Body
    ) async throws -> Operations.projects_move_column.Output {
        try await projects_move_column(Operations.projects_move_column.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    package func projects_get(
        path: Operations.projects_get.Input.Path,
        headers: Operations.projects_get.Input.Headers = .init()
    ) async throws -> Operations.projects_get.Output {
        try await projects_get(Operations.projects_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    package func projects_update(
        path: Operations.projects_update.Input.Path,
        headers: Operations.projects_update.Input.Headers = .init(),
        body: Operations.projects_update.Input.Body? = nil
    ) async throws -> Operations.projects_update.Output {
        try await projects_update(Operations.projects_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    package func projects_delete(
        path: Operations.projects_delete.Input.Path,
        headers: Operations.projects_delete.Input.Headers = .init()
    ) async throws -> Operations.projects_delete.Output {
        try await projects_delete(Operations.projects_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    package func projects_list_collaborators(
        path: Operations.projects_list_collaborators.Input.Path,
        query: Operations.projects_list_collaborators.Input.Query = .init(),
        headers: Operations.projects_list_collaborators.Input.Headers = .init()
    ) async throws -> Operations.projects_list_collaborators.Output {
        try await projects_list_collaborators(Operations.projects_list_collaborators.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    package func projects_add_collaborator(
        path: Operations.projects_add_collaborator.Input.Path,
        headers: Operations.projects_add_collaborator.Input.Headers = .init(),
        body: Operations.projects_add_collaborator.Input.Body? = nil
    ) async throws -> Operations.projects_add_collaborator.Output {
        try await projects_add_collaborator(Operations.projects_add_collaborator.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    package func projects_remove_collaborator(
        path: Operations.projects_remove_collaborator.Input.Path,
        headers: Operations.projects_remove_collaborator.Input.Headers = .init()
    ) async throws -> Operations.projects_remove_collaborator.Output {
        try await projects_remove_collaborator(Operations.projects_remove_collaborator.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    package func projects_get_permission_for_user(
        path: Operations.projects_get_permission_for_user.Input.Path,
        headers: Operations.projects_get_permission_for_user.Input.Headers = .init()
    ) async throws -> Operations.projects_get_permission_for_user.Output {
        try await projects_get_permission_for_user(Operations.projects_get_permission_for_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    package func projects_list_columns(
        path: Operations.projects_list_columns.Input.Path,
        query: Operations.projects_list_columns.Input.Query = .init(),
        headers: Operations.projects_list_columns.Input.Headers = .init()
    ) async throws -> Operations.projects_list_columns.Output {
        try await projects_list_columns(Operations.projects_list_columns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    package func projects_create_column(
        path: Operations.projects_create_column.Input.Path,
        headers: Operations.projects_create_column.Input.Headers = .init(),
        body: Operations.projects_create_column.Input.Body
    ) async throws -> Operations.projects_create_column.Output {
        try await projects_create_column(Operations.projects_create_column.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    package func rate_limit_get(headers: Operations.rate_limit_get.Input.Headers = .init()) async throws -> Operations.rate_limit_get.Output {
        try await rate_limit_get(Operations.rate_limit_get.Input(headers: headers))
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    package func repos_get(
        path: Operations.repos_get.Input.Path,
        headers: Operations.repos_get.Input.Headers = .init()
    ) async throws -> Operations.repos_get.Output {
        try await repos_get(Operations.repos_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package func repos_list_commits(
        path: Operations.repos_list_commits.Input.Path,
        query: Operations.repos_list_commits.Input.Query = .init(),
        headers: Operations.repos_list_commits.Input.Headers = .init()
    ) async throws -> Operations.repos_list_commits.Output {
        try await repos_list_commits(Operations.repos_list_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package func repos_list_pull_requests_associated_with_commit(
        path: Operations.repos_list_pull_requests_associated_with_commit.Input.Path,
        query: Operations.repos_list_pull_requests_associated_with_commit.Input.Query = .init(),
        headers: Operations.repos_list_pull_requests_associated_with_commit.Input.Headers = .init()
    ) async throws -> Operations.repos_list_pull_requests_associated_with_commit.Output {
        try await repos_list_pull_requests_associated_with_commit(Operations.repos_list_pull_requests_associated_with_commit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package func repos_compare_commits(
        path: Operations.repos_compare_commits.Input.Path,
        query: Operations.repos_compare_commits.Input.Query = .init(),
        headers: Operations.repos_compare_commits.Input.Headers = .init()
    ) async throws -> Operations.repos_compare_commits.Output {
        try await repos_compare_commits(Operations.repos_compare_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package func repos_list_contributors(
        path: Operations.repos_list_contributors.Input.Path,
        query: Operations.repos_list_contributors.Input.Query = .init(),
        headers: Operations.repos_list_contributors.Input.Headers = .init()
    ) async throws -> Operations.repos_list_contributors.Output {
        try await repos_list_contributors(Operations.repos_list_contributors.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    package func issues_list_for_repo(
        path: Operations.issues_list_for_repo.Input.Path,
        query: Operations.issues_list_for_repo.Input.Query = .init(),
        headers: Operations.issues_list_for_repo.Input.Headers = .init()
    ) async throws -> Operations.issues_list_for_repo.Output {
        try await issues_list_for_repo(Operations.issues_list_for_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package func issues_create(
        path: Operations.issues_create.Input.Path,
        headers: Operations.issues_create.Input.Headers = .init(),
        body: Operations.issues_create.Input.Body
    ) async throws -> Operations.issues_create.Output {
        try await issues_create(Operations.issues_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package func issues_get(
        path: Operations.issues_get.Input.Path,
        headers: Operations.issues_get.Input.Headers = .init()
    ) async throws -> Operations.issues_get.Output {
        try await issues_get(Operations.issues_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    package func issues_update(
        path: Operations.issues_update.Input.Path,
        headers: Operations.issues_update.Input.Headers = .init(),
        body: Operations.issues_update.Input.Body? = nil
    ) async throws -> Operations.issues_update.Output {
        try await issues_update(Operations.issues_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    package func issues_create_comment(
        path: Operations.issues_create_comment.Input.Path,
        headers: Operations.issues_create_comment.Input.Headers = .init(),
        body: Operations.issues_create_comment.Input.Body
    ) async throws -> Operations.issues_create_comment.Output {
        try await issues_create_comment(Operations.issues_create_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    package func issues_list_events_for_timeline(
        path: Operations.issues_list_events_for_timeline.Input.Path,
        query: Operations.issues_list_events_for_timeline.Input.Query = .init(),
        headers: Operations.issues_list_events_for_timeline.Input.Headers = .init()
    ) async throws -> Operations.issues_list_events_for_timeline.Output {
        try await issues_list_events_for_timeline(Operations.issues_list_events_for_timeline.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    package func pulls_list(
        path: Operations.pulls_list.Input.Path,
        query: Operations.pulls_list.Input.Query = .init(),
        headers: Operations.pulls_list.Input.Headers = .init()
    ) async throws -> Operations.pulls_list.Output {
        try await pulls_list(Operations.pulls_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package func pulls_get(
        path: Operations.pulls_get.Input.Path,
        headers: Operations.pulls_get.Input.Headers = .init()
    ) async throws -> Operations.pulls_get.Output {
        try await pulls_get(Operations.pulls_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package func pulls_update(
        path: Operations.pulls_update.Input.Path,
        headers: Operations.pulls_update.Input.Headers = .init(),
        body: Operations.pulls_update.Input.Body? = nil
    ) async throws -> Operations.pulls_update.Output {
        try await pulls_update(Operations.pulls_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    package func pulls_list_review_comments(
        path: Operations.pulls_list_review_comments.Input.Path,
        query: Operations.pulls_list_review_comments.Input.Query = .init(),
        headers: Operations.pulls_list_review_comments.Input.Headers = .init()
    ) async throws -> Operations.pulls_list_review_comments.Output {
        try await pulls_list_review_comments(Operations.pulls_list_review_comments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package func pulls_list_files(
        path: Operations.pulls_list_files.Input.Path,
        query: Operations.pulls_list_files.Input.Query = .init(),
        headers: Operations.pulls_list_files.Input.Headers = .init()
    ) async throws -> Operations.pulls_list_files.Output {
        try await pulls_list_files(Operations.pulls_list_files.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package func repos_list_releases(
        path: Operations.repos_list_releases.Input.Path,
        query: Operations.repos_list_releases.Input.Query = .init(),
        headers: Operations.repos_list_releases.Input.Headers = .init()
    ) async throws -> Operations.repos_list_releases.Output {
        try await repos_list_releases(Operations.repos_list_releases.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package func repos_create_release(
        path: Operations.repos_create_release.Input.Path,
        headers: Operations.repos_create_release.Input.Headers = .init(),
        body: Operations.repos_create_release.Input.Body
    ) async throws -> Operations.repos_create_release.Output {
        try await repos_create_release(Operations.repos_create_release.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package func repos_get_latest_release(
        path: Operations.repos_get_latest_release.Input.Path,
        headers: Operations.repos_get_latest_release.Input.Headers = .init()
    ) async throws -> Operations.repos_get_latest_release.Output {
        try await repos_get_latest_release(Operations.repos_get_latest_release.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository tags
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package func repos_list_tags(
        path: Operations.repos_list_tags.Input.Path,
        query: Operations.repos_list_tags.Input.Query = .init(),
        headers: Operations.repos_list_tags.Input.Headers = .init()
    ) async throws -> Operations.repos_list_tags.Output {
        try await repos_list_tags(Operations.repos_list_tags.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// - Remark: Generated from `#/components/schemas/simple-user-nameonly`.
        package typealias simple_user_nameonly = Swift.String
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        package struct nullable_simple_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            package var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            package var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            package var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            package var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            package var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            package var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            package var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            package var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            package var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            package var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            package var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            package var starred_at: Swift.String?
            /// Creates a new `nullable_simple_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/integration`.
        package struct integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/id`.
            package var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/slug`.
            package var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/owner`.
            package var owner: Components.Schemas.nullable_simple_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/external_url`.
            package var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/integration/updated_at`.
            package var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration/permissions/issues`.
                package var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/checks`.
                package var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/metadata`.
                package var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/contents`.
                package var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/deployments`.
                package var deployments: Swift.String?
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                package init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                package enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                package func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            package var permissions: Components.Schemas.integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/events`.
            package var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/installations_count`.
            package var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/integration/client_id`.
            package var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/client_secret`.
            package var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/webhook_secret`.
            package var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/pem`.
            package var pem: Swift.String?
            /// Creates a new `integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            package init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_simple_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        package struct basic_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            package var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            package var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            package var status: Swift.String?
            /// Creates a new `basic_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            package init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        package struct validation_error_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            package var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            package var errors: [Swift.String]?
            /// Creates a new `validation_error_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            package init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        package struct validation_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            package var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            package struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                package var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                package var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                package var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                package var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                package var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen package enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                package var value: Components.Schemas.validation_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                package init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                package enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package typealias errorsPayload = [Components.Schemas.validation_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package var errors: Components.Schemas.validation_error.errorsPayload?
            /// Creates a new `validation_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            package init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        package struct hook_delivery: Codable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            package var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            package var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            package var delivered_at: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            package var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            package var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            package var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            package var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            package var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            package var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            package var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            package var repository_id: Swift.Int?
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            package struct requestPayload: Codable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                package struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                package var headers: Components.Schemas.hook_delivery.requestPayload.headersPayload?
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                package struct payloadPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `payloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                package var payload: Components.Schemas.hook_delivery.requestPayload.payloadPayload?
                /// Creates a new `requestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                package init(
                    headers: Components.Schemas.hook_delivery.requestPayload.headersPayload? = nil,
                    payload: Components.Schemas.hook_delivery.requestPayload.payloadPayload? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            package var request: Components.Schemas.hook_delivery.requestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            package struct responsePayload: Codable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                package struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                package var headers: Components.Schemas.hook_delivery.responsePayload.headersPayload?
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                package var payload: Swift.String?
                /// Creates a new `responsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                package init(
                    headers: Components.Schemas.hook_delivery.responsePayload.headersPayload? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            package var response: Components.Schemas.hook_delivery.responsePayload
            /// Creates a new `hook_delivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            package init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                url: Swift.String? = nil,
                request: Components.Schemas.hook_delivery.requestPayload,
                response: Components.Schemas.hook_delivery.responsePayload
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.url = url
                self.request = request
                self.response = response
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case url
                case request
                case response
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        package struct simple_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            package var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            package var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            package var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            package var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            package var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            package var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            package var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            package var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            package var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            package var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            package var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            package var starred_at: Swift.String?
            /// Creates a new `simple_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// An enterprise on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        package struct enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            package var html_url: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            package var website_url: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            package var node_id: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            package var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            package var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            package var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            package var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            package var avatar_url: Swift.String
            /// Creates a new `enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - html_url:
            ///   - website_url: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - node_id:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - created_at:
            ///   - updated_at:
            ///   - avatar_url:
            package init(
                description: Swift.String? = nil,
                html_url: Swift.String,
                website_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                avatar_url: Swift.String
            ) {
                self.description = description
                self.html_url = html_url
                self.website_url = website_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.created_at = created_at
                self.updated_at = updated_at
                self.avatar_url = avatar_url
            }
            package enum CodingKeys: String, CodingKey {
                case description
                case html_url
                case website_url
                case id
                case node_id
                case name
                case slug
                case created_at
                case updated_at
                case avatar_url
            }
        }
        /// Request to install an integration on a target
        ///
        /// - Remark: Generated from `#/components/schemas/integration-installation-request`.
        package struct integration_installation_request: Codable, Hashable, Sendable {
            /// Unique identifier of the request installation.
            ///
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/node_id`.
            package var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            package struct accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value1`.
                package var value1: Components.Schemas.simple_user?
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value2`.
                package var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                package init(
                    value1: Components.Schemas.simple_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            package var account: Components.Schemas.integration_installation_request.accountPayload
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/requester`.
            package var requester: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/created_at`.
            package var created_at: Foundation.Date
            /// Creates a new `integration_installation_request`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the request installation.
            ///   - node_id:
            ///   - account:
            ///   - requester:
            ///   - created_at:
            package init(
                id: Swift.Int,
                node_id: Swift.String? = nil,
                account: Components.Schemas.integration_installation_request.accountPayload,
                requester: Components.Schemas.simple_user,
                created_at: Foundation.Date
            ) {
                self.id = id
                self.node_id = node_id
                self.account = account
                self.requester = requester
                self.created_at = created_at
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case account
                case requester
                case created_at
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        package struct app_permissions: Codable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen package enum actionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            package var actions: Components.Schemas.app_permissions.actionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen package enum administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            package var administration: Components.Schemas.app_permissions.administrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen package enum checksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            package var checks: Components.Schemas.app_permissions.checksPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen package enum contentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            package var contents: Components.Schemas.app_permissions.contentsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen package enum deploymentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            package var deployments: Components.Schemas.app_permissions.deploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen package enum environmentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            package var environments: Components.Schemas.app_permissions.environmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen package enum issuesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            package var issues: Components.Schemas.app_permissions.issuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen package enum metadataPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            package var metadata: Components.Schemas.app_permissions.metadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen package enum packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            package var packages: Components.Schemas.app_permissions.packagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen package enum pagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            package var pages: Components.Schemas.app_permissions.pagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen package enum pull_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            package var pull_requests: Components.Schemas.app_permissions.pull_requestsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen package enum repository_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            package var repository_hooks: Components.Schemas.app_permissions.repository_hooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen package enum repository_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            package var repository_projects: Components.Schemas.app_permissions.repository_projectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen package enum secret_scanning_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            package var secret_scanning_alerts: Components.Schemas.app_permissions.secret_scanning_alertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen package enum secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            package var secrets: Components.Schemas.app_permissions.secretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen package enum security_eventsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            package var security_events: Components.Schemas.app_permissions.security_eventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen package enum single_filePayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            package var single_file: Components.Schemas.app_permissions.single_filePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen package enum statusesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            package var statuses: Components.Schemas.app_permissions.statusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen package enum vulnerability_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            package var vulnerability_alerts: Components.Schemas.app_permissions.vulnerability_alertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen package enum workflowsPayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            package var workflows: Components.Schemas.app_permissions.workflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen package enum membersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            package var members: Components.Schemas.app_permissions.membersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen package enum organization_administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            package var organization_administration: Components.Schemas.app_permissions.organization_administrationPayload?
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen package enum organization_custom_rolesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            package var organization_custom_roles: Components.Schemas.app_permissions.organization_custom_rolesPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen package enum organization_announcement_bannersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            package var organization_announcement_banners: Components.Schemas.app_permissions.organization_announcement_bannersPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen package enum organization_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            package var organization_hooks: Components.Schemas.app_permissions.organization_hooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen package enum organization_personal_access_tokensPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            package var organization_personal_access_tokens: Components.Schemas.app_permissions.organization_personal_access_tokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen package enum organization_personal_access_token_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            package var organization_personal_access_token_requests: Components.Schemas.app_permissions.organization_personal_access_token_requestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen package enum organization_planPayload: String, Codable, Hashable, Sendable {
                case read = "read"
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            package var organization_plan: Components.Schemas.app_permissions.organization_planPayload?
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen package enum organization_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            package var organization_projects: Components.Schemas.app_permissions.organization_projectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen package enum organization_packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            package var organization_packages: Components.Schemas.app_permissions.organization_packagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen package enum organization_secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            package var organization_secrets: Components.Schemas.app_permissions.organization_secretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen package enum organization_self_hosted_runnersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            package var organization_self_hosted_runners: Components.Schemas.app_permissions.organization_self_hosted_runnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen package enum organization_user_blockingPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            package var organization_user_blocking: Components.Schemas.app_permissions.organization_user_blockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen package enum team_discussionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            package var team_discussions: Components.Schemas.app_permissions.team_discussionsPayload?
            /// Creates a new `app_permissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pull_requests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repository_hooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repository_projects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secret_scanning_alerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - security_events: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - single_file: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerability_alerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organization_administration: The level of permission to grant the access token to manage access to an organization.
            ///   - organization_custom_roles: The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///   - organization_announcement_banners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organization_hooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organization_personal_access_tokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organization_personal_access_token_requests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organization_plan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organization_projects: The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///   - organization_packages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organization_secrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organization_self_hosted_runners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organization_user_blocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - team_discussions: The level of permission to grant the access token to manage team discussions and related comments.
            package init(
                actions: Components.Schemas.app_permissions.actionsPayload? = nil,
                administration: Components.Schemas.app_permissions.administrationPayload? = nil,
                checks: Components.Schemas.app_permissions.checksPayload? = nil,
                contents: Components.Schemas.app_permissions.contentsPayload? = nil,
                deployments: Components.Schemas.app_permissions.deploymentsPayload? = nil,
                environments: Components.Schemas.app_permissions.environmentsPayload? = nil,
                issues: Components.Schemas.app_permissions.issuesPayload? = nil,
                metadata: Components.Schemas.app_permissions.metadataPayload? = nil,
                packages: Components.Schemas.app_permissions.packagesPayload? = nil,
                pages: Components.Schemas.app_permissions.pagesPayload? = nil,
                pull_requests: Components.Schemas.app_permissions.pull_requestsPayload? = nil,
                repository_hooks: Components.Schemas.app_permissions.repository_hooksPayload? = nil,
                repository_projects: Components.Schemas.app_permissions.repository_projectsPayload? = nil,
                secret_scanning_alerts: Components.Schemas.app_permissions.secret_scanning_alertsPayload? = nil,
                secrets: Components.Schemas.app_permissions.secretsPayload? = nil,
                security_events: Components.Schemas.app_permissions.security_eventsPayload? = nil,
                single_file: Components.Schemas.app_permissions.single_filePayload? = nil,
                statuses: Components.Schemas.app_permissions.statusesPayload? = nil,
                vulnerability_alerts: Components.Schemas.app_permissions.vulnerability_alertsPayload? = nil,
                workflows: Components.Schemas.app_permissions.workflowsPayload? = nil,
                members: Components.Schemas.app_permissions.membersPayload? = nil,
                organization_administration: Components.Schemas.app_permissions.organization_administrationPayload? = nil,
                organization_custom_roles: Components.Schemas.app_permissions.organization_custom_rolesPayload? = nil,
                organization_announcement_banners: Components.Schemas.app_permissions.organization_announcement_bannersPayload? = nil,
                organization_hooks: Components.Schemas.app_permissions.organization_hooksPayload? = nil,
                organization_personal_access_tokens: Components.Schemas.app_permissions.organization_personal_access_tokensPayload? = nil,
                organization_personal_access_token_requests: Components.Schemas.app_permissions.organization_personal_access_token_requestsPayload? = nil,
                organization_plan: Components.Schemas.app_permissions.organization_planPayload? = nil,
                organization_projects: Components.Schemas.app_permissions.organization_projectsPayload? = nil,
                organization_packages: Components.Schemas.app_permissions.organization_packagesPayload? = nil,
                organization_secrets: Components.Schemas.app_permissions.organization_secretsPayload? = nil,
                organization_self_hosted_runners: Components.Schemas.app_permissions.organization_self_hosted_runnersPayload? = nil,
                organization_user_blocking: Components.Schemas.app_permissions.organization_user_blockingPayload? = nil,
                team_discussions: Components.Schemas.app_permissions.team_discussionsPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.contents = contents
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pull_requests = pull_requests
                self.repository_hooks = repository_hooks
                self.repository_projects = repository_projects
                self.secret_scanning_alerts = secret_scanning_alerts
                self.secrets = secrets
                self.security_events = security_events
                self.single_file = single_file
                self.statuses = statuses
                self.vulnerability_alerts = vulnerability_alerts
                self.workflows = workflows
                self.members = members
                self.organization_administration = organization_administration
                self.organization_custom_roles = organization_custom_roles
                self.organization_announcement_banners = organization_announcement_banners
                self.organization_hooks = organization_hooks
                self.organization_personal_access_tokens = organization_personal_access_tokens
                self.organization_personal_access_token_requests = organization_personal_access_token_requests
                self.organization_plan = organization_plan
                self.organization_projects = organization_projects
                self.organization_packages = organization_packages
                self.organization_secrets = organization_secrets
                self.organization_self_hosted_runners = organization_self_hosted_runners
                self.organization_user_blocking = organization_user_blocking
                self.team_discussions = team_discussions
            }
            package enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case contents
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pull_requests
                case repository_hooks
                case repository_projects
                case secret_scanning_alerts
                case secrets
                case security_events
                case single_file
                case statuses
                case vulnerability_alerts
                case workflows
                case members
                case organization_administration
                case organization_custom_roles
                case organization_announcement_banners
                case organization_hooks
                case organization_personal_access_tokens
                case organization_personal_access_token_requests
                case organization_plan
                case organization_projects
                case organization_packages
                case organization_secrets
                case organization_self_hosted_runners
                case organization_user_blocking
                case team_discussions
            }
        }
        /// Installation
        ///
        /// - Remark: Generated from `#/components/schemas/installation`.
        package struct installation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            package struct accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/installation/account/value1`.
                package var value1: Components.Schemas.simple_user?
                /// - Remark: Generated from `#/components/schemas/installation/account/value2`.
                package var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                package init(
                    value1: Components.Schemas.simple_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            package var account: Components.Schemas.installation.accountPayload?
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            @frozen package enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            package var repository_selection: Components.Schemas.installation.repository_selectionPayload
            /// - Remark: Generated from `#/components/schemas/installation/access_tokens_url`.
            package var access_tokens_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/repositories_url`.
            package var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/app_id`.
            package var app_id: Swift.Int
            /// The ID of the user or organization this token is being scoped to.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/target_id`.
            package var target_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/target_type`.
            package var target_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/permissions`.
            package var permissions: Components.Schemas.app_permissions
            /// - Remark: Generated from `#/components/schemas/installation/events`.
            package var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/installation/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/single_file_name`.
            package var single_file_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation/has_multiple_single_files`.
            package var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation/single_file_paths`.
            package var single_file_paths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/installation/app_slug`.
            package var app_slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/suspended_by`.
            package var suspended_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/installation/suspended_at`.
            package var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/installation/contact_email`.
            package var contact_email: Swift.String?
            /// Creates a new `installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - account:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            ///   - access_tokens_url:
            ///   - repositories_url:
            ///   - html_url:
            ///   - app_id:
            ///   - target_id: The ID of the user or organization this token is being scoped to.
            ///   - target_type:
            ///   - permissions:
            ///   - events:
            ///   - created_at:
            ///   - updated_at:
            ///   - single_file_name:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            ///   - app_slug:
            ///   - suspended_by:
            ///   - suspended_at:
            ///   - contact_email:
            package init(
                id: Swift.Int,
                account: Components.Schemas.installation.accountPayload? = nil,
                repository_selection: Components.Schemas.installation.repository_selectionPayload,
                access_tokens_url: Swift.String,
                repositories_url: Swift.String,
                html_url: Swift.String,
                app_id: Swift.Int,
                target_id: Swift.Int,
                target_type: Swift.String,
                permissions: Components.Schemas.app_permissions,
                events: [Swift.String],
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                single_file_name: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil,
                app_slug: Swift.String,
                suspended_by: Components.Schemas.nullable_simple_user? = nil,
                suspended_at: Foundation.Date? = nil,
                contact_email: Swift.String? = nil
            ) {
                self.id = id
                self.account = account
                self.repository_selection = repository_selection
                self.access_tokens_url = access_tokens_url
                self.repositories_url = repositories_url
                self.html_url = html_url
                self.app_id = app_id
                self.target_id = target_id
                self.target_type = target_type
                self.permissions = permissions
                self.events = events
                self.created_at = created_at
                self.updated_at = updated_at
                self.single_file_name = single_file_name
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
                self.app_slug = app_slug
                self.suspended_by = suspended_by
                self.suspended_at = suspended_at
                self.contact_email = contact_email
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case account
                case repository_selection
                case access_tokens_url
                case repositories_url
                case html_url
                case app_id
                case target_id
                case target_type
                case permissions
                case events
                case created_at
                case updated_at
                case single_file_name
                case has_multiple_single_files
                case single_file_paths
                case app_slug
                case suspended_by
                case suspended_at
                case contact_email
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        package struct nullable_license_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            package var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            package var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            package var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            package var html_url: Swift.String?
            /// Creates a new `nullable_license_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            package init(
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        package struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            package var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            package var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            package var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            @frozen package enum organizationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/organization/case1`.
                case nullable_simple_user(Components.Schemas.nullable_simple_user?)
                /// - Remark: Generated from `#/components/schemas/repository/organization/case2`.
                case simple_user_nameonly(Components.Schemas.simple_user_nameonly)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .nullable_simple_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .simple_user_nameonly(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .nullable_simple_user(value):
                        try value.encode(to: encoder)
                    case let .simple_user_nameonly(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            package var organization: Components.Schemas.repository.organizationPayload?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                package init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            package var owner: Components.Schemas.simple_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            package var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            package var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            package var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            package var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            package var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            package var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            package var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            package var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            package var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            package var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            package var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            package var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            package var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            package var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            package var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            package var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            package var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            package var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            package var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            package var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            package var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            package var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            package var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            package var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            package var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            package var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            package var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            package var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            package var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            package var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            package var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            package var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            package var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            package var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            package var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            package var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            package var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            package var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            package var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            package var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            package var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            package var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            package var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            package var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            package var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            package var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            package var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            package var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            package var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            package var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            package var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            package var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            package var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            package var pushed_at: Components.Schemas.string_or_int_date
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            package var created_at: Components.Schemas.string_or_int_date
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            package var updated_at: Components.Schemas.string_or_int_date
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            package var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            package struct template_repositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                package var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                package var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                package var full_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                package struct ownerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    package var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    package var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    package var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    package var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    package var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    package var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    package var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    package var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    package var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    package var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    package var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    package var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    package var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    package var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    package var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    package var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    package var site_admin: Swift.Bool?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - avatar_url:
                    ///   - gravatar_id:
                    ///   - url:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    package init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.avatar_url = avatar_url
                        self.gravatar_id = gravatar_id
                        self.url = url
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                    }
                    package enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case avatar_url
                        case gravatar_id
                        case url
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case repos_url
                        case events_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                package var owner: Components.Schemas.repository.template_repositoryPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                package var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                package var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                package var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                package var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                package var archive_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                package var assignees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                package var blobs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                package var branches_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                package var collaborators_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                package var comments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                package var commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                package var compare_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                package var contents_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                package var contributors_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                package var deployments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                package var downloads_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                package var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                package var forks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                package var git_commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                package var git_refs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                package var git_tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                package var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                package var issue_comment_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                package var issue_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                package var issues_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                package var keys_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                package var labels_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                package var languages_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                package var merges_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                package var milestones_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                package var notifications_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                package var pulls_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                package var releases_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                package var ssh_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                package var stargazers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                package var statuses_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                package var subscribers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                package var subscription_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                package var tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                package var teams_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                package var trees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                package var clone_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                package var mirror_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                package var hooks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                package var svn_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                package var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                package var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                package var forks_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                package var stargazers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                package var watchers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                package var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                package var default_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                package var open_issues_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                package var is_template: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                package var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                package var has_issues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                package var has_projects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                package var has_wiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                package var has_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                package var has_downloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                package var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                package var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                package var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                package var pushed_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                package var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                package var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                package struct permissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    package var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    package var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    package var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    package var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    package var pull: Swift.Bool?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    package init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    package enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                package var permissions: Components.Schemas.repository.template_repositoryPayload.permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                package var allow_rebase_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                package var temp_clone_token: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                package var allow_squash_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                package var allow_auto_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                package var delete_branch_on_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                package var allow_update_branch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                package var use_squash_pr_title_as_default: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen package enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                package var squash_merge_commit_title: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_titlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen package enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                    case BLANK = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                package var squash_merge_commit_message: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_messagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen package enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case MERGE_MESSAGE = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                package var merge_commit_title: Components.Schemas.repository.template_repositoryPayload.merge_commit_titlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen package enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case PR_TITLE = "PR_TITLE"
                    case BLANK = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                package var merge_commit_message: Components.Schemas.repository.template_repositoryPayload.merge_commit_messagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                package var allow_merge_commit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                package var subscribers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                package var network_count: Swift.Int?
                /// Creates a new `template_repositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - name:
                ///   - full_name:
                ///   - owner:
                ///   - _private:
                ///   - html_url:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archive_url:
                ///   - assignees_url:
                ///   - blobs_url:
                ///   - branches_url:
                ///   - collaborators_url:
                ///   - comments_url:
                ///   - commits_url:
                ///   - compare_url:
                ///   - contents_url:
                ///   - contributors_url:
                ///   - deployments_url:
                ///   - downloads_url:
                ///   - events_url:
                ///   - forks_url:
                ///   - git_commits_url:
                ///   - git_refs_url:
                ///   - git_tags_url:
                ///   - git_url:
                ///   - issue_comment_url:
                ///   - issue_events_url:
                ///   - issues_url:
                ///   - keys_url:
                ///   - labels_url:
                ///   - languages_url:
                ///   - merges_url:
                ///   - milestones_url:
                ///   - notifications_url:
                ///   - pulls_url:
                ///   - releases_url:
                ///   - ssh_url:
                ///   - stargazers_url:
                ///   - statuses_url:
                ///   - subscribers_url:
                ///   - subscription_url:
                ///   - tags_url:
                ///   - teams_url:
                ///   - trees_url:
                ///   - clone_url:
                ///   - mirror_url:
                ///   - hooks_url:
                ///   - svn_url:
                ///   - homepage:
                ///   - language:
                ///   - forks_count:
                ///   - stargazers_count:
                ///   - watchers_count:
                ///   - size:
                ///   - default_branch:
                ///   - open_issues_count:
                ///   - is_template:
                ///   - topics:
                ///   - has_issues:
                ///   - has_projects:
                ///   - has_wiki:
                ///   - has_pages:
                ///   - has_downloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushed_at:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - allow_rebase_merge:
                ///   - temp_clone_token:
                ///   - allow_squash_merge:
                ///   - allow_auto_merge:
                ///   - delete_branch_on_merge:
                ///   - allow_update_branch:
                ///   - use_squash_pr_title_as_default:
                ///   - squash_merge_commit_title: The default value for a squash merge commit title:
                ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                ///   - merge_commit_title: The default value for a merge commit title.
                ///   - merge_commit_message: The default value for a merge commit message.
                ///   - allow_merge_commit:
                ///   - subscribers_count:
                ///   - network_count:
                package init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    full_name: Swift.String? = nil,
                    owner: Components.Schemas.repository.template_repositoryPayload.ownerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    html_url: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archive_url: Swift.String? = nil,
                    assignees_url: Swift.String? = nil,
                    blobs_url: Swift.String? = nil,
                    branches_url: Swift.String? = nil,
                    collaborators_url: Swift.String? = nil,
                    comments_url: Swift.String? = nil,
                    commits_url: Swift.String? = nil,
                    compare_url: Swift.String? = nil,
                    contents_url: Swift.String? = nil,
                    contributors_url: Swift.String? = nil,
                    deployments_url: Swift.String? = nil,
                    downloads_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    forks_url: Swift.String? = nil,
                    git_commits_url: Swift.String? = nil,
                    git_refs_url: Swift.String? = nil,
                    git_tags_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    issue_comment_url: Swift.String? = nil,
                    issue_events_url: Swift.String? = nil,
                    issues_url: Swift.String? = nil,
                    keys_url: Swift.String? = nil,
                    labels_url: Swift.String? = nil,
                    languages_url: Swift.String? = nil,
                    merges_url: Swift.String? = nil,
                    milestones_url: Swift.String? = nil,
                    notifications_url: Swift.String? = nil,
                    pulls_url: Swift.String? = nil,
                    releases_url: Swift.String? = nil,
                    ssh_url: Swift.String? = nil,
                    stargazers_url: Swift.String? = nil,
                    statuses_url: Swift.String? = nil,
                    subscribers_url: Swift.String? = nil,
                    subscription_url: Swift.String? = nil,
                    tags_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil,
                    trees_url: Swift.String? = nil,
                    clone_url: Swift.String? = nil,
                    mirror_url: Swift.String? = nil,
                    hooks_url: Swift.String? = nil,
                    svn_url: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forks_count: Swift.Int? = nil,
                    stargazers_count: Swift.Int? = nil,
                    watchers_count: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    default_branch: Swift.String? = nil,
                    open_issues_count: Swift.Int? = nil,
                    is_template: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    has_issues: Swift.Bool? = nil,
                    has_projects: Swift.Bool? = nil,
                    has_wiki: Swift.Bool? = nil,
                    has_pages: Swift.Bool? = nil,
                    has_downloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushed_at: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.repository.template_repositoryPayload.permissionsPayload? = nil,
                    allow_rebase_merge: Swift.Bool? = nil,
                    temp_clone_token: Swift.String? = nil,
                    allow_squash_merge: Swift.Bool? = nil,
                    allow_auto_merge: Swift.Bool? = nil,
                    delete_branch_on_merge: Swift.Bool? = nil,
                    allow_update_branch: Swift.Bool? = nil,
                    use_squash_pr_title_as_default: Swift.Bool? = nil,
                    squash_merge_commit_title: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_titlePayload? = nil,
                    squash_merge_commit_message: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_messagePayload? = nil,
                    merge_commit_title: Components.Schemas.repository.template_repositoryPayload.merge_commit_titlePayload? = nil,
                    merge_commit_message: Components.Schemas.repository.template_repositoryPayload.merge_commit_messagePayload? = nil,
                    allow_merge_commit: Swift.Bool? = nil,
                    subscribers_count: Swift.Int? = nil,
                    network_count: Swift.Int? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.full_name = full_name
                    self.owner = owner
                    self._private = _private
                    self.html_url = html_url
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archive_url = archive_url
                    self.assignees_url = assignees_url
                    self.blobs_url = blobs_url
                    self.branches_url = branches_url
                    self.collaborators_url = collaborators_url
                    self.comments_url = comments_url
                    self.commits_url = commits_url
                    self.compare_url = compare_url
                    self.contents_url = contents_url
                    self.contributors_url = contributors_url
                    self.deployments_url = deployments_url
                    self.downloads_url = downloads_url
                    self.events_url = events_url
                    self.forks_url = forks_url
                    self.git_commits_url = git_commits_url
                    self.git_refs_url = git_refs_url
                    self.git_tags_url = git_tags_url
                    self.git_url = git_url
                    self.issue_comment_url = issue_comment_url
                    self.issue_events_url = issue_events_url
                    self.issues_url = issues_url
                    self.keys_url = keys_url
                    self.labels_url = labels_url
                    self.languages_url = languages_url
                    self.merges_url = merges_url
                    self.milestones_url = milestones_url
                    self.notifications_url = notifications_url
                    self.pulls_url = pulls_url
                    self.releases_url = releases_url
                    self.ssh_url = ssh_url
                    self.stargazers_url = stargazers_url
                    self.statuses_url = statuses_url
                    self.subscribers_url = subscribers_url
                    self.subscription_url = subscription_url
                    self.tags_url = tags_url
                    self.teams_url = teams_url
                    self.trees_url = trees_url
                    self.clone_url = clone_url
                    self.mirror_url = mirror_url
                    self.hooks_url = hooks_url
                    self.svn_url = svn_url
                    self.homepage = homepage
                    self.language = language
                    self.forks_count = forks_count
                    self.stargazers_count = stargazers_count
                    self.watchers_count = watchers_count
                    self.size = size
                    self.default_branch = default_branch
                    self.open_issues_count = open_issues_count
                    self.is_template = is_template
                    self.topics = topics
                    self.has_issues = has_issues
                    self.has_projects = has_projects
                    self.has_wiki = has_wiki
                    self.has_pages = has_pages
                    self.has_downloads = has_downloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushed_at = pushed_at
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.allow_rebase_merge = allow_rebase_merge
                    self.temp_clone_token = temp_clone_token
                    self.allow_squash_merge = allow_squash_merge
                    self.allow_auto_merge = allow_auto_merge
                    self.delete_branch_on_merge = delete_branch_on_merge
                    self.allow_update_branch = allow_update_branch
                    self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                    self.squash_merge_commit_title = squash_merge_commit_title
                    self.squash_merge_commit_message = squash_merge_commit_message
                    self.merge_commit_title = merge_commit_title
                    self.merge_commit_message = merge_commit_message
                    self.allow_merge_commit = allow_merge_commit
                    self.subscribers_count = subscribers_count
                    self.network_count = network_count
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case full_name
                    case owner
                    case _private = "private"
                    case html_url
                    case description
                    case fork
                    case url
                    case archive_url
                    case assignees_url
                    case blobs_url
                    case branches_url
                    case collaborators_url
                    case comments_url
                    case commits_url
                    case compare_url
                    case contents_url
                    case contributors_url
                    case deployments_url
                    case downloads_url
                    case events_url
                    case forks_url
                    case git_commits_url
                    case git_refs_url
                    case git_tags_url
                    case git_url
                    case issue_comment_url
                    case issue_events_url
                    case issues_url
                    case keys_url
                    case labels_url
                    case languages_url
                    case merges_url
                    case milestones_url
                    case notifications_url
                    case pulls_url
                    case releases_url
                    case ssh_url
                    case stargazers_url
                    case statuses_url
                    case subscribers_url
                    case subscription_url
                    case tags_url
                    case teams_url
                    case trees_url
                    case clone_url
                    case mirror_url
                    case hooks_url
                    case svn_url
                    case homepage
                    case language
                    case forks_count
                    case stargazers_count
                    case watchers_count
                    case size
                    case default_branch
                    case open_issues_count
                    case is_template
                    case topics
                    case has_issues
                    case has_projects
                    case has_wiki
                    case has_pages
                    case has_downloads
                    case archived
                    case disabled
                    case visibility
                    case pushed_at
                    case created_at
                    case updated_at
                    case permissions
                    case allow_rebase_merge
                    case temp_clone_token
                    case allow_squash_merge
                    case allow_auto_merge
                    case delete_branch_on_merge
                    case allow_update_branch
                    case use_squash_pr_title_as_default
                    case squash_merge_commit_title
                    case squash_merge_commit_message
                    case merge_commit_title
                    case merge_commit_message
                    case allow_merge_commit
                    case subscribers_count
                    case network_count
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            package var template_repository: Components.Schemas.repository.template_repositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            package var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            package var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            package var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            package var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            package var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            package var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen package enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            package var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen package enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            package var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen package enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            package var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen package enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            package var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            package var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            package var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            package var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            package var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            package var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            package var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            package var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            package var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            package var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            package var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.repository.organizationPayload? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Components.Schemas.string_or_int_date,
                created_at: Components.Schemas.string_or_int_date,
                updated_at: Components.Schemas.string_or_int_date,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.repository.template_repositoryPayload? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-or-int-date`.
        @frozen package enum string_or_int_date: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case1`.
            case string_date(Components.Schemas.string_date)
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case2`.
            case int_date(Components.Schemas.int_date)
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .string_date(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .int_date(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .string_date(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .int_date(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-date`.
        package typealias string_date = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/int-date`.
        package typealias int_date = Swift.Int
        /// Authentication token for a GitHub App installed on a user or org.
        ///
        /// - Remark: Generated from `#/components/schemas/installation-token`.
        package struct installation_token: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/installation-token/token`.
            package var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/expires_at`.
            package var expires_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/permissions`.
            package var permissions: Components.Schemas.app_permissions?
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            @frozen package enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            package var repository_selection: Components.Schemas.installation_token.repository_selectionPayload?
            /// - Remark: Generated from `#/components/schemas/installation-token/repositories`.
            package var repositories: [Components.Schemas.repository]?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file`.
            package var single_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation-token/has_multiple_single_files`.
            package var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file_paths`.
            package var single_file_paths: [Swift.String]?
            /// Creates a new `installation_token`.
            ///
            /// - Parameters:
            ///   - token:
            ///   - expires_at:
            ///   - permissions:
            ///   - repository_selection:
            ///   - repositories:
            ///   - single_file:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            package init(
                token: Swift.String,
                expires_at: Swift.String,
                permissions: Components.Schemas.app_permissions? = nil,
                repository_selection: Components.Schemas.installation_token.repository_selectionPayload? = nil,
                repositories: [Components.Schemas.repository]? = nil,
                single_file: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil
            ) {
                self.token = token
                self.expires_at = expires_at
                self.permissions = permissions
                self.repository_selection = repository_selection
                self.repositories = repositories
                self.single_file = single_file
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
            }
            package enum CodingKeys: String, CodingKey {
                case token
                case expires_at
                case permissions
                case repository_selection
                case repositories
                case single_file
                case has_multiple_single_files
                case single_file_paths
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        package struct code_of_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            package var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            package var html_url: Swift.String?
            /// Creates a new `code_of_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            package init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// The security alert number.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-number`.
        package typealias alert_number = Swift.Int
        /// Details for the vulnerable package.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-package`.
        package struct dependabot_alert_package: Codable, Hashable, Sendable {
            /// The package's language or package management ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/ecosystem`.
            package var ecosystem: Swift.String
            /// The unique package name within its ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/name`.
            package var name: Swift.String
            /// Creates a new `dependabot_alert_package`.
            ///
            /// - Parameters:
            ///   - ecosystem: The package's language or package management ecosystem.
            ///   - name: The unique package name within its ecosystem.
            package init(
                ecosystem: Swift.String,
                name: Swift.String
            ) {
                self.ecosystem = ecosystem
                self.name = name
            }
            package enum CodingKeys: String, CodingKey {
                case ecosystem
                case name
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ecosystem = try container.decode(
                    Swift.String.self,
                    forKey: .ecosystem
                )
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ecosystem",
                    "name"
                ])
            }
        }
        /// Details pertaining to one vulnerable version range for the advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability`.
        package struct dependabot_alert_security_vulnerability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/package`.
            package var package: Components.Schemas.dependabot_alert_package
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            @frozen package enum severityPayload: String, Codable, Hashable, Sendable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            package var severity: Components.Schemas.dependabot_alert_security_vulnerability.severityPayload
            /// Conditions that identify vulnerable versions of this vulnerability's package.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/vulnerable_version_range`.
            package var vulnerable_version_range: Swift.String
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            package struct first_patched_versionPayload: Codable, Hashable, Sendable {
                /// The package version that patches this vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version/identifier`.
                package var identifier: Swift.String
                /// Creates a new `first_patched_versionPayload`.
                ///
                /// - Parameters:
                ///   - identifier: The package version that patches this vulnerability.
                package init(identifier: Swift.String) {
                    self.identifier = identifier
                }
                package enum CodingKeys: String, CodingKey {
                    case identifier
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    identifier = try container.decode(
                        Swift.String.self,
                        forKey: .identifier
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "identifier"
                    ])
                }
            }
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            package var first_patched_version: Components.Schemas.dependabot_alert_security_vulnerability.first_patched_versionPayload?
            /// Creates a new `dependabot_alert_security_vulnerability`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - severity: The severity of the vulnerability.
            ///   - vulnerable_version_range: Conditions that identify vulnerable versions of this vulnerability's package.
            ///   - first_patched_version: Details pertaining to the package version that patches this vulnerability.
            package init(
                package: Components.Schemas.dependabot_alert_package,
                severity: Components.Schemas.dependabot_alert_security_vulnerability.severityPayload,
                vulnerable_version_range: Swift.String,
                first_patched_version: Components.Schemas.dependabot_alert_security_vulnerability.first_patched_versionPayload? = nil
            ) {
                self.package = package
                self.severity = severity
                self.vulnerable_version_range = vulnerable_version_range
                self.first_patched_version = first_patched_version
            }
            package enum CodingKeys: String, CodingKey {
                case package
                case severity
                case vulnerable_version_range
                case first_patched_version
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                package = try container.decode(
                    Components.Schemas.dependabot_alert_package.self,
                    forKey: .package
                )
                severity = try container.decode(
                    Components.Schemas.dependabot_alert_security_vulnerability.severityPayload.self,
                    forKey: .severity
                )
                vulnerable_version_range = try container.decode(
                    Swift.String.self,
                    forKey: .vulnerable_version_range
                )
                first_patched_version = try container.decodeIfPresent(
                    Components.Schemas.dependabot_alert_security_vulnerability.first_patched_versionPayload.self,
                    forKey: .first_patched_version
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package",
                    "severity",
                    "vulnerable_version_range",
                    "first_patched_version"
                ])
            }
        }
        /// Details for the GitHub Security Advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory`.
        package struct dependabot_alert_security_advisory: Codable, Hashable, Sendable {
            /// The unique GitHub Security Advisory ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ghsa_id`.
            package var ghsa_id: Swift.String
            /// The unique CVE ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cve_id`.
            package var cve_id: Swift.String?
            /// A short, plain text summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/summary`.
            package var summary: Swift.String
            /// A long-form Markdown-supported description of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/description`.
            package var description: Swift.String
            /// Vulnerable version range information for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/vulnerabilities`.
            package var vulnerabilities: [Components.Schemas.dependabot_alert_security_vulnerability]
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            @frozen package enum severityPayload: String, Codable, Hashable, Sendable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            package var severity: Components.Schemas.dependabot_alert_security_advisory.severityPayload
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            package struct cvssPayload: Codable, Hashable, Sendable {
                /// The overall CVSS score of the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/score`.
                package var score: Swift.Double
                /// The full CVSS vector string for the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/vector_string`.
                package var vector_string: Swift.String?
                /// Creates a new `cvssPayload`.
                ///
                /// - Parameters:
                ///   - score: The overall CVSS score of the advisory.
                ///   - vector_string: The full CVSS vector string for the advisory.
                package init(
                    score: Swift.Double,
                    vector_string: Swift.String? = nil
                ) {
                    self.score = score
                    self.vector_string = vector_string
                }
                package enum CodingKeys: String, CodingKey {
                    case score
                    case vector_string
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    score = try container.decode(
                        Swift.Double.self,
                        forKey: .score
                    )
                    vector_string = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vector_string
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "score",
                        "vector_string"
                    ])
                }
            }
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            package var cvss: Components.Schemas.dependabot_alert_security_advisory.cvssPayload
            /// A CWE weakness assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload`.
            package struct cwesPayloadPayload: Codable, Hashable, Sendable {
                /// The unique CWE ID.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/cwe_id`.
                package var cwe_id: Swift.String
                /// The short, plain text name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/name`.
                package var name: Swift.String
                /// Creates a new `cwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cwe_id: The unique CWE ID.
                ///   - name: The short, plain text name of the CWE.
                package init(
                    cwe_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cwe_id = cwe_id
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case cwe_id
                    case name
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    cwe_id = try container.decode(
                        Swift.String.self,
                        forKey: .cwe_id
                    )
                    name = try container.decode(
                        Swift.String.self,
                        forKey: .name
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "cwe_id",
                        "name"
                    ])
                }
            }
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            package typealias cwesPayload = [Components.Schemas.dependabot_alert_security_advisory.cwesPayloadPayload]
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            package var cwes: Components.Schemas.dependabot_alert_security_advisory.cwesPayload
            /// An advisory identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload`.
            package struct identifiersPayloadPayload: Codable, Hashable, Sendable {
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable {
                    case CVE = "CVE"
                    case GHSA = "GHSA"
                }
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                package var _type: Components.Schemas.dependabot_alert_security_advisory.identifiersPayloadPayload._typePayload
                /// The value of the advisory identifer.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/value`.
                package var value: Swift.String
                /// Creates a new `identifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of advisory identifier.
                ///   - value: The value of the advisory identifer.
                package init(
                    _type: Components.Schemas.dependabot_alert_security_advisory.identifiersPayloadPayload._typePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    _type = try container.decode(
                        Components.Schemas.dependabot_alert_security_advisory.identifiersPayloadPayload._typePayload.self,
                        forKey: ._type
                    )
                    value = try container.decode(
                        Swift.String.self,
                        forKey: .value
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type",
                        "value"
                    ])
                }
            }
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            package typealias identifiersPayload = [Components.Schemas.dependabot_alert_security_advisory.identifiersPayloadPayload]
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            package var identifiers: Components.Schemas.dependabot_alert_security_advisory.identifiersPayload
            /// A link to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload`.
            package struct referencesPayloadPayload: Codable, Hashable, Sendable {
                /// The URL of the reference.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload/url`.
                package var url: Swift.String
                /// Creates a new `referencesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL of the reference.
                package init(url: Swift.String) {
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case url
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    url = try container.decode(
                        Swift.String.self,
                        forKey: .url
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "url"
                    ])
                }
            }
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            package typealias referencesPayload = [Components.Schemas.dependabot_alert_security_advisory.referencesPayloadPayload]
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            package var references: Components.Schemas.dependabot_alert_security_advisory.referencesPayload
            /// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/published_at`.
            package var published_at: Foundation.Date
            /// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/updated_at`.
            package var updated_at: Foundation.Date
            /// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/withdrawn_at`.
            package var withdrawn_at: Foundation.Date?
            /// Creates a new `dependabot_alert_security_advisory`.
            ///
            /// - Parameters:
            ///   - ghsa_id: The unique GitHub Security Advisory ID assigned to the advisory.
            ///   - cve_id: The unique CVE ID assigned to the advisory.
            ///   - summary: A short, plain text summary of the advisory.
            ///   - description: A long-form Markdown-supported description of the advisory.
            ///   - vulnerabilities: Vulnerable version range information for the advisory.
            ///   - severity: The severity of the advisory.
            ///   - cvss: Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///   - cwes: Details for the advisory pertaining to Common Weakness Enumeration.
            ///   - identifiers: Values that identify this advisory among security information sources.
            ///   - references: Links to additional advisory information.
            ///   - published_at: The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - updated_at: The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - withdrawn_at: The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            package init(
                ghsa_id: Swift.String,
                cve_id: Swift.String? = nil,
                summary: Swift.String,
                description: Swift.String,
                vulnerabilities: [Components.Schemas.dependabot_alert_security_vulnerability],
                severity: Components.Schemas.dependabot_alert_security_advisory.severityPayload,
                cvss: Components.Schemas.dependabot_alert_security_advisory.cvssPayload,
                cwes: Components.Schemas.dependabot_alert_security_advisory.cwesPayload,
                identifiers: Components.Schemas.dependabot_alert_security_advisory.identifiersPayload,
                references: Components.Schemas.dependabot_alert_security_advisory.referencesPayload,
                published_at: Foundation.Date,
                updated_at: Foundation.Date,
                withdrawn_at: Foundation.Date? = nil
            ) {
                self.ghsa_id = ghsa_id
                self.cve_id = cve_id
                self.summary = summary
                self.description = description
                self.vulnerabilities = vulnerabilities
                self.severity = severity
                self.cvss = cvss
                self.cwes = cwes
                self.identifiers = identifiers
                self.references = references
                self.published_at = published_at
                self.updated_at = updated_at
                self.withdrawn_at = withdrawn_at
            }
            package enum CodingKeys: String, CodingKey {
                case ghsa_id
                case cve_id
                case summary
                case description
                case vulnerabilities
                case severity
                case cvss
                case cwes
                case identifiers
                case references
                case published_at
                case updated_at
                case withdrawn_at
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ghsa_id = try container.decode(
                    Swift.String.self,
                    forKey: .ghsa_id
                )
                cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decode(
                    Swift.String.self,
                    forKey: .description
                )
                vulnerabilities = try container.decode(
                    [Components.Schemas.dependabot_alert_security_vulnerability].self,
                    forKey: .vulnerabilities
                )
                severity = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.severityPayload.self,
                    forKey: .severity
                )
                cvss = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.cvssPayload.self,
                    forKey: .cvss
                )
                cwes = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.cwesPayload.self,
                    forKey: .cwes
                )
                identifiers = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.identifiersPayload.self,
                    forKey: .identifiers
                )
                references = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.referencesPayload.self,
                    forKey: .references
                )
                published_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .published_at
                )
                updated_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                withdrawn_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .withdrawn_at
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id",
                    "cve_id",
                    "summary",
                    "description",
                    "vulnerabilities",
                    "severity",
                    "cvss",
                    "cwes",
                    "identifiers",
                    "references",
                    "published_at",
                    "updated_at",
                    "withdrawn_at"
                ])
            }
        }
        /// The REST API URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-url`.
        package typealias alert_url = Swift.String
        /// The GitHub URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-html-url`.
        package typealias alert_html_url = Swift.String
        /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-created-at`.
        package typealias alert_created_at = Foundation.Date
        /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-updated-at`.
        package typealias alert_updated_at = Foundation.Date
        /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-dismissed-at`.
        package typealias alert_dismissed_at = Foundation.Date
        /// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-fixed-at`.
        package typealias alert_fixed_at = Foundation.Date
        /// The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-auto-dismissed-at`.
        package typealias alert_auto_dismissed_at = Foundation.Date
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        package struct simple_repository: Codable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            package var id: Swift.Int
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            package var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            package var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            package var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            package var owner: Components.Schemas.simple_user
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            package var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            package var html_url: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            package var description: Swift.String?
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            package var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            package var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            package var archive_url: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            package var assignees_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            package var blobs_url: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            package var branches_url: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            package var collaborators_url: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            package var comments_url: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            package var commits_url: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            package var compare_url: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            package var contents_url: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            package var contributors_url: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            package var deployments_url: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            package var downloads_url: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            package var events_url: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            package var forks_url: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            package var git_commits_url: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            package var git_refs_url: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            package var git_tags_url: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            package var issue_comment_url: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            package var issue_events_url: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            package var issues_url: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            package var keys_url: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            package var labels_url: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            package var languages_url: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            package var merges_url: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            package var milestones_url: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            package var notifications_url: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            package var pulls_url: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            package var releases_url: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            package var stargazers_url: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            package var statuses_url: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            package var subscribers_url: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            package var subscription_url: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            package var tags_url: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            package var teams_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            package var trees_url: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            package var hooks_url: Swift.String
            /// Creates a new `simple_repository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - node_id: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - full_name: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - html_url: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archive_url: A template for the API URL to download the repository as an archive.
            ///   - assignees_url: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobs_url: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branches_url: A template for the API URL to get information about branches in the repository.
            ///   - collaborators_url: A template for the API URL to get information about collaborators of the repository.
            ///   - comments_url: A template for the API URL to get information about comments on the repository.
            ///   - commits_url: A template for the API URL to get information about commits on the repository.
            ///   - compare_url: A template for the API URL to compare two commits or refs.
            ///   - contents_url: A template for the API URL to get the contents of the repository.
            ///   - contributors_url: A template for the API URL to list the contributors to the repository.
            ///   - deployments_url: The API URL to list the deployments of the repository.
            ///   - downloads_url: The API URL to list the downloads on the repository.
            ///   - events_url: The API URL to list the events of the repository.
            ///   - forks_url: The API URL to list the forks of the repository.
            ///   - git_commits_url: A template for the API URL to get information about Git commits of the repository.
            ///   - git_refs_url: A template for the API URL to get information about Git refs of the repository.
            ///   - git_tags_url: A template for the API URL to get information about Git tags of the repository.
            ///   - issue_comment_url: A template for the API URL to get information about issue comments on the repository.
            ///   - issue_events_url: A template for the API URL to get information about issue events on the repository.
            ///   - issues_url: A template for the API URL to get information about issues on the repository.
            ///   - keys_url: A template for the API URL to get information about deploy keys on the repository.
            ///   - labels_url: A template for the API URL to get information about labels of the repository.
            ///   - languages_url: The API URL to get information about the languages of the repository.
            ///   - merges_url: The API URL to merge branches in the repository.
            ///   - milestones_url: A template for the API URL to get information about milestones of the repository.
            ///   - notifications_url: A template for the API URL to get information about notifications on the repository.
            ///   - pulls_url: A template for the API URL to get information about pull requests on the repository.
            ///   - releases_url: A template for the API URL to get information about releases on the repository.
            ///   - stargazers_url: The API URL to list the stargazers on the repository.
            ///   - statuses_url: A template for the API URL to get information about statuses of a commit.
            ///   - subscribers_url: The API URL to list the subscribers on the repository.
            ///   - subscription_url: The API URL to subscribe to notifications for this repository.
            ///   - tags_url: The API URL to get information about tags on the repository.
            ///   - teams_url: The API URL to list the teams on the repository.
            ///   - trees_url: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooks_url: The API URL to list the hooks on the repository.
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                hooks_url: Swift.String
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.hooks_url = hooks_url
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case hooks_url
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        package struct nullable_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            package var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            package var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            package var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            package var state: Components.Schemas.nullable_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            package var creator: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            package var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            package var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            package var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            package var due_on: Foundation.Date?
            /// Creates a new `nullable_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            package init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_simple_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        package struct nullable_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            package var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            package var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            package var owner: Components.Schemas.nullable_simple_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            package var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            package var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                package var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                package var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                package var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                package var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                package var deployments: Swift.String?
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                package init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                package enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                package func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package var permissions: Components.Schemas.nullable_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            package var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            package var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            package var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            package var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            package var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            package var pem: Swift.String?
            /// Creates a new `nullable_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            package init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_simple_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen package enum author_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        package struct reaction_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            package var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            package var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            package var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            package var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            package var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            package var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            package var rocket: Swift.Int
            /// Creates a new `reaction_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            package init(
                url: Swift.String,
                total_count: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        package struct issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            package var node_id: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            package var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            package var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            package var html_url: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            package var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            package var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen package enum state_reasonPayload: String, Codable, Hashable, Sendable {
                case completed = "completed"
                case reopened = "reopened"
                case not_planned = "not_planned"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            package var state_reason: Components.Schemas.issue.state_reasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            package var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            package var user: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue/labelsPayload`.
            @frozen package enum labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                package struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/id`.
                    package var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/node_id`.
                    package var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/name`.
                    package var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/color`.
                    package var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/default`.
                    package var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    package init(
                        id: Swift.Int64? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    package enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                case case2(Components.Schemas.issue.labelsPayloadPayload.Case2Payload)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package typealias labelsPayload = [Components.Schemas.issue.labelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package var labels: Components.Schemas.issue.labelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            package var assignee: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            package var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            package var milestone: Components.Schemas.nullable_milestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            package var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            package var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package struct pull_requestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                package var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                package var diff_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                package var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                package var patch_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                package var url: Swift.String?
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                package init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    patch_url: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package var pull_request: Components.Schemas.issue.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            package var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            package var closed_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            package var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            package var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            package var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the issue
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - state_reason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - comments:
            ///   - pull_request:
            ///   - closed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - draft:
            ///   - closed_by:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - repository:
            ///   - performed_via_github_app:
            ///   - author_association:
            ///   - reactions:
            package init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                state_reason: Components.Schemas.issue.state_reasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.nullable_simple_user? = nil,
                labels: Components.Schemas.issue.labelsPayload,
                assignee: Components.Schemas.nullable_simple_user? = nil,
                assignees: [Components.Schemas.simple_user]? = nil,
                milestone: Components.Schemas.nullable_milestone? = nil,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                comments: Swift.Int,
                pull_request: Components.Schemas.issue.pull_requestPayload? = nil,
                closed_at: Foundation.Date? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                draft: Swift.Bool? = nil,
                closed_by: Components.Schemas.nullable_simple_user? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                repository: Components.Schemas.repository? = nil,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                author_association: Components.Schemas.author_association,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.number = number
                self.state = state
                self.state_reason = state_reason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.comments = comments
                self.pull_request = pull_request
                self.closed_at = closed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.draft = draft
                self.closed_by = closed_by
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.repository = repository
                self.performed_via_github_app = performed_via_github_app
                self.author_association = author_association
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case number
                case state
                case state_reason
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case active_lock_reason
                case comments
                case pull_request
                case closed_at
                case created_at
                case updated_at
                case draft
                case closed_by
                case body_html
                case body_text
                case timeline_url
                case repository
                case performed_via_github_app
                case author_association
                case reactions
            }
        }
        /// Comments provide a way for people to collaborate on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/issue-comment`.
        package struct issue_comment: Codable, Hashable, Sendable {
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-comment/node_id`.
            package var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/url`.
            package var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_text`.
            package var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/user`.
            package var user: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue-comment/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/issue_url`.
            package var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/issue-comment/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/issue-comment/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `issue_comment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            package init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.nullable_simple_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_association,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        package struct security_and_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            package struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen package enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                package var status: Components.Schemas.security_and_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.security_and_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            package var advanced_security: Components.Schemas.security_and_analysis.advanced_securityPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            package struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen package enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                package var status: Components.Schemas.security_and_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.security_and_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            package var secret_scanning: Components.Schemas.security_and_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            package struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen package enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                package var status: Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            package var secret_scanning_push_protection: Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_and_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            package init(
                advanced_security: Components.Schemas.security_and_analysis.advanced_securityPayload? = nil,
                secret_scanning: Components.Schemas.security_and_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            package enum CodingKeys: String, CodingKey {
                case advanced_security
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// A GitHub organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        package struct organization_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            package var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            package var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            package var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            package var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            package var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            package var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            package var description: Swift.String?
            /// Creates a new `organization_simple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            package init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
            }
        }
        /// Organization Full
        ///
        /// - Remark: Generated from `#/components/schemas/organization-full`.
        package struct organization_full: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-full/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/repos_url`.
            package var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/hooks_url`.
            package var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/issues_url`.
            package var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/members_url`.
            package var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/public_members_url`.
            package var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/avatar_url`.
            package var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/company`.
            package var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/blog`.
            package var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/location`.
            package var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/twitter_username`.
            package var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/is_verified`.
            package var is_verified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/has_organization_projects`.
            package var has_organization_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/has_repository_projects`.
            package var has_repository_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/public_repos`.
            package var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/public_gists`.
            package var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/followers`.
            package var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/following`.
            package var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-full/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/total_private_repos`.
            package var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/owned_private_repos`.
            package var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/private_gists`.
            package var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/disk_usage`.
            package var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/collaborators`.
            package var collaborators: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/billing_email`.
            package var billing_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            package struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/space`.
                package var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/private_repos`.
                package var private_repos: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/filled_seats`.
                package var filled_seats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/seats`.
                package var seats: Swift.Int?
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                ///   - filled_seats:
                ///   - seats:
                package init(
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int,
                    filled_seats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                    self.filled_seats = filled_seats
                    self.seats = seats
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case private_repos
                    case filled_seats
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            package var plan: Components.Schemas.organization_full.planPayload?
            /// - Remark: Generated from `#/components/schemas/organization-full/default_repository_permission`.
            package var default_repository_permission: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_repositories`.
            package var members_can_create_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/two_factor_requirement_enabled`.
            package var two_factor_requirement_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_allowed_repository_creation_type`.
            package var members_allowed_repository_creation_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_repositories`.
            package var members_can_create_public_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_repositories`.
            package var members_can_create_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_internal_repositories`.
            package var members_can_create_internal_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_pages`.
            package var members_can_create_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_pages`.
            package var members_can_create_public_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_pages`.
            package var members_can_create_private_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_fork_private_repositories`.
            package var members_can_fork_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/web_commit_signoff_required`.
            package var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/updated_at`.
            package var updated_at: Foundation.Date
            /// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/advanced_security_enabled_for_new_repositories`.
            package var advanced_security_enabled_for_new_repositories: Swift.Bool?
            /// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            /// this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_alerts_enabled_for_new_repositories`.
            package var dependabot_alerts_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            /// to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_security_updates_enabled_for_new_repositories`.
            package var dependabot_security_updates_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependency_graph_enabled_for_new_repositories`.
            package var dependency_graph_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_enabled_for_new_repositories`.
            package var secret_scanning_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning push protection is automatically enabled for new repositories and repositories
            /// transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_enabled_for_new_repositories`.
            package var secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool?
            /// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link_enabled`.
            package var secret_scanning_push_protection_custom_link_enabled: Swift.Bool?
            /// An optional URL string to display to contributors who are blocked from pushing a secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link`.
            package var secret_scanning_push_protection_custom_link: Swift.String?
            /// Creates a new `organization_full`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - twitter_username:
            ///   - is_verified:
            ///   - has_organization_projects:
            ///   - has_repository_projects:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - html_url:
            ///   - created_at:
            ///   - _type:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - private_gists:
            ///   - disk_usage:
            ///   - collaborators:
            ///   - billing_email:
            ///   - plan:
            ///   - default_repository_permission:
            ///   - members_can_create_repositories:
            ///   - two_factor_requirement_enabled:
            ///   - members_allowed_repository_creation_type:
            ///   - members_can_create_public_repositories:
            ///   - members_can_create_private_repositories:
            ///   - members_can_create_internal_repositories:
            ///   - members_can_create_pages:
            ///   - members_can_create_public_pages:
            ///   - members_can_create_private_pages:
            ///   - members_can_fork_private_repositories:
            ///   - web_commit_signoff_required:
            ///   - updated_at:
            ///   - advanced_security_enabled_for_new_repositories: Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///   - dependabot_alerts_enabled_for_new_repositories: Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            ///   - dependabot_security_updates_enabled_for_new_repositories: Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            ///   - dependency_graph_enabled_for_new_repositories: Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_enabled_for_new_repositories: Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_push_protection_enabled_for_new_repositories: Whether secret scanning push protection is automatically enabled for new repositories and repositories
            ///   - secret_scanning_push_protection_custom_link_enabled: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///   - secret_scanning_push_protection_custom_link: An optional URL string to display to contributors who are blocked from pushing a secret.
            package init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                is_verified: Swift.Bool? = nil,
                has_organization_projects: Swift.Bool,
                has_repository_projects: Swift.Bool,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                html_url: Swift.String,
                created_at: Foundation.Date,
                _type: Swift.String,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                private_gists: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil,
                billing_email: Swift.String? = nil,
                plan: Components.Schemas.organization_full.planPayload? = nil,
                default_repository_permission: Swift.String? = nil,
                members_can_create_repositories: Swift.Bool? = nil,
                two_factor_requirement_enabled: Swift.Bool? = nil,
                members_allowed_repository_creation_type: Swift.String? = nil,
                members_can_create_public_repositories: Swift.Bool? = nil,
                members_can_create_private_repositories: Swift.Bool? = nil,
                members_can_create_internal_repositories: Swift.Bool? = nil,
                members_can_create_pages: Swift.Bool? = nil,
                members_can_create_public_pages: Swift.Bool? = nil,
                members_can_create_private_pages: Swift.Bool? = nil,
                members_can_fork_private_repositories: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                updated_at: Foundation.Date,
                advanced_security_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_alerts_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_security_updates_enabled_for_new_repositories: Swift.Bool? = nil,
                dependency_graph_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link_enabled: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.twitter_username = twitter_username
                self.is_verified = is_verified
                self.has_organization_projects = has_organization_projects
                self.has_repository_projects = has_repository_projects
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.html_url = html_url
                self.created_at = created_at
                self._type = _type
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.private_gists = private_gists
                self.disk_usage = disk_usage
                self.collaborators = collaborators
                self.billing_email = billing_email
                self.plan = plan
                self.default_repository_permission = default_repository_permission
                self.members_can_create_repositories = members_can_create_repositories
                self.two_factor_requirement_enabled = two_factor_requirement_enabled
                self.members_allowed_repository_creation_type = members_allowed_repository_creation_type
                self.members_can_create_public_repositories = members_can_create_public_repositories
                self.members_can_create_private_repositories = members_can_create_private_repositories
                self.members_can_create_internal_repositories = members_can_create_internal_repositories
                self.members_can_create_pages = members_can_create_pages
                self.members_can_create_public_pages = members_can_create_public_pages
                self.members_can_create_private_pages = members_can_create_private_pages
                self.members_can_fork_private_repositories = members_can_fork_private_repositories
                self.web_commit_signoff_required = web_commit_signoff_required
                self.updated_at = updated_at
                self.advanced_security_enabled_for_new_repositories = advanced_security_enabled_for_new_repositories
                self.dependabot_alerts_enabled_for_new_repositories = dependabot_alerts_enabled_for_new_repositories
                self.dependabot_security_updates_enabled_for_new_repositories = dependabot_security_updates_enabled_for_new_repositories
                self.dependency_graph_enabled_for_new_repositories = dependency_graph_enabled_for_new_repositories
                self.secret_scanning_enabled_for_new_repositories = secret_scanning_enabled_for_new_repositories
                self.secret_scanning_push_protection_enabled_for_new_repositories = secret_scanning_push_protection_enabled_for_new_repositories
                self.secret_scanning_push_protection_custom_link_enabled = secret_scanning_push_protection_custom_link_enabled
                self.secret_scanning_push_protection_custom_link = secret_scanning_push_protection_custom_link
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
                case name
                case company
                case blog
                case location
                case email
                case twitter_username
                case is_verified
                case has_organization_projects
                case has_repository_projects
                case public_repos
                case public_gists
                case followers
                case following
                case html_url
                case created_at
                case _type = "type"
                case total_private_repos
                case owned_private_repos
                case private_gists
                case disk_usage
                case collaborators
                case billing_email
                case plan
                case default_repository_permission
                case members_can_create_repositories
                case two_factor_requirement_enabled
                case members_allowed_repository_creation_type
                case members_can_create_public_repositories
                case members_can_create_private_repositories
                case members_can_create_internal_repositories
                case members_can_create_pages
                case members_can_create_public_pages
                case members_can_create_private_pages
                case members_can_fork_private_repositories
                case web_commit_signoff_required
                case updated_at
                case advanced_security_enabled_for_new_repositories
                case dependabot_alerts_enabled_for_new_repositories
                case dependabot_security_updates_enabled_for_new_repositories
                case dependency_graph_enabled_for_new_repositories
                case secret_scanning_enabled_for_new_repositories
                case secret_scanning_push_protection_enabled_for_new_repositories
                case secret_scanning_push_protection_custom_link_enabled
                case secret_scanning_push_protection_custom_link
            }
        }
        /// A label for a self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner-label`.
        package struct runner_label: Codable, Hashable, Sendable {
            /// Unique identifier of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/id`.
            package var id: Swift.Int?
            /// Name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/name`.
            package var name: Swift.String
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable {
                case read_only = "read-only"
                case custom = "custom"
            }
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            package var _type: Components.Schemas.runner_label._typePayload?
            /// Creates a new `runner_label`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the label.
            ///   - name: Name of the label.
            ///   - _type: The type of label. Read-only labels are applied automatically when the runner is configured.
            package init(
                id: Swift.Int? = nil,
                name: Swift.String,
                _type: Components.Schemas.runner_label._typePayload? = nil
            ) {
                self.id = id
                self.name = name
                self._type = _type
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case name
                case _type = "type"
            }
        }
        /// A self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner`.
        package struct runner: Codable, Hashable, Sendable {
            /// The id of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/id`.
            package var id: Swift.Int
            /// The id of the runner group.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/runner_group_id`.
            package var runner_group_id: Swift.Int?
            /// The name of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/name`.
            package var name: Swift.String
            /// The Operating System of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/os`.
            package var os: Swift.String
            /// The status of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/status`.
            package var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner/busy`.
            package var busy: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/runner/labels`.
            package var labels: [Components.Schemas.runner_label]
            /// Creates a new `runner`.
            ///
            /// - Parameters:
            ///   - id: The id of the runner.
            ///   - runner_group_id: The id of the runner group.
            ///   - name: The name of the runner.
            ///   - os: The Operating System of the runner.
            ///   - status: The status of the runner.
            ///   - busy:
            ///   - labels:
            package init(
                id: Swift.Int,
                runner_group_id: Swift.Int? = nil,
                name: Swift.String,
                os: Swift.String,
                status: Swift.String,
                busy: Swift.Bool,
                labels: [Components.Schemas.runner_label]
            ) {
                self.id = id
                self.runner_group_id = runner_group_id
                self.name = name
                self.os = os
                self.status = status
                self.busy = busy
                self.labels = labels
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case runner_group_id
                case name
                case os
                case status
                case busy
                case labels
            }
        }
        /// The name of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-name`.
        package typealias code_scanning_analysis_tool_name = Swift.String
        /// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-guid`.
        package typealias code_scanning_analysis_tool_guid = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state-query`.
        @frozen package enum code_scanning_alert_state_query: String, Codable, Hashable, Sendable {
            case open = "open"
            case closed = "closed"
            case dismissed = "dismissed"
            case fixed = "fixed"
        }
        /// Severity of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-severity`.
        @frozen package enum code_scanning_alert_severity: String, Codable, Hashable, Sendable {
            case critical = "critical"
            case high = "high"
            case medium = "medium"
            case low = "low"
            case warning = "warning"
            case note = "note"
            case error = "error"
        }
        /// The REST API URL for fetching the list of instances for an alert.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-instances-url`.
        package typealias alert_instances_url = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state`.
        @frozen package enum code_scanning_alert_state: String, Codable, Hashable, Sendable {
            case open = "open"
            case dismissed = "dismissed"
            case fixed = "fixed"
        }
        /// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-reason`.
        @frozen package enum code_scanning_alert_dismissed_reason: String, Codable, Hashable, Sendable {
            case false_space_positive = "false positive"
            case won_apos_t_space_fix = "won't fix"
            case used_space_in_space_tests = "used in tests"
        }
        /// The dismissal comment associated with the dismissal of the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-comment`.
        package typealias code_scanning_alert_dismissed_comment = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule`.
        package struct code_scanning_alert_rule: Codable, Hashable, Sendable {
            /// A unique identifier for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/id`.
            package var id: Swift.String?
            /// The name of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/name`.
            package var name: Swift.String?
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            @frozen package enum severityPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case note = "note"
                case warning = "warning"
                case error = "error"
            }
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            package var severity: Components.Schemas.code_scanning_alert_rule.severityPayload?
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            @frozen package enum security_severity_levelPayload: String, Codable, Hashable, Sendable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            package var security_severity_level: Components.Schemas.code_scanning_alert_rule.security_severity_levelPayload?
            /// A short description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/description`.
            package var description: Swift.String?
            /// description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/full_description`.
            package var full_description: Swift.String?
            /// A set of tags applicable for the rule.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/tags`.
            package var tags: [Swift.String]?
            /// Detailed documentation for the rule as GitHub Flavored Markdown.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help`.
            package var help: Swift.String?
            /// A link to the documentation for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help_uri`.
            package var help_uri: Swift.String?
            /// Creates a new `code_scanning_alert_rule`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the rule used to detect the alert.
            ///   - name: The name of the rule used to detect the alert.
            ///   - severity: The severity of the alert.
            ///   - security_severity_level: The security severity of the alert.
            ///   - description: A short description of the rule used to detect the alert.
            ///   - full_description: description of the rule used to detect the alert.
            ///   - tags: A set of tags applicable for the rule.
            ///   - help: Detailed documentation for the rule as GitHub Flavored Markdown.
            ///   - help_uri: A link to the documentation for the rule used to detect the alert.
            package init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                severity: Components.Schemas.code_scanning_alert_rule.severityPayload? = nil,
                security_severity_level: Components.Schemas.code_scanning_alert_rule.security_severity_levelPayload? = nil,
                description: Swift.String? = nil,
                full_description: Swift.String? = nil,
                tags: [Swift.String]? = nil,
                help: Swift.String? = nil,
                help_uri: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.severity = severity
                self.security_severity_level = security_severity_level
                self.description = description
                self.full_description = full_description
                self.tags = tags
                self.help = help
                self.help_uri = help_uri
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case name
                case severity
                case security_severity_level
                case description
                case full_description
                case tags
                case help
                case help_uri
            }
        }
        /// The version of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-version`.
        package typealias code_scanning_analysis_tool_version = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool`.
        package struct code_scanning_analysis_tool: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/name`.
            package var name: Components.Schemas.code_scanning_analysis_tool_name?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/version`.
            package var version: Components.Schemas.code_scanning_analysis_tool_version?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/guid`.
            package var guid: Components.Schemas.code_scanning_analysis_tool_guid?
            /// Creates a new `code_scanning_analysis_tool`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - version:
            ///   - guid:
            package init(
                name: Components.Schemas.code_scanning_analysis_tool_name? = nil,
                version: Components.Schemas.code_scanning_analysis_tool_version? = nil,
                guid: Components.Schemas.code_scanning_analysis_tool_guid? = nil
            ) {
                self.name = name
                self.version = version
                self.guid = guid
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case version
                case guid
            }
        }
        /// The full Git reference, formatted as `refs/heads/<branch name>`,
        /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-ref`.
        package typealias code_scanning_ref = Swift.String
        /// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-analysis-key`.
        package typealias code_scanning_analysis_analysis_key = Swift.String
        /// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-environment`.
        package typealias code_scanning_alert_environment = Swift.String
        /// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-category`.
        package typealias code_scanning_analysis_category = Swift.String
        /// Describe a region within a file for the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location`.
        package struct code_scanning_alert_location: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/path`.
            package var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_line`.
            package var start_line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_line`.
            package var end_line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_column`.
            package var start_column: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_column`.
            package var end_column: Swift.Int?
            /// Creates a new `code_scanning_alert_location`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - start_line:
            ///   - end_line:
            ///   - start_column:
            ///   - end_column:
            package init(
                path: Swift.String? = nil,
                start_line: Swift.Int? = nil,
                end_line: Swift.Int? = nil,
                start_column: Swift.Int? = nil,
                end_column: Swift.Int? = nil
            ) {
                self.path = path
                self.start_line = start_line
                self.end_line = end_line
                self.start_column = start_column
                self.end_column = end_column
            }
            package enum CodingKeys: String, CodingKey {
                case path
                case start_line
                case end_line
                case start_column
                case end_column
            }
        }
        /// A classification of the file. For example to identify it as generated.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-classification`.
        @frozen package enum code_scanning_alert_classification: String, Codable, Hashable, Sendable {
            case source = "source"
            case generated = "generated"
            case test = "test"
            case library = "library"
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance`.
        package struct code_scanning_alert_instance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/ref`.
            package var ref: Components.Schemas.code_scanning_ref?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/analysis_key`.
            package var analysis_key: Components.Schemas.code_scanning_analysis_analysis_key?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/environment`.
            package var environment: Components.Schemas.code_scanning_alert_environment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/category`.
            package var category: Components.Schemas.code_scanning_analysis_category?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/state`.
            package var state: Components.Schemas.code_scanning_alert_state?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/commit_sha`.
            package var commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            package struct messagePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message/text`.
                package var text: Swift.String?
                /// Creates a new `messagePayload`.
                ///
                /// - Parameters:
                ///   - text:
                package init(text: Swift.String? = nil) {
                    self.text = text
                }
                package enum CodingKeys: String, CodingKey {
                    case text
                }
            }
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            package var message: Components.Schemas.code_scanning_alert_instance.messagePayload?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/location`.
            package var location: Components.Schemas.code_scanning_alert_location?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/html_url`.
            package var html_url: Swift.String?
            /// Classifications that have been applied to the file that triggered the alert.
            /// For example identifying it as documentation, or a generated file.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/classifications`.
            package var classifications: [Components.Schemas.code_scanning_alert_classification]?
            /// Creates a new `code_scanning_alert_instance`.
            ///
            /// - Parameters:
            ///   - ref:
            ///   - analysis_key:
            ///   - environment:
            ///   - category:
            ///   - state:
            ///   - commit_sha:
            ///   - message:
            ///   - location:
            ///   - html_url:
            ///   - classifications: Classifications that have been applied to the file that triggered the alert.
            package init(
                ref: Components.Schemas.code_scanning_ref? = nil,
                analysis_key: Components.Schemas.code_scanning_analysis_analysis_key? = nil,
                environment: Components.Schemas.code_scanning_alert_environment? = nil,
                category: Components.Schemas.code_scanning_analysis_category? = nil,
                state: Components.Schemas.code_scanning_alert_state? = nil,
                commit_sha: Swift.String? = nil,
                message: Components.Schemas.code_scanning_alert_instance.messagePayload? = nil,
                location: Components.Schemas.code_scanning_alert_location? = nil,
                html_url: Swift.String? = nil,
                classifications: [Components.Schemas.code_scanning_alert_classification]? = nil
            ) {
                self.ref = ref
                self.analysis_key = analysis_key
                self.environment = environment
                self.category = category
                self.state = state
                self.commit_sha = commit_sha
                self.message = message
                self.location = location
                self.html_url = html_url
                self.classifications = classifications
            }
            package enum CodingKeys: String, CodingKey {
                case ref
                case analysis_key
                case environment
                case category
                case state
                case commit_sha
                case message
                case location
                case html_url
                case classifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items`.
        package struct code_scanning_organization_alert_items: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/number`.
            package var number: Components.Schemas.alert_number
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/created_at`.
            package var created_at: Components.Schemas.alert_created_at
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/updated_at`.
            package var updated_at: Components.Schemas.alert_updated_at?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/url`.
            package var url: Components.Schemas.alert_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/html_url`.
            package var html_url: Components.Schemas.alert_html_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/instances_url`.
            package var instances_url: Components.Schemas.alert_instances_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/state`.
            package var state: Components.Schemas.code_scanning_alert_state
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/fixed_at`.
            package var fixed_at: Components.Schemas.alert_fixed_at?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_by`.
            package var dismissed_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_at`.
            package var dismissed_at: Components.Schemas.alert_dismissed_at?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_reason`.
            package var dismissed_reason: Components.Schemas.code_scanning_alert_dismissed_reason?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_comment`.
            package var dismissed_comment: Components.Schemas.code_scanning_alert_dismissed_comment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/rule`.
            package var rule: Components.Schemas.code_scanning_alert_rule
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/tool`.
            package var tool: Components.Schemas.code_scanning_analysis_tool
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/most_recent_instance`.
            package var most_recent_instance: Components.Schemas.code_scanning_alert_instance
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/repository`.
            package var repository: Components.Schemas.simple_repository
            /// Creates a new `code_scanning_organization_alert_items`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - created_at:
            ///   - updated_at:
            ///   - url:
            ///   - html_url:
            ///   - instances_url:
            ///   - state:
            ///   - fixed_at:
            ///   - dismissed_by:
            ///   - dismissed_at:
            ///   - dismissed_reason:
            ///   - dismissed_comment:
            ///   - rule:
            ///   - tool:
            ///   - most_recent_instance:
            ///   - repository:
            package init(
                number: Components.Schemas.alert_number,
                created_at: Components.Schemas.alert_created_at,
                updated_at: Components.Schemas.alert_updated_at? = nil,
                url: Components.Schemas.alert_url,
                html_url: Components.Schemas.alert_html_url,
                instances_url: Components.Schemas.alert_instances_url,
                state: Components.Schemas.code_scanning_alert_state,
                fixed_at: Components.Schemas.alert_fixed_at? = nil,
                dismissed_by: Components.Schemas.nullable_simple_user? = nil,
                dismissed_at: Components.Schemas.alert_dismissed_at? = nil,
                dismissed_reason: Components.Schemas.code_scanning_alert_dismissed_reason? = nil,
                dismissed_comment: Components.Schemas.code_scanning_alert_dismissed_comment? = nil,
                rule: Components.Schemas.code_scanning_alert_rule,
                tool: Components.Schemas.code_scanning_analysis_tool,
                most_recent_instance: Components.Schemas.code_scanning_alert_instance,
                repository: Components.Schemas.simple_repository
            ) {
                self.number = number
                self.created_at = created_at
                self.updated_at = updated_at
                self.url = url
                self.html_url = html_url
                self.instances_url = instances_url
                self.state = state
                self.fixed_at = fixed_at
                self.dismissed_by = dismissed_by
                self.dismissed_at = dismissed_at
                self.dismissed_reason = dismissed_reason
                self.dismissed_comment = dismissed_comment
                self.rule = rule
                self.tool = tool
                self.most_recent_instance = most_recent_instance
                self.repository = repository
            }
            package enum CodingKeys: String, CodingKey {
                case number
                case created_at
                case updated_at
                case url
                case html_url
                case instances_url
                case state
                case fixed_at
                case dismissed_by
                case dismissed_at
                case dismissed_reason
                case dismissed_comment
                case rule
                case tool
                case most_recent_instance
                case repository
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        package struct nullable_team_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            package var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            package var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            package var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            package var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            package var ldap_dn: Swift.String?
            /// Creates a new `nullable_team_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        package struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            package var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            package var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            package var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            package var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                package var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                package var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                package var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                package init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                package enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            package var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            package var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            package var parent: Components.Schemas.nullable_team_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_team_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// Projects are a way to organize columns and cards of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project`.
        package struct project: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project/owner_url`.
            package var owner_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/columns_url`.
            package var columns_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project/node_id`.
            package var node_id: Swift.String
            /// Name of the project
            ///
            /// - Remark: Generated from `#/components/schemas/project/name`.
            package var name: Swift.String
            /// Body of the project
            ///
            /// - Remark: Generated from `#/components/schemas/project/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project/number`.
            package var number: Swift.Int
            /// State of the project; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/project/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/creator`.
            package var creator: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/project/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project/updated_at`.
            package var updated_at: Foundation.Date
            /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/organization_permission`.
            @frozen package enum organization_permissionPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
                case none = "none"
            }
            /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/organization_permission`.
            package var organization_permission: Components.Schemas.project.organization_permissionPayload?
            /// Whether or not this project can be seen by everyone. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/private`.
            package var _private: Swift.Bool?
            /// Creates a new `project`.
            ///
            /// - Parameters:
            ///   - owner_url:
            ///   - url:
            ///   - html_url:
            ///   - columns_url:
            ///   - id:
            ///   - node_id:
            ///   - name: Name of the project
            ///   - body: Body of the project
            ///   - number:
            ///   - state: State of the project; either 'open' or 'closed'
            ///   - creator:
            ///   - created_at:
            ///   - updated_at:
            ///   - organization_permission: The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///   - _private: Whether or not this project can be seen by everyone. Only present if owner is an organization.
            package init(
                owner_url: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                columns_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                body: Swift.String? = nil,
                number: Swift.Int,
                state: Swift.String,
                creator: Components.Schemas.nullable_simple_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                organization_permission: Components.Schemas.project.organization_permissionPayload? = nil,
                _private: Swift.Bool? = nil
            ) {
                self.owner_url = owner_url
                self.url = url
                self.html_url = html_url
                self.columns_url = columns_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.body = body
                self.number = number
                self.state = state
                self.creator = creator
                self.created_at = created_at
                self.updated_at = updated_at
                self.organization_permission = organization_permission
                self._private = _private
            }
            package enum CodingKeys: String, CodingKey {
                case owner_url
                case url
                case html_url
                case columns_url
                case id
                case node_id
                case name
                case body
                case number
                case state
                case creator
                case created_at
                case updated_at
                case organization_permission
                case _private = "private"
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        package struct team_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            package var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            package var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            package var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            package var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            package var ldap_dn: Swift.String?
            /// Creates a new `team_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        package struct nullable_repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            package var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            package var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            package var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/organization`.
            package var organization: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                package init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            package var permissions: Components.Schemas.nullable_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            package var owner: Components.Schemas.simple_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            package var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            package var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            package var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            package var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            package var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            package var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            package var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            package var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            package var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            package var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            package var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            package var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            package var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            package var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            package var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            package var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            package var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            package var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            package var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            package var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            package var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            package var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            package var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            package var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            package var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            package var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            package var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            package var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            package var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            package var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            package var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            package var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            package var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            package var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            package var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            package var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            package var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            package var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            package var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            package var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            package var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            package var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            package var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            package var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            package var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            package var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            package var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            package var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            package var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            package var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            package var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            package var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            package var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            package var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            package var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            package var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            package var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            package struct template_repositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/id`.
                package var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/node_id`.
                package var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/full_name`.
                package var full_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                package struct ownerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/login`.
                    package var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/id`.
                    package var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/node_id`.
                    package var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/avatar_url`.
                    package var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gravatar_id`.
                    package var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/html_url`.
                    package var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/followers_url`.
                    package var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/following_url`.
                    package var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gists_url`.
                    package var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/starred_url`.
                    package var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/subscriptions_url`.
                    package var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/organizations_url`.
                    package var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/repos_url`.
                    package var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/events_url`.
                    package var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/received_events_url`.
                    package var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/type`.
                    package var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/site_admin`.
                    package var site_admin: Swift.Bool?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - avatar_url:
                    ///   - gravatar_id:
                    ///   - url:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    package init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.avatar_url = avatar_url
                        self.gravatar_id = gravatar_id
                        self.url = url
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                    }
                    package enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case avatar_url
                        case gravatar_id
                        case url
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case repos_url
                        case events_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                package var owner: Components.Schemas.nullable_repository.template_repositoryPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/private`.
                package var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/html_url`.
                package var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/fork`.
                package var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/url`.
                package var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archive_url`.
                package var archive_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/assignees_url`.
                package var assignees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/blobs_url`.
                package var blobs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/branches_url`.
                package var branches_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/collaborators_url`.
                package var collaborators_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/comments_url`.
                package var comments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/commits_url`.
                package var commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/compare_url`.
                package var compare_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contents_url`.
                package var contents_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contributors_url`.
                package var contributors_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/deployments_url`.
                package var deployments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/downloads_url`.
                package var downloads_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/events_url`.
                package var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_url`.
                package var forks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_commits_url`.
                package var git_commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_refs_url`.
                package var git_refs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_tags_url`.
                package var git_tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_url`.
                package var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_comment_url`.
                package var issue_comment_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_events_url`.
                package var issue_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issues_url`.
                package var issues_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/keys_url`.
                package var keys_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/labels_url`.
                package var labels_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/languages_url`.
                package var languages_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merges_url`.
                package var merges_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/milestones_url`.
                package var milestones_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/notifications_url`.
                package var notifications_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pulls_url`.
                package var pulls_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/releases_url`.
                package var releases_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/ssh_url`.
                package var ssh_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_url`.
                package var stargazers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/statuses_url`.
                package var statuses_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_url`.
                package var subscribers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscription_url`.
                package var subscription_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/tags_url`.
                package var tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/teams_url`.
                package var teams_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/trees_url`.
                package var trees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/clone_url`.
                package var clone_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/mirror_url`.
                package var mirror_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/hooks_url`.
                package var hooks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/svn_url`.
                package var svn_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/homepage`.
                package var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/language`.
                package var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_count`.
                package var forks_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_count`.
                package var stargazers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/watchers_count`.
                package var watchers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/size`.
                package var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/default_branch`.
                package var default_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/open_issues_count`.
                package var open_issues_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/is_template`.
                package var is_template: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/topics`.
                package var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_issues`.
                package var has_issues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_projects`.
                package var has_projects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_wiki`.
                package var has_wiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_pages`.
                package var has_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_downloads`.
                package var has_downloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archived`.
                package var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/disabled`.
                package var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/visibility`.
                package var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pushed_at`.
                package var pushed_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/created_at`.
                package var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/updated_at`.
                package var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                package struct permissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/admin`.
                    package var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/maintain`.
                    package var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/push`.
                    package var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/triage`.
                    package var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/pull`.
                    package var pull: Swift.Bool?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    package init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    package enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                package var permissions: Components.Schemas.nullable_repository.template_repositoryPayload.permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_rebase_merge`.
                package var allow_rebase_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/temp_clone_token`.
                package var temp_clone_token: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_squash_merge`.
                package var allow_squash_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_auto_merge`.
                package var allow_auto_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/delete_branch_on_merge`.
                package var delete_branch_on_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_update_branch`.
                package var allow_update_branch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/use_squash_pr_title_as_default`.
                package var use_squash_pr_title_as_default: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                @frozen package enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                package var squash_merge_commit_title: Components.Schemas.nullable_repository.template_repositoryPayload.squash_merge_commit_titlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                @frozen package enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                    case BLANK = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                package var squash_merge_commit_message: Components.Schemas.nullable_repository.template_repositoryPayload.squash_merge_commit_messagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                @frozen package enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case MERGE_MESSAGE = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                package var merge_commit_title: Components.Schemas.nullable_repository.template_repositoryPayload.merge_commit_titlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                @frozen package enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case PR_TITLE = "PR_TITLE"
                    case BLANK = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                package var merge_commit_message: Components.Schemas.nullable_repository.template_repositoryPayload.merge_commit_messagePayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_merge_commit`.
                package var allow_merge_commit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_count`.
                package var subscribers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/network_count`.
                package var network_count: Swift.Int?
                /// Creates a new `template_repositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - name:
                ///   - full_name:
                ///   - owner:
                ///   - _private:
                ///   - html_url:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archive_url:
                ///   - assignees_url:
                ///   - blobs_url:
                ///   - branches_url:
                ///   - collaborators_url:
                ///   - comments_url:
                ///   - commits_url:
                ///   - compare_url:
                ///   - contents_url:
                ///   - contributors_url:
                ///   - deployments_url:
                ///   - downloads_url:
                ///   - events_url:
                ///   - forks_url:
                ///   - git_commits_url:
                ///   - git_refs_url:
                ///   - git_tags_url:
                ///   - git_url:
                ///   - issue_comment_url:
                ///   - issue_events_url:
                ///   - issues_url:
                ///   - keys_url:
                ///   - labels_url:
                ///   - languages_url:
                ///   - merges_url:
                ///   - milestones_url:
                ///   - notifications_url:
                ///   - pulls_url:
                ///   - releases_url:
                ///   - ssh_url:
                ///   - stargazers_url:
                ///   - statuses_url:
                ///   - subscribers_url:
                ///   - subscription_url:
                ///   - tags_url:
                ///   - teams_url:
                ///   - trees_url:
                ///   - clone_url:
                ///   - mirror_url:
                ///   - hooks_url:
                ///   - svn_url:
                ///   - homepage:
                ///   - language:
                ///   - forks_count:
                ///   - stargazers_count:
                ///   - watchers_count:
                ///   - size:
                ///   - default_branch:
                ///   - open_issues_count:
                ///   - is_template:
                ///   - topics:
                ///   - has_issues:
                ///   - has_projects:
                ///   - has_wiki:
                ///   - has_pages:
                ///   - has_downloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushed_at:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - allow_rebase_merge:
                ///   - temp_clone_token:
                ///   - allow_squash_merge:
                ///   - allow_auto_merge:
                ///   - delete_branch_on_merge:
                ///   - allow_update_branch:
                ///   - use_squash_pr_title_as_default:
                ///   - squash_merge_commit_title: The default value for a squash merge commit title:
                ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                ///   - merge_commit_title: The default value for a merge commit title.
                ///   - merge_commit_message: The default value for a merge commit message.
                ///   - allow_merge_commit:
                ///   - subscribers_count:
                ///   - network_count:
                package init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    full_name: Swift.String? = nil,
                    owner: Components.Schemas.nullable_repository.template_repositoryPayload.ownerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    html_url: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archive_url: Swift.String? = nil,
                    assignees_url: Swift.String? = nil,
                    blobs_url: Swift.String? = nil,
                    branches_url: Swift.String? = nil,
                    collaborators_url: Swift.String? = nil,
                    comments_url: Swift.String? = nil,
                    commits_url: Swift.String? = nil,
                    compare_url: Swift.String? = nil,
                    contents_url: Swift.String? = nil,
                    contributors_url: Swift.String? = nil,
                    deployments_url: Swift.String? = nil,
                    downloads_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    forks_url: Swift.String? = nil,
                    git_commits_url: Swift.String? = nil,
                    git_refs_url: Swift.String? = nil,
                    git_tags_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    issue_comment_url: Swift.String? = nil,
                    issue_events_url: Swift.String? = nil,
                    issues_url: Swift.String? = nil,
                    keys_url: Swift.String? = nil,
                    labels_url: Swift.String? = nil,
                    languages_url: Swift.String? = nil,
                    merges_url: Swift.String? = nil,
                    milestones_url: Swift.String? = nil,
                    notifications_url: Swift.String? = nil,
                    pulls_url: Swift.String? = nil,
                    releases_url: Swift.String? = nil,
                    ssh_url: Swift.String? = nil,
                    stargazers_url: Swift.String? = nil,
                    statuses_url: Swift.String? = nil,
                    subscribers_url: Swift.String? = nil,
                    subscription_url: Swift.String? = nil,
                    tags_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil,
                    trees_url: Swift.String? = nil,
                    clone_url: Swift.String? = nil,
                    mirror_url: Swift.String? = nil,
                    hooks_url: Swift.String? = nil,
                    svn_url: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forks_count: Swift.Int? = nil,
                    stargazers_count: Swift.Int? = nil,
                    watchers_count: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    default_branch: Swift.String? = nil,
                    open_issues_count: Swift.Int? = nil,
                    is_template: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    has_issues: Swift.Bool? = nil,
                    has_projects: Swift.Bool? = nil,
                    has_wiki: Swift.Bool? = nil,
                    has_pages: Swift.Bool? = nil,
                    has_downloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushed_at: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.nullable_repository.template_repositoryPayload.permissionsPayload? = nil,
                    allow_rebase_merge: Swift.Bool? = nil,
                    temp_clone_token: Swift.String? = nil,
                    allow_squash_merge: Swift.Bool? = nil,
                    allow_auto_merge: Swift.Bool? = nil,
                    delete_branch_on_merge: Swift.Bool? = nil,
                    allow_update_branch: Swift.Bool? = nil,
                    use_squash_pr_title_as_default: Swift.Bool? = nil,
                    squash_merge_commit_title: Components.Schemas.nullable_repository.template_repositoryPayload.squash_merge_commit_titlePayload? = nil,
                    squash_merge_commit_message: Components.Schemas.nullable_repository.template_repositoryPayload.squash_merge_commit_messagePayload? = nil,
                    merge_commit_title: Components.Schemas.nullable_repository.template_repositoryPayload.merge_commit_titlePayload? = nil,
                    merge_commit_message: Components.Schemas.nullable_repository.template_repositoryPayload.merge_commit_messagePayload? = nil,
                    allow_merge_commit: Swift.Bool? = nil,
                    subscribers_count: Swift.Int? = nil,
                    network_count: Swift.Int? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.full_name = full_name
                    self.owner = owner
                    self._private = _private
                    self.html_url = html_url
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archive_url = archive_url
                    self.assignees_url = assignees_url
                    self.blobs_url = blobs_url
                    self.branches_url = branches_url
                    self.collaborators_url = collaborators_url
                    self.comments_url = comments_url
                    self.commits_url = commits_url
                    self.compare_url = compare_url
                    self.contents_url = contents_url
                    self.contributors_url = contributors_url
                    self.deployments_url = deployments_url
                    self.downloads_url = downloads_url
                    self.events_url = events_url
                    self.forks_url = forks_url
                    self.git_commits_url = git_commits_url
                    self.git_refs_url = git_refs_url
                    self.git_tags_url = git_tags_url
                    self.git_url = git_url
                    self.issue_comment_url = issue_comment_url
                    self.issue_events_url = issue_events_url
                    self.issues_url = issues_url
                    self.keys_url = keys_url
                    self.labels_url = labels_url
                    self.languages_url = languages_url
                    self.merges_url = merges_url
                    self.milestones_url = milestones_url
                    self.notifications_url = notifications_url
                    self.pulls_url = pulls_url
                    self.releases_url = releases_url
                    self.ssh_url = ssh_url
                    self.stargazers_url = stargazers_url
                    self.statuses_url = statuses_url
                    self.subscribers_url = subscribers_url
                    self.subscription_url = subscription_url
                    self.tags_url = tags_url
                    self.teams_url = teams_url
                    self.trees_url = trees_url
                    self.clone_url = clone_url
                    self.mirror_url = mirror_url
                    self.hooks_url = hooks_url
                    self.svn_url = svn_url
                    self.homepage = homepage
                    self.language = language
                    self.forks_count = forks_count
                    self.stargazers_count = stargazers_count
                    self.watchers_count = watchers_count
                    self.size = size
                    self.default_branch = default_branch
                    self.open_issues_count = open_issues_count
                    self.is_template = is_template
                    self.topics = topics
                    self.has_issues = has_issues
                    self.has_projects = has_projects
                    self.has_wiki = has_wiki
                    self.has_pages = has_pages
                    self.has_downloads = has_downloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushed_at = pushed_at
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.allow_rebase_merge = allow_rebase_merge
                    self.temp_clone_token = temp_clone_token
                    self.allow_squash_merge = allow_squash_merge
                    self.allow_auto_merge = allow_auto_merge
                    self.delete_branch_on_merge = delete_branch_on_merge
                    self.allow_update_branch = allow_update_branch
                    self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                    self.squash_merge_commit_title = squash_merge_commit_title
                    self.squash_merge_commit_message = squash_merge_commit_message
                    self.merge_commit_title = merge_commit_title
                    self.merge_commit_message = merge_commit_message
                    self.allow_merge_commit = allow_merge_commit
                    self.subscribers_count = subscribers_count
                    self.network_count = network_count
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case full_name
                    case owner
                    case _private = "private"
                    case html_url
                    case description
                    case fork
                    case url
                    case archive_url
                    case assignees_url
                    case blobs_url
                    case branches_url
                    case collaborators_url
                    case comments_url
                    case commits_url
                    case compare_url
                    case contents_url
                    case contributors_url
                    case deployments_url
                    case downloads_url
                    case events_url
                    case forks_url
                    case git_commits_url
                    case git_refs_url
                    case git_tags_url
                    case git_url
                    case issue_comment_url
                    case issue_events_url
                    case issues_url
                    case keys_url
                    case labels_url
                    case languages_url
                    case merges_url
                    case milestones_url
                    case notifications_url
                    case pulls_url
                    case releases_url
                    case ssh_url
                    case stargazers_url
                    case statuses_url
                    case subscribers_url
                    case subscription_url
                    case tags_url
                    case teams_url
                    case trees_url
                    case clone_url
                    case mirror_url
                    case hooks_url
                    case svn_url
                    case homepage
                    case language
                    case forks_count
                    case stargazers_count
                    case watchers_count
                    case size
                    case default_branch
                    case open_issues_count
                    case is_template
                    case topics
                    case has_issues
                    case has_projects
                    case has_wiki
                    case has_pages
                    case has_downloads
                    case archived
                    case disabled
                    case visibility
                    case pushed_at
                    case created_at
                    case updated_at
                    case permissions
                    case allow_rebase_merge
                    case temp_clone_token
                    case allow_squash_merge
                    case allow_auto_merge
                    case delete_branch_on_merge
                    case allow_update_branch
                    case use_squash_pr_title_as_default
                    case squash_merge_commit_title
                    case squash_merge_commit_message
                    case merge_commit_title
                    case merge_commit_message
                    case allow_merge_commit
                    case subscribers_count
                    case network_count
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            package var template_repository: Components.Schemas.nullable_repository.template_repositoryPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            package var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            package var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            package var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            package var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            package var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            package var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen package enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            package var squash_merge_commit_title: Components.Schemas.nullable_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen package enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            package var squash_merge_commit_message: Components.Schemas.nullable_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen package enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            package var merge_commit_title: Components.Schemas.nullable_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen package enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            package var merge_commit_message: Components.Schemas.nullable_repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            package var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            package var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            package var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_count`.
            package var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/network_count`.
            package var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            package var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            package var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            package var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            package var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            package var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `nullable_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.nullable_simple_user? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.nullable_repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_repository.template_repositoryPayload? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.nullable_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.nullable_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.nullable_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.nullable_repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Project cards represent a scope of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project-card`.
        package struct project_card: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-card/url`.
            package var url: Swift.String
            /// The project card's ID
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project-card/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/note`.
            package var note: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/creator`.
            package var creator: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/project-card/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project-card/updated_at`.
            package var updated_at: Foundation.Date
            /// Whether or not the card is archived
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/archived`.
            package var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/project-card/column_name`.
            package var column_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_id`.
            package var project_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/column_url`.
            package var column_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/content_url`.
            package var content_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_url`.
            package var project_url: Swift.String
            /// Creates a new `project_card`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: The project card's ID
            ///   - node_id:
            ///   - note:
            ///   - creator:
            ///   - created_at:
            ///   - updated_at:
            ///   - archived: Whether or not the card is archived
            ///   - column_name:
            ///   - project_id:
            ///   - column_url:
            ///   - content_url:
            ///   - project_url:
            package init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                note: Swift.String? = nil,
                creator: Components.Schemas.nullable_simple_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                archived: Swift.Bool? = nil,
                column_name: Swift.String? = nil,
                project_id: Swift.String? = nil,
                column_url: Swift.String,
                content_url: Swift.String? = nil,
                project_url: Swift.String
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.note = note
                self.creator = creator
                self.created_at = created_at
                self.updated_at = updated_at
                self.archived = archived
                self.column_name = column_name
                self.project_id = project_id
                self.column_url = column_url
                self.content_url = content_url
                self.project_url = project_url
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case note
                case creator
                case created_at
                case updated_at
                case archived
                case column_name
                case project_id
                case column_url
                case content_url
                case project_url
            }
        }
        /// Project columns contain cards of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project-column`.
        package struct project_column: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-column/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/project_url`.
            package var project_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/cards_url`.
            package var cards_url: Swift.String
            /// The unique identifier of the project column
            ///
            /// - Remark: Generated from `#/components/schemas/project-column/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project-column/node_id`.
            package var node_id: Swift.String
            /// Name of the project column
            ///
            /// - Remark: Generated from `#/components/schemas/project-column/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project-column/updated_at`.
            package var updated_at: Foundation.Date
            /// Creates a new `project_column`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - project_url:
            ///   - cards_url:
            ///   - id: The unique identifier of the project column
            ///   - node_id:
            ///   - name: Name of the project column
            ///   - created_at:
            ///   - updated_at:
            package init(
                url: Swift.String,
                project_url: Swift.String,
                cards_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.url = url
                self.project_url = project_url
                self.cards_url = cards_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case project_url
                case cards_url
                case id
                case node_id
                case name
                case created_at
                case updated_at
            }
        }
        /// Project Collaborator Permission
        ///
        /// - Remark: Generated from `#/components/schemas/project-collaborator-permission`.
        package struct project_collaborator_permission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-collaborator-permission/permission`.
            package var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-collaborator-permission/user`.
            package var user: Components.Schemas.nullable_simple_user?
            /// Creates a new `project_collaborator_permission`.
            ///
            /// - Parameters:
            ///   - permission:
            ///   - user:
            package init(
                permission: Swift.String,
                user: Components.Schemas.nullable_simple_user? = nil
            ) {
                self.permission = permission
                self.user = user
            }
            package enum CodingKeys: String, CodingKey {
                case permission
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/rate-limit`.
        package struct rate_limit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/rate-limit/limit`.
            package var limit: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/remaining`.
            package var remaining: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/reset`.
            package var reset: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/used`.
            package var used: Swift.Int
            /// Creates a new `rate_limit`.
            ///
            /// - Parameters:
            ///   - limit:
            ///   - remaining:
            ///   - reset:
            ///   - used:
            package init(
                limit: Swift.Int,
                remaining: Swift.Int,
                reset: Swift.Int,
                used: Swift.Int
            ) {
                self.limit = limit
                self.remaining = remaining
                self.reset = reset
                self.used = used
            }
            package enum CodingKeys: String, CodingKey {
                case limit
                case remaining
                case reset
                case used
            }
        }
        /// Rate Limit Overview
        ///
        /// - Remark: Generated from `#/components/schemas/rate-limit-overview`.
        package struct rate_limit_overview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources`.
            package struct resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/core`.
                package var core: Components.Schemas.rate_limit
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/graphql`.
                package var graphql: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/search`.
                package var search: Components.Schemas.rate_limit
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/code_search`.
                package var code_search: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/source_import`.
                package var source_import: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/integration_manifest`.
                package var integration_manifest: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/code_scanning_upload`.
                package var code_scanning_upload: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/actions_runner_registration`.
                package var actions_runner_registration: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/scim`.
                package var scim: Components.Schemas.rate_limit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/dependency_snapshots`.
                package var dependency_snapshots: Components.Schemas.rate_limit?
                /// Creates a new `resourcesPayload`.
                ///
                /// - Parameters:
                ///   - core:
                ///   - graphql:
                ///   - search:
                ///   - code_search:
                ///   - source_import:
                ///   - integration_manifest:
                ///   - code_scanning_upload:
                ///   - actions_runner_registration:
                ///   - scim:
                ///   - dependency_snapshots:
                package init(
                    core: Components.Schemas.rate_limit,
                    graphql: Components.Schemas.rate_limit? = nil,
                    search: Components.Schemas.rate_limit,
                    code_search: Components.Schemas.rate_limit? = nil,
                    source_import: Components.Schemas.rate_limit? = nil,
                    integration_manifest: Components.Schemas.rate_limit? = nil,
                    code_scanning_upload: Components.Schemas.rate_limit? = nil,
                    actions_runner_registration: Components.Schemas.rate_limit? = nil,
                    scim: Components.Schemas.rate_limit? = nil,
                    dependency_snapshots: Components.Schemas.rate_limit? = nil
                ) {
                    self.core = core
                    self.graphql = graphql
                    self.search = search
                    self.code_search = code_search
                    self.source_import = source_import
                    self.integration_manifest = integration_manifest
                    self.code_scanning_upload = code_scanning_upload
                    self.actions_runner_registration = actions_runner_registration
                    self.scim = scim
                    self.dependency_snapshots = dependency_snapshots
                }
                package enum CodingKeys: String, CodingKey {
                    case core
                    case graphql
                    case search
                    case code_search
                    case source_import
                    case integration_manifest
                    case code_scanning_upload
                    case actions_runner_registration
                    case scim
                    case dependency_snapshots
                }
            }
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources`.
            package var resources: Components.Schemas.rate_limit_overview.resourcesPayload
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/rate`.
            package var rate: Components.Schemas.rate_limit
            /// Creates a new `rate_limit_overview`.
            ///
            /// - Parameters:
            ///   - resources:
            ///   - rate:
            package init(
                resources: Components.Schemas.rate_limit_overview.resourcesPayload,
                rate: Components.Schemas.rate_limit
            ) {
                self.resources = resources
                self.rate = rate
            }
            package enum CodingKeys: String, CodingKey {
                case resources
                case rate
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        package struct code_of_conduct_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            package var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            package var html_url: Swift.String?
            /// Creates a new `code_of_conduct_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            package init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        package struct full_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            package var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            package var owner: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            package var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            package var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            package var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            package var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            package var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            package var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            package var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            package var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            package var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            package var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            package var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            package var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            package var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            package var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            package var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            package var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            package var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            package var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            package var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            package var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            package var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            package var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            package var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            package var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            package var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            package var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            package var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            package var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            package var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            package var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            package var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            package var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            package var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            package var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            package var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            package var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            package var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            package var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            package var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            package var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            package var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            package var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            package var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            package var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            package var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            package var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            package var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            package var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            package var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            package var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            package var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            package var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            package var has_downloads: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            package var has_discussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            package var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            package struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                package var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                package init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            package var permissions: Components.Schemas.full_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            package var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            package var template_repository: Components.Schemas.nullable_repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            package var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            package var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            package var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            package var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            package var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            package var allow_update_branch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            package var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen package enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            package var squash_merge_commit_title: Components.Schemas.full_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen package enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            package var squash_merge_commit_message: Components.Schemas.full_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen package enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            package var merge_commit_title: Components.Schemas.full_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen package enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            package var merge_commit_message: Components.Schemas.full_repository.merge_commit_messagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            package var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            package var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            package var subscribers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            package var network_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            package var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            package var organization: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            package var parent: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            package var source: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            package var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            package var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            package var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            package var anonymous_access_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            package var code_of_conduct: Components.Schemas.code_of_conduct_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            package var security_and_analysis: Components.Schemas.security_and_analysis?
            /// Creates a new `full_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - allow_rebase_merge:
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_merge_commit:
            ///   - allow_update_branch:
            ///   - use_squash_pr_title_as_default:
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - master_branch:
            ///   - open_issues:
            ///   - watchers:
            ///   - anonymous_access_enabled: Whether anonymous git access is allowed.
            ///   - code_of_conduct:
            ///   - security_and_analysis:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.full_repository.permissionsPayload? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_repository? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.full_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.full_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.full_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.full_repository.merge_commit_messagePayload? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int,
                network_count: Swift.Int,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.nullable_simple_user? = nil,
                parent: Components.Schemas.repository? = nil,
                source: Components.Schemas.repository? = nil,
                forks: Swift.Int,
                master_branch: Swift.String? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                anonymous_access_enabled: Swift.Bool? = nil,
                code_of_conduct: Components.Schemas.code_of_conduct_simple? = nil,
                security_and_analysis: Components.Schemas.security_and_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.master_branch = master_branch
                self.open_issues = open_issues
                self.watchers = watchers
                self.anonymous_access_enabled = anonymous_access_enabled
                self.code_of_conduct = code_of_conduct
                self.security_and_analysis = security_and_analysis
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case license
                case organization
                case parent
                case source
                case forks
                case master_branch
                case open_issues
                case watchers
                case anonymous_access_enabled
                case code_of_conduct
                case security_and_analysis
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        package struct nullable_git_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            package var date: Swift.String?
            /// Creates a new `nullable_git_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        package struct verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            package var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            package var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            package var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            package var signature: Swift.String?
            /// Creates a new `verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            package init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
            }
            package enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        package struct diff_entry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            package var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen package enum statusPayload: String, Codable, Hashable, Sendable {
                case added = "added"
                case removed = "removed"
                case modified = "modified"
                case renamed = "renamed"
                case copied = "copied"
                case changed = "changed"
                case unchanged = "unchanged"
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            package var status: Components.Schemas.diff_entry.statusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            package var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            package var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            package var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            package var blob_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            package var raw_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            package var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            package var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            package var previous_filename: Swift.String?
            /// Creates a new `diff_entry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blob_url:
            ///   - raw_url:
            ///   - contents_url:
            ///   - patch:
            ///   - previous_filename:
            package init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.diff_entry.statusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blob_url: Swift.String,
                raw_url: Swift.String,
                contents_url: Swift.String,
                patch: Swift.String? = nil,
                previous_filename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blob_url = blob_url
                self.raw_url = raw_url
                self.contents_url = contents_url
                self.patch = patch
                self.previous_filename = previous_filename
            }
            package enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blob_url
                case raw_url
                case contents_url
                case patch
                case previous_filename
            }
        }
        /// Commit
        ///
        /// - Remark: Generated from `#/components/schemas/commit`.
        package struct commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/commit/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/author`.
                package var author: Components.Schemas.nullable_git_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/committer`.
                package var committer: Components.Schemas.nullable_git_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/message`.
                package var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/comment_count`.
                package var comment_count: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package struct treePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/sha`.
                    package var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/url`.
                    package var url: Swift.String
                    /// Creates a new `treePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    package init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package var tree: Components.Schemas.commit.commitPayload.treePayload
                /// - Remark: Generated from `#/components/schemas/commit/commit/verification`.
                package var verification: Components.Schemas.verification?
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - comment_count:
                ///   - tree:
                ///   - verification:
                package init(
                    url: Swift.String,
                    author: Components.Schemas.nullable_git_user? = nil,
                    committer: Components.Schemas.nullable_git_user? = nil,
                    message: Swift.String,
                    comment_count: Swift.Int,
                    tree: Components.Schemas.commit.commitPayload.treePayload,
                    verification: Components.Schemas.verification? = nil
                ) {
                    self.url = url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.comment_count = comment_count
                    self.tree = tree
                    self.verification = verification
                }
                package enum CodingKeys: String, CodingKey {
                    case url
                    case author
                    case committer
                    case message
                    case comment_count
                    case tree
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package var commit: Components.Schemas.commit.commitPayload
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            package var author: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            package var committer: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/commit/parentsPayload`.
            package struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/html_url`.
                package var html_url: Swift.String?
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                ///   - html_url:
                package init(
                    sha: Swift.String,
                    url: Swift.String,
                    html_url: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.url = url
                    self.html_url = html_url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package typealias parentsPayload = [Components.Schemas.commit.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package var parents: Components.Schemas.commit.parentsPayload
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package struct statsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/stats/additions`.
                package var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/deletions`.
                package var deletions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/total`.
                package var total: Swift.Int?
                /// Creates a new `statsPayload`.
                ///
                /// - Parameters:
                ///   - additions:
                ///   - deletions:
                ///   - total:
                package init(
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.additions = additions
                    self.deletions = deletions
                    self.total = total
                }
                package enum CodingKeys: String, CodingKey {
                    case additions
                    case deletions
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package var stats: Components.Schemas.commit.statsPayload?
            /// - Remark: Generated from `#/components/schemas/commit/files`.
            package var files: [Components.Schemas.diff_entry]?
            /// Creates a new `commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - node_id:
            ///   - html_url:
            ///   - comments_url:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - stats:
            ///   - files:
            package init(
                url: Swift.String,
                sha: Swift.String,
                node_id: Swift.String,
                html_url: Swift.String,
                comments_url: Swift.String,
                commit: Components.Schemas.commit.commitPayload,
                author: Components.Schemas.nullable_simple_user? = nil,
                committer: Components.Schemas.nullable_simple_user? = nil,
                parents: Components.Schemas.commit.parentsPayload,
                stats: Components.Schemas.commit.statsPayload? = nil,
                files: [Components.Schemas.diff_entry]? = nil
            ) {
                self.url = url
                self.sha = sha
                self.node_id = node_id
                self.html_url = html_url
                self.comments_url = comments_url
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.stats = stats
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case sha
                case node_id
                case html_url
                case comments_url
                case commit
                case author
                case committer
                case parents
                case stats
                case files
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-commit`.
        package struct simple_commit: Codable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/id`.
            package var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/tree_id`.
            package var tree_id: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/message`.
            package var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/timestamp`.
            package var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package struct authorPayload: Codable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/name`.
                package var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/email`.
                package var email: Swift.String?
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                package init(
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package var author: Components.Schemas.simple_commit.authorPayload?
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package struct committerPayload: Codable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/name`.
                package var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/email`.
                package var email: Swift.String?
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                package init(
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package var committer: Components.Schemas.simple_commit.committerPayload
            /// Creates a new `simple_commit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - tree_id: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            package init(
                id: Swift.String,
                tree_id: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.simple_commit.authorPayload? = nil,
                committer: Components.Schemas.simple_commit.committerPayload
            ) {
                self.id = id
                self.tree_id = tree_id
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case tree_id
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// Commit Comment
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comment`.
        package struct commit_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comment/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comment/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/path`.
            package var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/commit-comment/position`.
            package var position: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/line`.
            package var line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/commit_id`.
            package var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/user`.
            package var user: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/commit-comment/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/commit-comment/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `commit_comment`.
            ///
            /// - Parameters:
            ///   - html_url:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - body:
            ///   - path:
            ///   - position:
            ///   - line:
            ///   - commit_id:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - author_association:
            ///   - reactions:
            package init(
                html_url: Swift.String,
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                body: Swift.String,
                path: Swift.String? = nil,
                position: Swift.Int? = nil,
                line: Swift.Int? = nil,
                commit_id: Swift.String,
                user: Components.Schemas.nullable_simple_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                author_association: Components.Schemas.author_association,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.html_url = html_url
                self.url = url
                self.id = id
                self.node_id = node_id
                self.body = body
                self.path = path
                self.position = position
                self.line = line
                self.commit_id = commit_id
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.author_association = author_association
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case html_url
                case url
                case id
                case node_id
                case body
                case path
                case position
                case line
                case commit_id
                case user
                case created_at
                case updated_at
                case author_association
                case reactions
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        package struct link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            package var href: Swift.String
            /// Creates a new `link`.
            ///
            /// - Parameters:
            ///   - href:
            package init(href: Swift.String) {
                self.href = href
            }
            package enum CodingKeys: String, CodingKey {
                case href
            }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        package struct auto_merge: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            package var enabled_by: Components.Schemas.simple_user
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen package enum merge_methodPayload: String, Codable, Hashable, Sendable {
                case merge = "merge"
                case squash = "squash"
                case rebase = "rebase"
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            package var merge_method: Components.Schemas.auto_merge.merge_methodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            package var commit_title: Swift.String?
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            package var commit_message: Swift.String?
            /// Creates a new `auto_merge`.
            ///
            /// - Parameters:
            ///   - enabled_by:
            ///   - merge_method: The merge method to use.
            ///   - commit_title: Title for the merge commit message.
            ///   - commit_message: Commit message for the merge commit.
            package init(
                enabled_by: Components.Schemas.simple_user,
                merge_method: Components.Schemas.auto_merge.merge_methodPayload,
                commit_title: Swift.String? = nil,
                commit_message: Swift.String? = nil
            ) {
                self.enabled_by = enabled_by
                self.merge_method = merge_method
                self.commit_title = commit_title
                self.commit_message = commit_message
            }
            package enum CodingKeys: String, CodingKey {
                case enabled_by
                case merge_method
                case commit_title
                case commit_message
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        package struct pull_request_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            package var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            package var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            package var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            package var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            package var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            package var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            package var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            package var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            package var user: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload`.
            package struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/node_id`.
                package var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/description`.
                package var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package typealias labelsPayload = [Components.Schemas.pull_request_simple.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package var labels: Components.Schemas.pull_request_simple.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            package var milestone: Components.Schemas.nullable_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            package var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            package var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            package var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            package var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            package var assignee: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            package var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            package var requested_reviewers: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            package var requested_teams: [Components.Schemas.team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                package var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                package var user: Components.Schemas.nullable_simple_user?
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_simple_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package var head: Components.Schemas.pull_request_simple.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                package var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                package var user: Components.Schemas.nullable_simple_user?
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_simple_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package var base: Components.Schemas.pull_request_simple.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                package var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                package var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                package var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                package var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                package var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                package var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                package var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                package var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package var _links: Components.Schemas.pull_request_simple._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            package var auto_merge: Components.Schemas.auto_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            package var draft: Swift.Bool?
            /// Creates a new `pull_request_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            package init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.nullable_simple_user? = nil,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_request_simple.labelsPayload,
                milestone: Components.Schemas.nullable_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_simple_user? = nil,
                assignees: [Components.Schemas.simple_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_user]? = nil,
                requested_teams: [Components.Schemas.team]? = nil,
                head: Components.Schemas.pull_request_simple.headPayload,
                base: Components.Schemas.pull_request_simple.basePayload,
                _links: Components.Schemas.pull_request_simple._linksPayload,
                author_association: Components.Schemas.author_association,
                auto_merge: Components.Schemas.auto_merge? = nil,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
            }
        }
        /// Commit Comparison
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comparison`.
        package struct commit_comparison: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comparison/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/permalink_url`.
            package var permalink_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/diff_url`.
            package var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/patch_url`.
            package var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/base_commit`.
            package var base_commit: Components.Schemas.commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/merge_base_commit`.
            package var merge_base_commit: Components.Schemas.commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            @frozen package enum statusPayload: String, Codable, Hashable, Sendable {
                case diverged = "diverged"
                case ahead = "ahead"
                case behind = "behind"
                case identical = "identical"
            }
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            package var status: Components.Schemas.commit_comparison.statusPayload
            /// - Remark: Generated from `#/components/schemas/commit-comparison/ahead_by`.
            package var ahead_by: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/behind_by`.
            package var behind_by: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/total_commits`.
            package var total_commits: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/commits`.
            package var commits: [Components.Schemas.commit]
            /// - Remark: Generated from `#/components/schemas/commit-comparison/files`.
            package var files: [Components.Schemas.diff_entry]?
            /// Creates a new `commit_comparison`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - permalink_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - base_commit:
            ///   - merge_base_commit:
            ///   - status:
            ///   - ahead_by:
            ///   - behind_by:
            ///   - total_commits:
            ///   - commits:
            ///   - files:
            package init(
                url: Swift.String,
                html_url: Swift.String,
                permalink_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                base_commit: Components.Schemas.commit,
                merge_base_commit: Components.Schemas.commit,
                status: Components.Schemas.commit_comparison.statusPayload,
                ahead_by: Swift.Int,
                behind_by: Swift.Int,
                total_commits: Swift.Int,
                commits: [Components.Schemas.commit],
                files: [Components.Schemas.diff_entry]? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.permalink_url = permalink_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.base_commit = base_commit
                self.merge_base_commit = merge_base_commit
                self.status = status
                self.ahead_by = ahead_by
                self.behind_by = behind_by
                self.total_commits = total_commits
                self.commits = commits
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case permalink_url
                case diff_url
                case patch_url
                case base_commit
                case merge_base_commit
                case status
                case ahead_by
                case behind_by
                case total_commits
                case commits
                case files
            }
        }
        /// Contributor
        ///
        /// - Remark: Generated from `#/components/schemas/contributor`.
        package struct contributor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor/login`.
            package var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/id`.
            package var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/contributor/node_id`.
            package var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/avatar_url`.
            package var avatar_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gravatar_id`.
            package var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/html_url`.
            package var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/followers_url`.
            package var followers_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/following_url`.
            package var following_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gists_url`.
            package var gists_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/starred_url`.
            package var starred_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/subscriptions_url`.
            package var subscriptions_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/organizations_url`.
            package var organizations_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/repos_url`.
            package var repos_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/events_url`.
            package var events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/received_events_url`.
            package var received_events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/contributor/site_admin`.
            package var site_admin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/contributor/contributions`.
            package var contributions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/name`.
            package var name: Swift.String?
            /// Creates a new `contributor`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - contributions:
            ///   - email:
            ///   - name:
            package init(
                login: Swift.String? = nil,
                id: Swift.Int? = nil,
                node_id: Swift.String? = nil,
                avatar_url: Swift.String? = nil,
                gravatar_id: Swift.String? = nil,
                url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                followers_url: Swift.String? = nil,
                following_url: Swift.String? = nil,
                gists_url: Swift.String? = nil,
                starred_url: Swift.String? = nil,
                subscriptions_url: Swift.String? = nil,
                organizations_url: Swift.String? = nil,
                repos_url: Swift.String? = nil,
                events_url: Swift.String? = nil,
                received_events_url: Swift.String? = nil,
                _type: Swift.String,
                site_admin: Swift.Bool? = nil,
                contributions: Swift.Int,
                email: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.contributions = contributions
                self.email = email
                self.name = name
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case contributions
                case email
                case name
            }
        }
        /// Labeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/labeled-issue-event`.
        package struct labeled_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            package struct labelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/color`.
                package var color: Swift.String
                /// Creates a new `labelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                package init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            package var label: Components.Schemas.labeled_issue_event.labelPayload
            /// Creates a new `labeled_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - label:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                label: Components.Schemas.labeled_issue_event.labelPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.label = label
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case label
            }
        }
        /// Unlabeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event`.
        package struct unlabeled_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            package struct labelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/color`.
                package var color: Swift.String
                /// Creates a new `labelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                package init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            package var label: Components.Schemas.unlabeled_issue_event.labelPayload
            /// Creates a new `unlabeled_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - label:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                label: Components.Schemas.unlabeled_issue_event.labelPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.label = label
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case label
            }
        }
        /// Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/assigned-issue-event`.
        package struct assigned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.integration
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assignee`.
            package var assignee: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assigner`.
            package var assigner: Components.Schemas.simple_user
            /// Creates a new `assigned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            ///   - assigner:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.integration,
                assignee: Components.Schemas.simple_user,
                assigner: Components.Schemas.simple_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
                self.assigner = assigner
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
                case assigner
            }
        }
        /// Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unassigned-issue-event`.
        package struct unassigned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assignee`.
            package var assignee: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assigner`.
            package var assigner: Components.Schemas.simple_user
            /// Creates a new `unassigned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            ///   - assigner:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                assignee: Components.Schemas.simple_user,
                assigner: Components.Schemas.simple_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
                self.assigner = assigner
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
                case assigner
            }
        }
        /// Milestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/milestoned-issue-event`.
        package struct milestoned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            package struct milestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone/title`.
                package var title: Swift.String
                /// Creates a new `milestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                package init(title: Swift.String) {
                    self.title = title
                }
                package enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            package var milestone: Components.Schemas.milestoned_issue_event.milestonePayload
            /// Creates a new `milestoned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - milestone:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                milestone: Components.Schemas.milestoned_issue_event.milestonePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.milestone = milestone
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case milestone
            }
        }
        /// Demilestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event`.
        package struct demilestoned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            package struct milestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone/title`.
                package var title: Swift.String
                /// Creates a new `milestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                package init(title: Swift.String) {
                    self.title = title
                }
                package enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            package var milestone: Components.Schemas.demilestoned_issue_event.milestonePayload
            /// Creates a new `demilestoned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - milestone:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                milestone: Components.Schemas.demilestoned_issue_event.milestonePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.milestone = milestone
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case milestone
            }
        }
        /// Renamed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/renamed-issue-event`.
        package struct renamed_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            package struct renamePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/from`.
                package var from: Swift.String
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/to`.
                package var to: Swift.String
                /// Creates a new `renamePayload`.
                ///
                /// - Parameters:
                ///   - from:
                ///   - to:
                package init(
                    from: Swift.String,
                    to: Swift.String
                ) {
                    self.from = from
                    self.to = to
                }
                package enum CodingKeys: String, CodingKey {
                    case from
                    case to
                }
            }
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            package var rename: Components.Schemas.renamed_issue_event.renamePayload
            /// Creates a new `renamed_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - rename:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                rename: Components.Schemas.renamed_issue_event.renamePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.rename = rename
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case rename
            }
        }
        /// Review Requested Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-requested-issue-event`.
        package struct review_requested_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/review_requester`.
            package var review_requester: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_team`.
            package var requested_team: Components.Schemas.team?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_reviewer`.
            package var requested_reviewer: Components.Schemas.simple_user?
            /// Creates a new `review_requested_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - review_requester:
            ///   - requested_team:
            ///   - requested_reviewer:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                review_requester: Components.Schemas.simple_user,
                requested_team: Components.Schemas.team? = nil,
                requested_reviewer: Components.Schemas.simple_user? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.review_requester = review_requester
                self.requested_team = requested_team
                self.requested_reviewer = requested_reviewer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case review_requester
                case requested_team
                case requested_reviewer
            }
        }
        /// Review Request Removed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event`.
        package struct review_request_removed_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/review_requester`.
            package var review_requester: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_team`.
            package var requested_team: Components.Schemas.team?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_reviewer`.
            package var requested_reviewer: Components.Schemas.simple_user?
            /// Creates a new `review_request_removed_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - review_requester:
            ///   - requested_team:
            ///   - requested_reviewer:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                review_requester: Components.Schemas.simple_user,
                requested_team: Components.Schemas.team? = nil,
                requested_reviewer: Components.Schemas.simple_user? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.review_requester = review_requester
                self.requested_team = requested_team
                self.requested_reviewer = requested_reviewer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case review_requester
                case requested_team
                case requested_reviewer
            }
        }
        /// Review Dismissed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event`.
        package struct review_dismissed_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            package struct dismissed_reviewPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/state`.
                package var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/review_id`.
                package var review_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_message`.
                package var dismissal_message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_commit_id`.
                package var dismissal_commit_id: Swift.String?
                /// Creates a new `dismissed_reviewPayload`.
                ///
                /// - Parameters:
                ///   - state:
                ///   - review_id:
                ///   - dismissal_message:
                ///   - dismissal_commit_id:
                package init(
                    state: Swift.String,
                    review_id: Swift.Int,
                    dismissal_message: Swift.String? = nil,
                    dismissal_commit_id: Swift.String? = nil
                ) {
                    self.state = state
                    self.review_id = review_id
                    self.dismissal_message = dismissal_message
                    self.dismissal_commit_id = dismissal_commit_id
                }
                package enum CodingKeys: String, CodingKey {
                    case state
                    case review_id
                    case dismissal_message
                    case dismissal_commit_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            package var dismissed_review: Components.Schemas.review_dismissed_issue_event.dismissed_reviewPayload
            /// Creates a new `review_dismissed_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - dismissed_review:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                dismissed_review: Components.Schemas.review_dismissed_issue_event.dismissed_reviewPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.dismissed_review = dismissed_review
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case dismissed_review
            }
        }
        /// Locked Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/locked-issue-event`.
        package struct locked_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/lock_reason`.
            package var lock_reason: Swift.String?
            /// Creates a new `locked_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - lock_reason:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                lock_reason: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.lock_reason = lock_reason
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case lock_reason
            }
        }
        /// Added to Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event`.
        package struct added_to_project_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            package struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_id`.
                package var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_url`.
                package var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/column_name`.
                package var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/previous_column_name`.
                package var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            package var project_card: Components.Schemas.added_to_project_issue_event.project_cardPayload?
            /// Creates a new `added_to_project_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                project_card: Components.Schemas.added_to_project_issue_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Moved Column in Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event`.
        package struct moved_column_in_project_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            package struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_id`.
                package var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_url`.
                package var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/column_name`.
                package var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/previous_column_name`.
                package var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            package var project_card: Components.Schemas.moved_column_in_project_issue_event.project_cardPayload?
            /// Creates a new `moved_column_in_project_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                project_card: Components.Schemas.moved_column_in_project_issue_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Removed from Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event`.
        package struct removed_from_project_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            package struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_id`.
                package var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_url`.
                package var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/column_name`.
                package var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/previous_column_name`.
                package var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            package var project_card: Components.Schemas.removed_from_project_issue_event.project_cardPayload?
            /// Creates a new `removed_from_project_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                project_card: Components.Schemas.removed_from_project_issue_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Converted Note to Issue Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event`.
        package struct converted_note_to_issue_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.integration
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            package struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_id`.
                package var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_url`.
                package var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/column_name`.
                package var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/previous_column_name`.
                package var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            package var project_card: Components.Schemas.converted_note_to_issue_issue_event.project_cardPayload?
            /// Creates a new `converted_note_to_issue_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.integration,
                project_card: Components.Schemas.converted_note_to_issue_issue_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Issue Event for Issue
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-for-issue`.
        package struct issue_event_for_issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value1`.
            package var value1: Components.Schemas.labeled_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value2`.
            package var value2: Components.Schemas.unlabeled_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value3`.
            package var value3: Components.Schemas.assigned_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value4`.
            package var value4: Components.Schemas.unassigned_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value5`.
            package var value5: Components.Schemas.milestoned_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value6`.
            package var value6: Components.Schemas.demilestoned_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value7`.
            package var value7: Components.Schemas.renamed_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value8`.
            package var value8: Components.Schemas.review_requested_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value9`.
            package var value9: Components.Schemas.review_request_removed_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value10`.
            package var value10: Components.Schemas.review_dismissed_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value11`.
            package var value11: Components.Schemas.locked_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value12`.
            package var value12: Components.Schemas.added_to_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value13`.
            package var value13: Components.Schemas.moved_column_in_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value14`.
            package var value14: Components.Schemas.removed_from_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value15`.
            package var value15: Components.Schemas.converted_note_to_issue_issue_event?
            /// Creates a new `issue_event_for_issue`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            package init(
                value1: Components.Schemas.labeled_issue_event? = nil,
                value2: Components.Schemas.unlabeled_issue_event? = nil,
                value3: Components.Schemas.assigned_issue_event? = nil,
                value4: Components.Schemas.unassigned_issue_event? = nil,
                value5: Components.Schemas.milestoned_issue_event? = nil,
                value6: Components.Schemas.demilestoned_issue_event? = nil,
                value7: Components.Schemas.renamed_issue_event? = nil,
                value8: Components.Schemas.review_requested_issue_event? = nil,
                value9: Components.Schemas.review_request_removed_issue_event? = nil,
                value10: Components.Schemas.review_dismissed_issue_event? = nil,
                value11: Components.Schemas.locked_issue_event? = nil,
                value12: Components.Schemas.added_to_project_issue_event? = nil,
                value13: Components.Schemas.moved_column_in_project_issue_event? = nil,
                value14: Components.Schemas.removed_from_project_issue_event? = nil,
                value15: Components.Schemas.converted_note_to_issue_issue_event? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
            }
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4,
                        value5,
                        value6,
                        value7,
                        value8,
                        value9,
                        value10,
                        value11,
                        value12,
                        value13,
                        value14,
                        value15
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
                try value3?.encode(to: encoder)
                try value4?.encode(to: encoder)
                try value5?.encode(to: encoder)
                try value6?.encode(to: encoder)
                try value7?.encode(to: encoder)
                try value8?.encode(to: encoder)
                try value9?.encode(to: encoder)
                try value10?.encode(to: encoder)
                try value11?.encode(to: encoder)
                try value12?.encode(to: encoder)
                try value13?.encode(to: encoder)
                try value14?.encode(to: encoder)
                try value15?.encode(to: encoder)
            }
        }
        /// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
        ///
        /// - Remark: Generated from `#/components/schemas/label`.
        package struct label: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/label/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/label/node_id`.
            package var node_id: Swift.String
            /// URL for the label
            ///
            /// - Remark: Generated from `#/components/schemas/label/url`.
            package var url: Swift.String
            /// The name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/description`.
            package var description: Swift.String?
            /// 6-character hex code, without the leading #, identifying the color
            ///
            /// - Remark: Generated from `#/components/schemas/label/color`.
            package var color: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/default`.
            package var _default: Swift.Bool
            /// Creates a new `label`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the label
            ///   - name: The name of the label.
            ///   - description:
            ///   - color: 6-character hex code, without the leading #, identifying the color
            ///   - _default:
            package init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                color: Swift.String,
                _default: Swift.Bool
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self._default = _default
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case name
                case description
                case color
                case _default = "default"
            }
        }
        /// Timeline Comment Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-comment-event`.
        package struct timeline_comment_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/node_id`.
            package var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/url`.
            package var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_text`.
            package var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/user`.
            package var user: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/issue_url`.
            package var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `timeline_comment_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            package init(
                event: Swift.String,
                actor: Components.Schemas.simple_user,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.simple_user,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_association,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.event = event
                self.actor = actor
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case actor
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// Timeline Cross Referenced Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event`.
        package struct timeline_cross_referenced_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/actor`.
            package var actor: Components.Schemas.simple_user?
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            package struct sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/type`.
                package var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/issue`.
                package var issue: Components.Schemas.issue?
                /// Creates a new `sourcePayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - issue:
                package init(
                    _type: Swift.String? = nil,
                    issue: Components.Schemas.issue? = nil
                ) {
                    self._type = _type
                    self.issue = issue
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case issue
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            package var source: Components.Schemas.timeline_cross_referenced_event.sourcePayload
            /// Creates a new `timeline_cross_referenced_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - created_at:
            ///   - updated_at:
            ///   - source:
            package init(
                event: Swift.String,
                actor: Components.Schemas.simple_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                source: Components.Schemas.timeline_cross_referenced_event.sourcePayload
            ) {
                self.event = event
                self.actor = actor
                self.created_at = created_at
                self.updated_at = updated_at
                self.source = source
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case actor
                case created_at
                case updated_at
                case source
            }
        }
        /// Timeline Committed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-committed-event`.
        package struct timeline_committed_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/event`.
            package var event: Swift.String?
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/url`.
            package var url: Swift.String
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            package struct authorPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/date`.
                package var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/email`.
                package var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/name`.
                package var name: Swift.String
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                package init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            package var author: Components.Schemas.timeline_committed_event.authorPayload
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            package struct committerPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/date`.
                package var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/email`.
                package var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/name`.
                package var name: Swift.String
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                package init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            package var committer: Components.Schemas.timeline_committed_event.committerPayload
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            package struct treePayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/url`.
                package var url: Swift.String
                /// Creates a new `treePayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                package init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            package var tree: Components.Schemas.timeline_committed_event.treePayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload`.
            package struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/html_url`.
                package var html_url: Swift.String
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                ///   - html_url:
                package init(
                    sha: Swift.String,
                    url: Swift.String,
                    html_url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                    self.html_url = html_url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            package typealias parentsPayload = [Components.Schemas.timeline_committed_event.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            package var parents: Components.Schemas.timeline_committed_event.parentsPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            package struct verificationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/verified`.
                package var verified: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/reason`.
                package var reason: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/signature`.
                package var signature: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/payload`.
                package var payload: Swift.String?
                /// Creates a new `verificationPayload`.
                ///
                /// - Parameters:
                ///   - verified:
                ///   - reason:
                ///   - signature:
                ///   - payload:
                package init(
                    verified: Swift.Bool,
                    reason: Swift.String,
                    signature: Swift.String? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.verified = verified
                    self.reason = reason
                    self.signature = signature
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case verified
                    case reason
                    case signature
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            package var verification: Components.Schemas.timeline_committed_event.verificationPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/html_url`.
            package var html_url: Swift.String
            /// Creates a new `timeline_committed_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - sha: SHA for the commit
            ///   - node_id:
            ///   - url:
            ///   - author: Identifying information for the git-user
            ///   - committer: Identifying information for the git-user
            ///   - message: Message describing the purpose of the commit
            ///   - tree:
            ///   - parents:
            ///   - verification:
            ///   - html_url:
            package init(
                event: Swift.String? = nil,
                sha: Swift.String,
                node_id: Swift.String,
                url: Swift.String,
                author: Components.Schemas.timeline_committed_event.authorPayload,
                committer: Components.Schemas.timeline_committed_event.committerPayload,
                message: Swift.String,
                tree: Components.Schemas.timeline_committed_event.treePayload,
                parents: Components.Schemas.timeline_committed_event.parentsPayload,
                verification: Components.Schemas.timeline_committed_event.verificationPayload,
                html_url: Swift.String
            ) {
                self.event = event
                self.sha = sha
                self.node_id = node_id
                self.url = url
                self.author = author
                self.committer = committer
                self.message = message
                self.tree = tree
                self.parents = parents
                self.verification = verification
                self.html_url = html_url
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case sha
                case node_id
                case url
                case author
                case committer
                case message
                case tree
                case parents
                case verification
                case html_url
            }
        }
        /// Timeline Reviewed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event`.
        package struct timeline_reviewed_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/event`.
            package var event: Swift.String
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/user`.
            package var user: Components.Schemas.simple_user
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/pull_request_url`.
            package var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            package struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                package struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                package var html: Components.Schemas.timeline_reviewed_event._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                package struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                package var pull_request: Components.Schemas.timeline_reviewed_event._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pull_request:
                package init(
                    html: Components.Schemas.timeline_reviewed_event._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.timeline_reviewed_event._linksPayload.pull_requestPayload
                ) {
                    self.html = html
                    self.pull_request = pull_request
                }
                package enum CodingKeys: String, CodingKey {
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            package var _links: Components.Schemas.timeline_reviewed_event._linksPayload
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/submitted_at`.
            package var submitted_at: Foundation.Date?
            /// A commit SHA for the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/commit_id`.
            package var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_text`.
            package var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/author_association`.
            package var author_association: Components.Schemas.author_association
            /// Creates a new `timeline_reviewed_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - id: Unique identifier of the review
            ///   - node_id:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - html_url:
            ///   - pull_request_url:
            ///   - _links:
            ///   - submitted_at:
            ///   - commit_id: A commit SHA for the review.
            ///   - body_html:
            ///   - body_text:
            ///   - author_association:
            package init(
                event: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                user: Components.Schemas.simple_user,
                body: Swift.String? = nil,
                state: Swift.String,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                _links: Components.Schemas.timeline_reviewed_event._linksPayload,
                submitted_at: Foundation.Date? = nil,
                commit_id: Swift.String,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                author_association: Components.Schemas.author_association
            ) {
                self.event = event
                self.id = id
                self.node_id = node_id
                self.user = user
                self.body = body
                self.state = state
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self._links = _links
                self.submitted_at = submitted_at
                self.commit_id = commit_id
                self.body_html = body_html
                self.body_text = body_text
                self.author_association = author_association
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case id
                case node_id
                case user
                case body
                case state
                case html_url
                case pull_request_url
                case _links
                case submitted_at
                case commit_id
                case body_html
                case body_text
                case author_association
            }
        }
        /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-comment`.
        package struct pull_request_review_comment: Codable, Hashable, Sendable {
            /// URL for the pull request review comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/url`.
            package var url: Swift.String
            /// The ID of the pull request review to which the comment belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_review_id`.
            package var pull_request_review_id: Swift.Int?
            /// The ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/id`.
            package var id: Swift.Int
            /// The node ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/node_id`.
            package var node_id: Swift.String
            /// The diff of the line that the comment refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/diff_hunk`.
            package var diff_hunk: Swift.String
            /// The relative path of the file to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/path`.
            package var path: Swift.String
            /// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/position`.
            package var position: Swift.Int?
            /// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_position`.
            package var original_position: Swift.Int?
            /// The SHA of the commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/commit_id`.
            package var commit_id: Swift.String
            /// The SHA of the original commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_commit_id`.
            package var original_commit_id: Swift.String
            /// The comment ID to reply to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/in_reply_to_id`.
            package var in_reply_to_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/user`.
            package var user: Components.Schemas.simple_user
            /// The text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/updated_at`.
            package var updated_at: Foundation.Date
            /// HTML URL for the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/html_url`.
            package var html_url: Swift.String
            /// URL for the pull request that the review comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_url`.
            package var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            package struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                package struct _selfPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self/href`.
                    package var href: Swift.String
                    /// Creates a new `_selfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                package var _self: Components.Schemas.pull_request_review_comment._linksPayload._selfPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                package struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                package var html: Components.Schemas.pull_request_review_comment._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                package struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                package var pull_request: Components.Schemas.pull_request_review_comment._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pull_request:
                package init(
                    _self: Components.Schemas.pull_request_review_comment._linksPayload._selfPayload,
                    html: Components.Schemas.pull_request_review_comment._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.pull_request_review_comment._linksPayload.pull_requestPayload
                ) {
                    self._self = _self
                    self.html = html
                    self.pull_request = pull_request
                }
                package enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            package var _links: Components.Schemas.pull_request_review_comment._linksPayload
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_line`.
            package var start_line: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_start_line`.
            package var original_start_line: Swift.Int?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            @frozen package enum start_sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            package var start_side: Components.Schemas.pull_request_review_comment.start_sidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/line`.
            package var line: Swift.Int?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_line`.
            package var original_line: Swift.Int?
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            @frozen package enum sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            package var side: Components.Schemas.pull_request_review_comment.sidePayload?
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            @frozen package enum subject_typePayload: String, Codable, Hashable, Sendable {
                case line = "line"
                case file = "file"
            }
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            package var subject_type: Components.Schemas.pull_request_review_comment.subject_typePayload?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_text`.
            package var body_text: Swift.String?
            /// Creates a new `pull_request_review_comment`.
            ///
            /// - Parameters:
            ///   - url: URL for the pull request review comment
            ///   - pull_request_review_id: The ID of the pull request review to which the comment belongs.
            ///   - id: The ID of the pull request review comment.
            ///   - node_id: The node ID of the pull request review comment.
            ///   - diff_hunk: The diff of the line that the comment refers to.
            ///   - path: The relative path of the file to which the comment applies.
            ///   - position: The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///   - original_position: The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///   - commit_id: The SHA of the commit to which the comment applies.
            ///   - original_commit_id: The SHA of the original commit to which the comment applies.
            ///   - in_reply_to_id: The comment ID to reply to.
            ///   - user:
            ///   - body: The text of the comment.
            ///   - created_at:
            ///   - updated_at:
            ///   - html_url: HTML URL for the pull request review comment.
            ///   - pull_request_url: URL for the pull request that the review comment belongs to.
            ///   - author_association:
            ///   - _links:
            ///   - start_line: The first line of the range for a multi-line comment.
            ///   - original_start_line: The first line of the range for a multi-line comment.
            ///   - start_side: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - original_line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - side: The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///   - subject_type: The level at which the comment is targeted, can be a diff line or a file.
            ///   - reactions:
            ///   - body_html:
            ///   - body_text:
            package init(
                url: Swift.String,
                pull_request_review_id: Swift.Int? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                diff_hunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                original_position: Swift.Int? = nil,
                commit_id: Swift.String,
                original_commit_id: Swift.String,
                in_reply_to_id: Swift.Int? = nil,
                user: Components.Schemas.simple_user,
                body: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                author_association: Components.Schemas.author_association,
                _links: Components.Schemas.pull_request_review_comment._linksPayload,
                start_line: Swift.Int? = nil,
                original_start_line: Swift.Int? = nil,
                start_side: Components.Schemas.pull_request_review_comment.start_sidePayload? = nil,
                line: Swift.Int? = nil,
                original_line: Swift.Int? = nil,
                side: Components.Schemas.pull_request_review_comment.sidePayload? = nil,
                subject_type: Components.Schemas.pull_request_review_comment.subject_typePayload? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil
            ) {
                self.url = url
                self.pull_request_review_id = pull_request_review_id
                self.id = id
                self.node_id = node_id
                self.diff_hunk = diff_hunk
                self.path = path
                self.position = position
                self.original_position = original_position
                self.commit_id = commit_id
                self.original_commit_id = original_commit_id
                self.in_reply_to_id = in_reply_to_id
                self.user = user
                self.body = body
                self.created_at = created_at
                self.updated_at = updated_at
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self.author_association = author_association
                self._links = _links
                self.start_line = start_line
                self.original_start_line = original_start_line
                self.start_side = start_side
                self.line = line
                self.original_line = original_line
                self.side = side
                self.subject_type = subject_type
                self.reactions = reactions
                self.body_html = body_html
                self.body_text = body_text
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case pull_request_review_id
                case id
                case node_id
                case diff_hunk
                case path
                case position
                case original_position
                case commit_id
                case original_commit_id
                case in_reply_to_id
                case user
                case body
                case created_at
                case updated_at
                case html_url
                case pull_request_url
                case author_association
                case _links
                case start_line
                case original_start_line
                case start_side
                case line
                case original_line
                case side
                case subject_type
                case reactions
                case body_html
                case body_text
            }
        }
        /// Timeline Line Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event`.
        package struct timeline_line_commented_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/event`.
            package var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/node_id`.
            package var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/actor`.
            package var actor: Components.Schemas.simple_user?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/comments`.
            package var comments: [Components.Schemas.pull_request_review_comment]?
            /// Creates a new `timeline_line_commented_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - node_id:
            ///   - actor:
            ///   - comments:
            package init(
                event: Swift.String? = nil,
                node_id: Swift.String? = nil,
                actor: Components.Schemas.simple_user? = nil,
                comments: [Components.Schemas.pull_request_review_comment]? = nil
            ) {
                self.event = event
                self.node_id = node_id
                self.actor = actor
                self.comments = comments
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case node_id
                case actor
                case comments
            }
        }
        /// Timeline Commit Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event`.
        package struct timeline_commit_commented_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/event`.
            package var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/node_id`.
            package var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/comments`.
            package var comments: [Components.Schemas.commit_comment]?
            /// Creates a new `timeline_commit_commented_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - node_id:
            ///   - commit_id:
            ///   - comments:
            package init(
                event: Swift.String? = nil,
                node_id: Swift.String? = nil,
                commit_id: Swift.String? = nil,
                comments: [Components.Schemas.commit_comment]? = nil
            ) {
                self.event = event
                self.node_id = node_id
                self.commit_id = commit_id
                self.comments = comments
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case node_id
                case commit_id
                case comments
            }
        }
        /// Timeline Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event`.
        package struct timeline_assigned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/assignee`.
            package var assignee: Components.Schemas.simple_user
            /// Creates a new `timeline_assigned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                assignee: Components.Schemas.simple_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
            }
        }
        /// Timeline Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event`.
        package struct timeline_unassigned_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/assignee`.
            package var assignee: Components.Schemas.simple_user
            /// Creates a new `timeline_unassigned_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                assignee: Components.Schemas.simple_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
            }
        }
        /// State Change Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/state-change-issue-event`.
        package struct state_change_issue_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/actor`.
            package var actor: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_id`.
            package var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_url`.
            package var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/created_at`.
            package var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/performed_via_github_app`.
            package var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/state_reason`.
            package var state_reason: Swift.String?
            /// Creates a new `state_change_issue_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - state_reason:
            package init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                state_reason: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.state_reason = state_reason
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case state_reason
            }
        }
        /// Timeline Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-issue-events`.
        package struct timeline_issue_events: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value1`.
            package var value1: Components.Schemas.labeled_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value2`.
            package var value2: Components.Schemas.unlabeled_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value3`.
            package var value3: Components.Schemas.milestoned_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value4`.
            package var value4: Components.Schemas.demilestoned_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value5`.
            package var value5: Components.Schemas.renamed_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value6`.
            package var value6: Components.Schemas.review_requested_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value7`.
            package var value7: Components.Schemas.review_request_removed_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value8`.
            package var value8: Components.Schemas.review_dismissed_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value9`.
            package var value9: Components.Schemas.locked_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value10`.
            package var value10: Components.Schemas.added_to_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value11`.
            package var value11: Components.Schemas.moved_column_in_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value12`.
            package var value12: Components.Schemas.removed_from_project_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value13`.
            package var value13: Components.Schemas.converted_note_to_issue_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value14`.
            package var value14: Components.Schemas.timeline_comment_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value15`.
            package var value15: Components.Schemas.timeline_cross_referenced_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value16`.
            package var value16: Components.Schemas.timeline_committed_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value17`.
            package var value17: Components.Schemas.timeline_reviewed_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value18`.
            package var value18: Components.Schemas.timeline_line_commented_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value19`.
            package var value19: Components.Schemas.timeline_commit_commented_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value20`.
            package var value20: Components.Schemas.timeline_assigned_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value21`.
            package var value21: Components.Schemas.timeline_unassigned_issue_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value22`.
            package var value22: Components.Schemas.state_change_issue_event?
            /// Creates a new `timeline_issue_events`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            ///   - value16:
            ///   - value17:
            ///   - value18:
            ///   - value19:
            ///   - value20:
            ///   - value21:
            ///   - value22:
            package init(
                value1: Components.Schemas.labeled_issue_event? = nil,
                value2: Components.Schemas.unlabeled_issue_event? = nil,
                value3: Components.Schemas.milestoned_issue_event? = nil,
                value4: Components.Schemas.demilestoned_issue_event? = nil,
                value5: Components.Schemas.renamed_issue_event? = nil,
                value6: Components.Schemas.review_requested_issue_event? = nil,
                value7: Components.Schemas.review_request_removed_issue_event? = nil,
                value8: Components.Schemas.review_dismissed_issue_event? = nil,
                value9: Components.Schemas.locked_issue_event? = nil,
                value10: Components.Schemas.added_to_project_issue_event? = nil,
                value11: Components.Schemas.moved_column_in_project_issue_event? = nil,
                value12: Components.Schemas.removed_from_project_issue_event? = nil,
                value13: Components.Schemas.converted_note_to_issue_issue_event? = nil,
                value14: Components.Schemas.timeline_comment_event? = nil,
                value15: Components.Schemas.timeline_cross_referenced_event? = nil,
                value16: Components.Schemas.timeline_committed_event? = nil,
                value17: Components.Schemas.timeline_reviewed_event? = nil,
                value18: Components.Schemas.timeline_line_commented_event? = nil,
                value19: Components.Schemas.timeline_commit_commented_event? = nil,
                value20: Components.Schemas.timeline_assigned_issue_event? = nil,
                value21: Components.Schemas.timeline_unassigned_issue_event? = nil,
                value22: Components.Schemas.state_change_issue_event? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
                self.value16 = value16
                self.value17 = value17
                self.value18 = value18
                self.value19 = value19
                self.value20 = value20
                self.value21 = value21
                self.value22 = value22
            }
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value16 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value17 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value18 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value19 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value20 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value21 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value22 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4,
                        value5,
                        value6,
                        value7,
                        value8,
                        value9,
                        value10,
                        value11,
                        value12,
                        value13,
                        value14,
                        value15,
                        value16,
                        value17,
                        value18,
                        value19,
                        value20,
                        value21,
                        value22
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
                try value3?.encode(to: encoder)
                try value4?.encode(to: encoder)
                try value5?.encode(to: encoder)
                try value6?.encode(to: encoder)
                try value7?.encode(to: encoder)
                try value8?.encode(to: encoder)
                try value9?.encode(to: encoder)
                try value10?.encode(to: encoder)
                try value11?.encode(to: encoder)
                try value12?.encode(to: encoder)
                try value13?.encode(to: encoder)
                try value14?.encode(to: encoder)
                try value15?.encode(to: encoder)
                try value16?.encode(to: encoder)
                try value17?.encode(to: encoder)
                try value18?.encode(to: encoder)
                try value19?.encode(to: encoder)
                try value20?.encode(to: encoder)
                try value21?.encode(to: encoder)
                try value22?.encode(to: encoder)
            }
        }
        /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request`.
        package struct pull_request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/node_id`.
            package var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/diff_url`.
            package var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/patch_url`.
            package var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/issue_url`.
            package var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/commits_url`.
            package var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments_url`.
            package var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comment_url`.
            package var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/comments_url`.
            package var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/statuses_url`.
            package var statuses_url: Swift.String
            /// Number uniquely identifying the pull request within its repository.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/number`.
            package var number: Swift.Int
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            package var state: Components.Schemas.pull_request.statePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/locked`.
            package var locked: Swift.Bool
            /// The title of the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/user`.
            package var user: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/pull-request/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload`.
            package struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/node_id`.
                package var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package typealias labelsPayload = [Components.Schemas.pull_request.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package var labels: Components.Schemas.pull_request.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/milestone`.
            package var milestone: Components.Schemas.nullable_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request/active_lock_reason`.
            package var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/closed_at`.
            package var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_at`.
            package var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merge_commit_sha`.
            package var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignee`.
            package var assignee: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignees`.
            package var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_reviewers`.
            package var requested_reviewers: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_teams`.
            package var requested_teams: [Components.Schemas.team_simple]?
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                package struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archive_url`.
                    package var archive_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/assignees_url`.
                    package var assignees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/blobs_url`.
                    package var blobs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/branches_url`.
                    package var branches_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/collaborators_url`.
                    package var collaborators_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/comments_url`.
                    package var comments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/commits_url`.
                    package var commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/compare_url`.
                    package var compare_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contents_url`.
                    package var contents_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contributors_url`.
                    package var contributors_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/deployments_url`.
                    package var deployments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/downloads_url`.
                    package var downloads_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/events_url`.
                    package var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/fork`.
                    package var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_url`.
                    package var forks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/full_name`.
                    package var full_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_commits_url`.
                    package var git_commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_refs_url`.
                    package var git_refs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_tags_url`.
                    package var git_tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/hooks_url`.
                    package var hooks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/html_url`.
                    package var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/node_id`.
                    package var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_comment_url`.
                    package var issue_comment_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_events_url`.
                    package var issue_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issues_url`.
                    package var issues_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/keys_url`.
                    package var keys_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/labels_url`.
                    package var labels_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/languages_url`.
                    package var languages_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/merges_url`.
                    package var merges_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/milestones_url`.
                    package var milestones_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/notifications_url`.
                    package var notifications_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    package struct ownerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/avatar_url`.
                        package var avatar_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/events_url`.
                        package var events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/followers_url`.
                        package var followers_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/following_url`.
                        package var following_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gists_url`.
                        package var gists_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gravatar_id`.
                        package var gravatar_id: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/html_url`.
                        package var html_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/id`.
                        package var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/node_id`.
                        package var node_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/login`.
                        package var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/organizations_url`.
                        package var organizations_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/received_events_url`.
                        package var received_events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/repos_url`.
                        package var repos_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/site_admin`.
                        package var site_admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/starred_url`.
                        package var starred_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/subscriptions_url`.
                        package var subscriptions_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/type`.
                        package var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/url`.
                        package var url: Swift.String
                        /// Creates a new `ownerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatar_url:
                        ///   - events_url:
                        ///   - followers_url:
                        ///   - following_url:
                        ///   - gists_url:
                        ///   - gravatar_id:
                        ///   - html_url:
                        ///   - id:
                        ///   - node_id:
                        ///   - login:
                        ///   - organizations_url:
                        ///   - received_events_url:
                        ///   - repos_url:
                        ///   - site_admin:
                        ///   - starred_url:
                        ///   - subscriptions_url:
                        ///   - _type:
                        ///   - url:
                        package init(
                            avatar_url: Swift.String,
                            events_url: Swift.String,
                            followers_url: Swift.String,
                            following_url: Swift.String,
                            gists_url: Swift.String,
                            gravatar_id: Swift.String? = nil,
                            html_url: Swift.String,
                            id: Swift.Int,
                            node_id: Swift.String,
                            login: Swift.String,
                            organizations_url: Swift.String,
                            received_events_url: Swift.String,
                            repos_url: Swift.String,
                            site_admin: Swift.Bool,
                            starred_url: Swift.String,
                            subscriptions_url: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatar_url = avatar_url
                            self.events_url = events_url
                            self.followers_url = followers_url
                            self.following_url = following_url
                            self.gists_url = gists_url
                            self.gravatar_id = gravatar_id
                            self.html_url = html_url
                            self.id = id
                            self.node_id = node_id
                            self.login = login
                            self.organizations_url = organizations_url
                            self.received_events_url = received_events_url
                            self.repos_url = repos_url
                            self.site_admin = site_admin
                            self.starred_url = starred_url
                            self.subscriptions_url = subscriptions_url
                            self._type = _type
                            self.url = url
                        }
                        package enum CodingKeys: String, CodingKey {
                            case avatar_url
                            case events_url
                            case followers_url
                            case following_url
                            case gists_url
                            case gravatar_id
                            case html_url
                            case id
                            case node_id
                            case login
                            case organizations_url
                            case received_events_url
                            case repos_url
                            case site_admin
                            case starred_url
                            case subscriptions_url
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    package var owner: Components.Schemas.pull_request.headPayload.repoPayload.ownerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/private`.
                    package var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pulls_url`.
                    package var pulls_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/releases_url`.
                    package var releases_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_url`.
                    package var stargazers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/statuses_url`.
                    package var statuses_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscribers_url`.
                    package var subscribers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscription_url`.
                    package var subscription_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/tags_url`.
                    package var tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/teams_url`.
                    package var teams_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/trees_url`.
                    package var trees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/url`.
                    package var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/clone_url`.
                    package var clone_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/default_branch`.
                    package var default_branch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks`.
                    package var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_count`.
                    package var forks_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_url`.
                    package var git_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_downloads`.
                    package var has_downloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_issues`.
                    package var has_issues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_projects`.
                    package var has_projects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_wiki`.
                    package var has_wiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_pages`.
                    package var has_pages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_discussions`.
                    package var has_discussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/homepage`.
                    package var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/language`.
                    package var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/master_branch`.
                    package var master_branch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archived`.
                    package var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/disabled`.
                    package var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/visibility`.
                    package var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/mirror_url`.
                    package var mirror_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues`.
                    package var open_issues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues_count`.
                    package var open_issues_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    package struct permissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/admin`.
                        package var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/maintain`.
                        package var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/push`.
                        package var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/triage`.
                        package var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/pull`.
                        package var pull: Swift.Bool
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        package init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        package enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    package var permissions: Components.Schemas.pull_request.headPayload.repoPayload.permissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/temp_clone_token`.
                    package var temp_clone_token: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_merge_commit`.
                    package var allow_merge_commit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_squash_merge`.
                    package var allow_squash_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_rebase_merge`.
                    package var allow_rebase_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    package struct licensePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/key`.
                        package var key: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/name`.
                        package var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/url`.
                        package var url: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/spdx_id`.
                        package var spdx_id: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/node_id`.
                        package var node_id: Swift.String?
                        /// Creates a new `licensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - url:
                        ///   - spdx_id:
                        ///   - node_id:
                        package init(
                            key: Swift.String? = nil,
                            name: Swift.String? = nil,
                            url: Swift.String? = nil,
                            spdx_id: Swift.String? = nil,
                            node_id: Swift.String? = nil
                        ) {
                            self.key = key
                            self.name = name
                            self.url = url
                            self.spdx_id = spdx_id
                            self.node_id = node_id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case url
                            case spdx_id
                            case node_id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    package var license: Components.Schemas.pull_request.headPayload.repoPayload.licensePayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pushed_at`.
                    package var pushed_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/size`.
                    package var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/ssh_url`.
                    package var ssh_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_count`.
                    package var stargazers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/svn_url`.
                    package var svn_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/topics`.
                    package var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers`.
                    package var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers_count`.
                    package var watchers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/created_at`.
                    package var created_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/updated_at`.
                    package var updated_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_forking`.
                    package var allow_forking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/is_template`.
                    package var is_template: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/web_commit_signoff_required`.
                    package var web_commit_signoff_required: Swift.Bool?
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archive_url:
                    ///   - assignees_url:
                    ///   - blobs_url:
                    ///   - branches_url:
                    ///   - collaborators_url:
                    ///   - comments_url:
                    ///   - commits_url:
                    ///   - compare_url:
                    ///   - contents_url:
                    ///   - contributors_url:
                    ///   - deployments_url:
                    ///   - description:
                    ///   - downloads_url:
                    ///   - events_url:
                    ///   - fork:
                    ///   - forks_url:
                    ///   - full_name:
                    ///   - git_commits_url:
                    ///   - git_refs_url:
                    ///   - git_tags_url:
                    ///   - hooks_url:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - issue_comment_url:
                    ///   - issue_events_url:
                    ///   - issues_url:
                    ///   - keys_url:
                    ///   - labels_url:
                    ///   - languages_url:
                    ///   - merges_url:
                    ///   - milestones_url:
                    ///   - name:
                    ///   - notifications_url:
                    ///   - owner:
                    ///   - _private:
                    ///   - pulls_url:
                    ///   - releases_url:
                    ///   - stargazers_url:
                    ///   - statuses_url:
                    ///   - subscribers_url:
                    ///   - subscription_url:
                    ///   - tags_url:
                    ///   - teams_url:
                    ///   - trees_url:
                    ///   - url:
                    ///   - clone_url:
                    ///   - default_branch:
                    ///   - forks:
                    ///   - forks_count:
                    ///   - git_url:
                    ///   - has_downloads:
                    ///   - has_issues:
                    ///   - has_projects:
                    ///   - has_wiki:
                    ///   - has_pages:
                    ///   - has_discussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - master_branch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirror_url:
                    ///   - open_issues:
                    ///   - open_issues_count:
                    ///   - permissions:
                    ///   - temp_clone_token:
                    ///   - allow_merge_commit:
                    ///   - allow_squash_merge:
                    ///   - allow_rebase_merge:
                    ///   - license:
                    ///   - pushed_at:
                    ///   - size:
                    ///   - ssh_url:
                    ///   - stargazers_count:
                    ///   - svn_url:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchers_count:
                    ///   - created_at:
                    ///   - updated_at:
                    ///   - allow_forking:
                    ///   - is_template:
                    ///   - web_commit_signoff_required:
                    package init(
                        archive_url: Swift.String,
                        assignees_url: Swift.String,
                        blobs_url: Swift.String,
                        branches_url: Swift.String,
                        collaborators_url: Swift.String,
                        comments_url: Swift.String,
                        commits_url: Swift.String,
                        compare_url: Swift.String,
                        contents_url: Swift.String,
                        contributors_url: Swift.String,
                        deployments_url: Swift.String,
                        description: Swift.String? = nil,
                        downloads_url: Swift.String,
                        events_url: Swift.String,
                        fork: Swift.Bool,
                        forks_url: Swift.String,
                        full_name: Swift.String,
                        git_commits_url: Swift.String,
                        git_refs_url: Swift.String,
                        git_tags_url: Swift.String,
                        hooks_url: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        issue_comment_url: Swift.String,
                        issue_events_url: Swift.String,
                        issues_url: Swift.String,
                        keys_url: Swift.String,
                        labels_url: Swift.String,
                        languages_url: Swift.String,
                        merges_url: Swift.String,
                        milestones_url: Swift.String,
                        name: Swift.String,
                        notifications_url: Swift.String,
                        owner: Components.Schemas.pull_request.headPayload.repoPayload.ownerPayload,
                        _private: Swift.Bool,
                        pulls_url: Swift.String,
                        releases_url: Swift.String,
                        stargazers_url: Swift.String,
                        statuses_url: Swift.String,
                        subscribers_url: Swift.String,
                        subscription_url: Swift.String,
                        tags_url: Swift.String,
                        teams_url: Swift.String,
                        trees_url: Swift.String,
                        url: Swift.String,
                        clone_url: Swift.String,
                        default_branch: Swift.String,
                        forks: Swift.Int,
                        forks_count: Swift.Int,
                        git_url: Swift.String,
                        has_downloads: Swift.Bool,
                        has_issues: Swift.Bool,
                        has_projects: Swift.Bool,
                        has_wiki: Swift.Bool,
                        has_pages: Swift.Bool,
                        has_discussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        master_branch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirror_url: Swift.String? = nil,
                        open_issues: Swift.Int,
                        open_issues_count: Swift.Int,
                        permissions: Components.Schemas.pull_request.headPayload.repoPayload.permissionsPayload? = nil,
                        temp_clone_token: Swift.String? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        license: Components.Schemas.pull_request.headPayload.repoPayload.licensePayload? = nil,
                        pushed_at: Foundation.Date,
                        size: Swift.Int,
                        ssh_url: Swift.String,
                        stargazers_count: Swift.Int,
                        svn_url: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchers_count: Swift.Int,
                        created_at: Foundation.Date,
                        updated_at: Foundation.Date,
                        allow_forking: Swift.Bool? = nil,
                        is_template: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil
                    ) {
                        self.archive_url = archive_url
                        self.assignees_url = assignees_url
                        self.blobs_url = blobs_url
                        self.branches_url = branches_url
                        self.collaborators_url = collaborators_url
                        self.comments_url = comments_url
                        self.commits_url = commits_url
                        self.compare_url = compare_url
                        self.contents_url = contents_url
                        self.contributors_url = contributors_url
                        self.deployments_url = deployments_url
                        self.description = description
                        self.downloads_url = downloads_url
                        self.events_url = events_url
                        self.fork = fork
                        self.forks_url = forks_url
                        self.full_name = full_name
                        self.git_commits_url = git_commits_url
                        self.git_refs_url = git_refs_url
                        self.git_tags_url = git_tags_url
                        self.hooks_url = hooks_url
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.issue_comment_url = issue_comment_url
                        self.issue_events_url = issue_events_url
                        self.issues_url = issues_url
                        self.keys_url = keys_url
                        self.labels_url = labels_url
                        self.languages_url = languages_url
                        self.merges_url = merges_url
                        self.milestones_url = milestones_url
                        self.name = name
                        self.notifications_url = notifications_url
                        self.owner = owner
                        self._private = _private
                        self.pulls_url = pulls_url
                        self.releases_url = releases_url
                        self.stargazers_url = stargazers_url
                        self.statuses_url = statuses_url
                        self.subscribers_url = subscribers_url
                        self.subscription_url = subscription_url
                        self.tags_url = tags_url
                        self.teams_url = teams_url
                        self.trees_url = trees_url
                        self.url = url
                        self.clone_url = clone_url
                        self.default_branch = default_branch
                        self.forks = forks
                        self.forks_count = forks_count
                        self.git_url = git_url
                        self.has_downloads = has_downloads
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_pages = has_pages
                        self.has_discussions = has_discussions
                        self.homepage = homepage
                        self.language = language
                        self.master_branch = master_branch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirror_url = mirror_url
                        self.open_issues = open_issues
                        self.open_issues_count = open_issues_count
                        self.permissions = permissions
                        self.temp_clone_token = temp_clone_token
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_rebase_merge = allow_rebase_merge
                        self.license = license
                        self.pushed_at = pushed_at
                        self.size = size
                        self.ssh_url = ssh_url
                        self.stargazers_count = stargazers_count
                        self.svn_url = svn_url
                        self.topics = topics
                        self.watchers = watchers
                        self.watchers_count = watchers_count
                        self.created_at = created_at
                        self.updated_at = updated_at
                        self.allow_forking = allow_forking
                        self.is_template = is_template
                        self.web_commit_signoff_required = web_commit_signoff_required
                    }
                    package enum CodingKeys: String, CodingKey {
                        case archive_url
                        case assignees_url
                        case blobs_url
                        case branches_url
                        case collaborators_url
                        case comments_url
                        case commits_url
                        case compare_url
                        case contents_url
                        case contributors_url
                        case deployments_url
                        case description
                        case downloads_url
                        case events_url
                        case fork
                        case forks_url
                        case full_name
                        case git_commits_url
                        case git_refs_url
                        case git_tags_url
                        case hooks_url
                        case html_url
                        case id
                        case node_id
                        case issue_comment_url
                        case issue_events_url
                        case issues_url
                        case keys_url
                        case labels_url
                        case languages_url
                        case merges_url
                        case milestones_url
                        case name
                        case notifications_url
                        case owner
                        case _private = "private"
                        case pulls_url
                        case releases_url
                        case stargazers_url
                        case statuses_url
                        case subscribers_url
                        case subscription_url
                        case tags_url
                        case teams_url
                        case trees_url
                        case url
                        case clone_url
                        case default_branch
                        case forks
                        case forks_count
                        case git_url
                        case has_downloads
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_pages
                        case has_discussions
                        case homepage
                        case language
                        case master_branch
                        case archived
                        case disabled
                        case visibility
                        case mirror_url
                        case open_issues
                        case open_issues_count
                        case permissions
                        case temp_clone_token
                        case allow_merge_commit
                        case allow_squash_merge
                        case allow_rebase_merge
                        case license
                        case pushed_at
                        case size
                        case ssh_url
                        case stargazers_count
                        case svn_url
                        case topics
                        case watchers
                        case watchers_count
                        case created_at
                        case updated_at
                        case allow_forking
                        case is_template
                        case web_commit_signoff_required
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                package var repo: Components.Schemas.pull_request.headPayload.repoPayload?
                /// - Remark: Generated from `#/components/schemas/pull-request/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                package struct userPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/avatar_url`.
                    package var avatar_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/events_url`.
                    package var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/followers_url`.
                    package var followers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/following_url`.
                    package var following_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gists_url`.
                    package var gists_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gravatar_id`.
                    package var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/html_url`.
                    package var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/node_id`.
                    package var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/login`.
                    package var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/organizations_url`.
                    package var organizations_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/received_events_url`.
                    package var received_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/repos_url`.
                    package var repos_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/site_admin`.
                    package var site_admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/starred_url`.
                    package var starred_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/subscriptions_url`.
                    package var subscriptions_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/type`.
                    package var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/url`.
                    package var url: Swift.String
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatar_url:
                    ///   - events_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - gravatar_id:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - login:
                    ///   - organizations_url:
                    ///   - received_events_url:
                    ///   - repos_url:
                    ///   - site_admin:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - _type:
                    ///   - url:
                    package init(
                        avatar_url: Swift.String,
                        events_url: Swift.String,
                        followers_url: Swift.String,
                        following_url: Swift.String,
                        gists_url: Swift.String,
                        gravatar_id: Swift.String? = nil,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        login: Swift.String,
                        organizations_url: Swift.String,
                        received_events_url: Swift.String,
                        repos_url: Swift.String,
                        site_admin: Swift.Bool,
                        starred_url: Swift.String,
                        subscriptions_url: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatar_url = avatar_url
                        self.events_url = events_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.gravatar_id = gravatar_id
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.login = login
                        self.organizations_url = organizations_url
                        self.received_events_url = received_events_url
                        self.repos_url = repos_url
                        self.site_admin = site_admin
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self._type = _type
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case avatar_url
                        case events_url
                        case followers_url
                        case following_url
                        case gists_url
                        case gravatar_id
                        case html_url
                        case id
                        case node_id
                        case login
                        case organizations_url
                        case received_events_url
                        case repos_url
                        case site_admin
                        case starred_url
                        case subscriptions_url
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                package var user: Components.Schemas.pull_request.headPayload.userPayload
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.pull_request.headPayload.repoPayload? = nil,
                    sha: Swift.String,
                    user: Components.Schemas.pull_request.headPayload.userPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package var head: Components.Schemas.pull_request.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                package struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archive_url`.
                    package var archive_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/assignees_url`.
                    package var assignees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/blobs_url`.
                    package var blobs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/branches_url`.
                    package var branches_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/collaborators_url`.
                    package var collaborators_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/comments_url`.
                    package var comments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/commits_url`.
                    package var commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/compare_url`.
                    package var compare_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contents_url`.
                    package var contents_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contributors_url`.
                    package var contributors_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/deployments_url`.
                    package var deployments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/downloads_url`.
                    package var downloads_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/events_url`.
                    package var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/fork`.
                    package var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_url`.
                    package var forks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/full_name`.
                    package var full_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_commits_url`.
                    package var git_commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_refs_url`.
                    package var git_refs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_tags_url`.
                    package var git_tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/hooks_url`.
                    package var hooks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/html_url`.
                    package var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/is_template`.
                    package var is_template: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/node_id`.
                    package var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_comment_url`.
                    package var issue_comment_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_events_url`.
                    package var issue_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issues_url`.
                    package var issues_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/keys_url`.
                    package var keys_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/labels_url`.
                    package var labels_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/languages_url`.
                    package var languages_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/merges_url`.
                    package var merges_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/milestones_url`.
                    package var milestones_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/notifications_url`.
                    package var notifications_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    package struct ownerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/avatar_url`.
                        package var avatar_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/events_url`.
                        package var events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/followers_url`.
                        package var followers_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/following_url`.
                        package var following_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gists_url`.
                        package var gists_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gravatar_id`.
                        package var gravatar_id: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/html_url`.
                        package var html_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/id`.
                        package var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/node_id`.
                        package var node_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/login`.
                        package var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/organizations_url`.
                        package var organizations_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/received_events_url`.
                        package var received_events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/repos_url`.
                        package var repos_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/site_admin`.
                        package var site_admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/starred_url`.
                        package var starred_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/subscriptions_url`.
                        package var subscriptions_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/type`.
                        package var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/url`.
                        package var url: Swift.String
                        /// Creates a new `ownerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatar_url:
                        ///   - events_url:
                        ///   - followers_url:
                        ///   - following_url:
                        ///   - gists_url:
                        ///   - gravatar_id:
                        ///   - html_url:
                        ///   - id:
                        ///   - node_id:
                        ///   - login:
                        ///   - organizations_url:
                        ///   - received_events_url:
                        ///   - repos_url:
                        ///   - site_admin:
                        ///   - starred_url:
                        ///   - subscriptions_url:
                        ///   - _type:
                        ///   - url:
                        package init(
                            avatar_url: Swift.String,
                            events_url: Swift.String,
                            followers_url: Swift.String,
                            following_url: Swift.String,
                            gists_url: Swift.String,
                            gravatar_id: Swift.String? = nil,
                            html_url: Swift.String,
                            id: Swift.Int,
                            node_id: Swift.String,
                            login: Swift.String,
                            organizations_url: Swift.String,
                            received_events_url: Swift.String,
                            repos_url: Swift.String,
                            site_admin: Swift.Bool,
                            starred_url: Swift.String,
                            subscriptions_url: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatar_url = avatar_url
                            self.events_url = events_url
                            self.followers_url = followers_url
                            self.following_url = following_url
                            self.gists_url = gists_url
                            self.gravatar_id = gravatar_id
                            self.html_url = html_url
                            self.id = id
                            self.node_id = node_id
                            self.login = login
                            self.organizations_url = organizations_url
                            self.received_events_url = received_events_url
                            self.repos_url = repos_url
                            self.site_admin = site_admin
                            self.starred_url = starred_url
                            self.subscriptions_url = subscriptions_url
                            self._type = _type
                            self.url = url
                        }
                        package enum CodingKeys: String, CodingKey {
                            case avatar_url
                            case events_url
                            case followers_url
                            case following_url
                            case gists_url
                            case gravatar_id
                            case html_url
                            case id
                            case node_id
                            case login
                            case organizations_url
                            case received_events_url
                            case repos_url
                            case site_admin
                            case starred_url
                            case subscriptions_url
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    package var owner: Components.Schemas.pull_request.basePayload.repoPayload.ownerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/private`.
                    package var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pulls_url`.
                    package var pulls_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/releases_url`.
                    package var releases_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_url`.
                    package var stargazers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/statuses_url`.
                    package var statuses_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscribers_url`.
                    package var subscribers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscription_url`.
                    package var subscription_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/tags_url`.
                    package var tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/teams_url`.
                    package var teams_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/trees_url`.
                    package var trees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/url`.
                    package var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/clone_url`.
                    package var clone_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/default_branch`.
                    package var default_branch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks`.
                    package var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_count`.
                    package var forks_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_url`.
                    package var git_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_downloads`.
                    package var has_downloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_issues`.
                    package var has_issues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_projects`.
                    package var has_projects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_wiki`.
                    package var has_wiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_pages`.
                    package var has_pages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_discussions`.
                    package var has_discussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/homepage`.
                    package var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/language`.
                    package var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/master_branch`.
                    package var master_branch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archived`.
                    package var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/disabled`.
                    package var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/visibility`.
                    package var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/mirror_url`.
                    package var mirror_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues`.
                    package var open_issues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues_count`.
                    package var open_issues_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    package struct permissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/admin`.
                        package var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/maintain`.
                        package var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/push`.
                        package var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/triage`.
                        package var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/pull`.
                        package var pull: Swift.Bool
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        package init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        package enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    package var permissions: Components.Schemas.pull_request.basePayload.repoPayload.permissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/temp_clone_token`.
                    package var temp_clone_token: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_merge_commit`.
                    package var allow_merge_commit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_squash_merge`.
                    package var allow_squash_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_rebase_merge`.
                    package var allow_rebase_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/license`.
                    package var license: Components.Schemas.nullable_license_simple?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pushed_at`.
                    package var pushed_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/size`.
                    package var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/ssh_url`.
                    package var ssh_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_count`.
                    package var stargazers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/svn_url`.
                    package var svn_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/topics`.
                    package var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers`.
                    package var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers_count`.
                    package var watchers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/created_at`.
                    package var created_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/updated_at`.
                    package var updated_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_forking`.
                    package var allow_forking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/web_commit_signoff_required`.
                    package var web_commit_signoff_required: Swift.Bool?
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archive_url:
                    ///   - assignees_url:
                    ///   - blobs_url:
                    ///   - branches_url:
                    ///   - collaborators_url:
                    ///   - comments_url:
                    ///   - commits_url:
                    ///   - compare_url:
                    ///   - contents_url:
                    ///   - contributors_url:
                    ///   - deployments_url:
                    ///   - description:
                    ///   - downloads_url:
                    ///   - events_url:
                    ///   - fork:
                    ///   - forks_url:
                    ///   - full_name:
                    ///   - git_commits_url:
                    ///   - git_refs_url:
                    ///   - git_tags_url:
                    ///   - hooks_url:
                    ///   - html_url:
                    ///   - id:
                    ///   - is_template:
                    ///   - node_id:
                    ///   - issue_comment_url:
                    ///   - issue_events_url:
                    ///   - issues_url:
                    ///   - keys_url:
                    ///   - labels_url:
                    ///   - languages_url:
                    ///   - merges_url:
                    ///   - milestones_url:
                    ///   - name:
                    ///   - notifications_url:
                    ///   - owner:
                    ///   - _private:
                    ///   - pulls_url:
                    ///   - releases_url:
                    ///   - stargazers_url:
                    ///   - statuses_url:
                    ///   - subscribers_url:
                    ///   - subscription_url:
                    ///   - tags_url:
                    ///   - teams_url:
                    ///   - trees_url:
                    ///   - url:
                    ///   - clone_url:
                    ///   - default_branch:
                    ///   - forks:
                    ///   - forks_count:
                    ///   - git_url:
                    ///   - has_downloads:
                    ///   - has_issues:
                    ///   - has_projects:
                    ///   - has_wiki:
                    ///   - has_pages:
                    ///   - has_discussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - master_branch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirror_url:
                    ///   - open_issues:
                    ///   - open_issues_count:
                    ///   - permissions:
                    ///   - temp_clone_token:
                    ///   - allow_merge_commit:
                    ///   - allow_squash_merge:
                    ///   - allow_rebase_merge:
                    ///   - license:
                    ///   - pushed_at:
                    ///   - size:
                    ///   - ssh_url:
                    ///   - stargazers_count:
                    ///   - svn_url:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchers_count:
                    ///   - created_at:
                    ///   - updated_at:
                    ///   - allow_forking:
                    ///   - web_commit_signoff_required:
                    package init(
                        archive_url: Swift.String,
                        assignees_url: Swift.String,
                        blobs_url: Swift.String,
                        branches_url: Swift.String,
                        collaborators_url: Swift.String,
                        comments_url: Swift.String,
                        commits_url: Swift.String,
                        compare_url: Swift.String,
                        contents_url: Swift.String,
                        contributors_url: Swift.String,
                        deployments_url: Swift.String,
                        description: Swift.String? = nil,
                        downloads_url: Swift.String,
                        events_url: Swift.String,
                        fork: Swift.Bool,
                        forks_url: Swift.String,
                        full_name: Swift.String,
                        git_commits_url: Swift.String,
                        git_refs_url: Swift.String,
                        git_tags_url: Swift.String,
                        hooks_url: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        is_template: Swift.Bool? = nil,
                        node_id: Swift.String,
                        issue_comment_url: Swift.String,
                        issue_events_url: Swift.String,
                        issues_url: Swift.String,
                        keys_url: Swift.String,
                        labels_url: Swift.String,
                        languages_url: Swift.String,
                        merges_url: Swift.String,
                        milestones_url: Swift.String,
                        name: Swift.String,
                        notifications_url: Swift.String,
                        owner: Components.Schemas.pull_request.basePayload.repoPayload.ownerPayload,
                        _private: Swift.Bool,
                        pulls_url: Swift.String,
                        releases_url: Swift.String,
                        stargazers_url: Swift.String,
                        statuses_url: Swift.String,
                        subscribers_url: Swift.String,
                        subscription_url: Swift.String,
                        tags_url: Swift.String,
                        teams_url: Swift.String,
                        trees_url: Swift.String,
                        url: Swift.String,
                        clone_url: Swift.String,
                        default_branch: Swift.String,
                        forks: Swift.Int,
                        forks_count: Swift.Int,
                        git_url: Swift.String,
                        has_downloads: Swift.Bool,
                        has_issues: Swift.Bool,
                        has_projects: Swift.Bool,
                        has_wiki: Swift.Bool,
                        has_pages: Swift.Bool,
                        has_discussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        master_branch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirror_url: Swift.String? = nil,
                        open_issues: Swift.Int,
                        open_issues_count: Swift.Int,
                        permissions: Components.Schemas.pull_request.basePayload.repoPayload.permissionsPayload? = nil,
                        temp_clone_token: Swift.String? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        license: Components.Schemas.nullable_license_simple? = nil,
                        pushed_at: Foundation.Date,
                        size: Swift.Int,
                        ssh_url: Swift.String,
                        stargazers_count: Swift.Int,
                        svn_url: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchers_count: Swift.Int,
                        created_at: Foundation.Date,
                        updated_at: Foundation.Date,
                        allow_forking: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil
                    ) {
                        self.archive_url = archive_url
                        self.assignees_url = assignees_url
                        self.blobs_url = blobs_url
                        self.branches_url = branches_url
                        self.collaborators_url = collaborators_url
                        self.comments_url = comments_url
                        self.commits_url = commits_url
                        self.compare_url = compare_url
                        self.contents_url = contents_url
                        self.contributors_url = contributors_url
                        self.deployments_url = deployments_url
                        self.description = description
                        self.downloads_url = downloads_url
                        self.events_url = events_url
                        self.fork = fork
                        self.forks_url = forks_url
                        self.full_name = full_name
                        self.git_commits_url = git_commits_url
                        self.git_refs_url = git_refs_url
                        self.git_tags_url = git_tags_url
                        self.hooks_url = hooks_url
                        self.html_url = html_url
                        self.id = id
                        self.is_template = is_template
                        self.node_id = node_id
                        self.issue_comment_url = issue_comment_url
                        self.issue_events_url = issue_events_url
                        self.issues_url = issues_url
                        self.keys_url = keys_url
                        self.labels_url = labels_url
                        self.languages_url = languages_url
                        self.merges_url = merges_url
                        self.milestones_url = milestones_url
                        self.name = name
                        self.notifications_url = notifications_url
                        self.owner = owner
                        self._private = _private
                        self.pulls_url = pulls_url
                        self.releases_url = releases_url
                        self.stargazers_url = stargazers_url
                        self.statuses_url = statuses_url
                        self.subscribers_url = subscribers_url
                        self.subscription_url = subscription_url
                        self.tags_url = tags_url
                        self.teams_url = teams_url
                        self.trees_url = trees_url
                        self.url = url
                        self.clone_url = clone_url
                        self.default_branch = default_branch
                        self.forks = forks
                        self.forks_count = forks_count
                        self.git_url = git_url
                        self.has_downloads = has_downloads
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_pages = has_pages
                        self.has_discussions = has_discussions
                        self.homepage = homepage
                        self.language = language
                        self.master_branch = master_branch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirror_url = mirror_url
                        self.open_issues = open_issues
                        self.open_issues_count = open_issues_count
                        self.permissions = permissions
                        self.temp_clone_token = temp_clone_token
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_rebase_merge = allow_rebase_merge
                        self.license = license
                        self.pushed_at = pushed_at
                        self.size = size
                        self.ssh_url = ssh_url
                        self.stargazers_count = stargazers_count
                        self.svn_url = svn_url
                        self.topics = topics
                        self.watchers = watchers
                        self.watchers_count = watchers_count
                        self.created_at = created_at
                        self.updated_at = updated_at
                        self.allow_forking = allow_forking
                        self.web_commit_signoff_required = web_commit_signoff_required
                    }
                    package enum CodingKeys: String, CodingKey {
                        case archive_url
                        case assignees_url
                        case blobs_url
                        case branches_url
                        case collaborators_url
                        case comments_url
                        case commits_url
                        case compare_url
                        case contents_url
                        case contributors_url
                        case deployments_url
                        case description
                        case downloads_url
                        case events_url
                        case fork
                        case forks_url
                        case full_name
                        case git_commits_url
                        case git_refs_url
                        case git_tags_url
                        case hooks_url
                        case html_url
                        case id
                        case is_template
                        case node_id
                        case issue_comment_url
                        case issue_events_url
                        case issues_url
                        case keys_url
                        case labels_url
                        case languages_url
                        case merges_url
                        case milestones_url
                        case name
                        case notifications_url
                        case owner
                        case _private = "private"
                        case pulls_url
                        case releases_url
                        case stargazers_url
                        case statuses_url
                        case subscribers_url
                        case subscription_url
                        case tags_url
                        case teams_url
                        case trees_url
                        case url
                        case clone_url
                        case default_branch
                        case forks
                        case forks_count
                        case git_url
                        case has_downloads
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_pages
                        case has_discussions
                        case homepage
                        case language
                        case master_branch
                        case archived
                        case disabled
                        case visibility
                        case mirror_url
                        case open_issues
                        case open_issues_count
                        case permissions
                        case temp_clone_token
                        case allow_merge_commit
                        case allow_squash_merge
                        case allow_rebase_merge
                        case license
                        case pushed_at
                        case size
                        case ssh_url
                        case stargazers_count
                        case svn_url
                        case topics
                        case watchers
                        case watchers_count
                        case created_at
                        case updated_at
                        case allow_forking
                        case web_commit_signoff_required
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                package var repo: Components.Schemas.pull_request.basePayload.repoPayload
                /// - Remark: Generated from `#/components/schemas/pull-request/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                package struct userPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/avatar_url`.
                    package var avatar_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/events_url`.
                    package var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/followers_url`.
                    package var followers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/following_url`.
                    package var following_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gists_url`.
                    package var gists_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gravatar_id`.
                    package var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/html_url`.
                    package var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/node_id`.
                    package var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/login`.
                    package var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/organizations_url`.
                    package var organizations_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/received_events_url`.
                    package var received_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/repos_url`.
                    package var repos_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/site_admin`.
                    package var site_admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/starred_url`.
                    package var starred_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/subscriptions_url`.
                    package var subscriptions_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/type`.
                    package var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/url`.
                    package var url: Swift.String
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatar_url:
                    ///   - events_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - gravatar_id:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - login:
                    ///   - organizations_url:
                    ///   - received_events_url:
                    ///   - repos_url:
                    ///   - site_admin:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - _type:
                    ///   - url:
                    package init(
                        avatar_url: Swift.String,
                        events_url: Swift.String,
                        followers_url: Swift.String,
                        following_url: Swift.String,
                        gists_url: Swift.String,
                        gravatar_id: Swift.String? = nil,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        login: Swift.String,
                        organizations_url: Swift.String,
                        received_events_url: Swift.String,
                        repos_url: Swift.String,
                        site_admin: Swift.Bool,
                        starred_url: Swift.String,
                        subscriptions_url: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatar_url = avatar_url
                        self.events_url = events_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.gravatar_id = gravatar_id
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.login = login
                        self.organizations_url = organizations_url
                        self.received_events_url = received_events_url
                        self.repos_url = repos_url
                        self.site_admin = site_admin
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self._type = _type
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case avatar_url
                        case events_url
                        case followers_url
                        case following_url
                        case gists_url
                        case gravatar_id
                        case html_url
                        case id
                        case node_id
                        case login
                        case organizations_url
                        case received_events_url
                        case repos_url
                        case site_admin
                        case starred_url
                        case subscriptions_url
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                package var user: Components.Schemas.pull_request.basePayload.userPayload
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.pull_request.basePayload.repoPayload,
                    sha: Swift.String,
                    user: Components.Schemas.pull_request.basePayload.userPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package var base: Components.Schemas.pull_request.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/comments`.
                package var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/commits`.
                package var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/statuses`.
                package var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/html`.
                package var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/issue`.
                package var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comments`.
                package var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comment`.
                package var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/self`.
                package var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package var _links: Components.Schemas.pull_request._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/author_association`.
            package var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request/auto_merge`.
            package var auto_merge: Components.Schemas.auto_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged`.
            package var merged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable`.
            package var mergeable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/rebaseable`.
            package var rebaseable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable_state`.
            package var mergeable_state: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_by`.
            package var merged_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/comments`.
            package var comments: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments`.
            package var review_comments: Swift.Int?
            /// Indicates whether maintainers can modify the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/maintainer_can_modify`.
            package var maintainer_can_modify: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/commits`.
            package var commits: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/additions`.
            package var additions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/deletions`.
            package var deletions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/changed_files`.
            package var changed_files: Swift.Int?
            /// Creates a new `pull_request`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number: Number uniquely identifying the pull request within its repository.
            ///   - state: State of this Pull Request. Either `open` or `closed`.
            ///   - locked:
            ///   - title: The title of the pull request.
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            ///   - merged:
            ///   - mergeable:
            ///   - rebaseable:
            ///   - mergeable_state:
            ///   - merged_by:
            ///   - comments:
            ///   - review_comments:
            ///   - maintainer_can_modify: Indicates whether maintainers can modify the pull request.
            ///   - commits:
            ///   - additions:
            ///   - deletions:
            ///   - changed_files:
            package init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.pull_request.statePayload,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.simple_user,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_request.labelsPayload,
                milestone: Components.Schemas.nullable_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_simple_user? = nil,
                assignees: [Components.Schemas.simple_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_user]? = nil,
                requested_teams: [Components.Schemas.team_simple]? = nil,
                head: Components.Schemas.pull_request.headPayload,
                base: Components.Schemas.pull_request.basePayload,
                _links: Components.Schemas.pull_request._linksPayload,
                author_association: Components.Schemas.author_association,
                auto_merge: Components.Schemas.auto_merge? = nil,
                draft: Swift.Bool? = nil,
                merged: Swift.Bool? = nil,
                mergeable: Swift.Bool? = nil,
                rebaseable: Swift.Bool? = nil,
                mergeable_state: Swift.String? = nil,
                merged_by: Components.Schemas.nullable_simple_user? = nil,
                comments: Swift.Int? = nil,
                review_comments: Swift.Int? = nil,
                maintainer_can_modify: Swift.Bool? = nil,
                commits: Swift.Int? = nil,
                additions: Swift.Int? = nil,
                deletions: Swift.Int? = nil,
                changed_files: Swift.Int? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
                self.merged = merged
                self.mergeable = mergeable
                self.rebaseable = rebaseable
                self.mergeable_state = mergeable_state
                self.merged_by = merged_by
                self.comments = comments
                self.review_comments = review_comments
                self.maintainer_can_modify = maintainer_can_modify
                self.commits = commits
                self.additions = additions
                self.deletions = deletions
                self.changed_files = changed_files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
                case merged
                case mergeable
                case rebaseable
                case mergeable_state
                case merged_by
                case comments
                case review_comments
                case maintainer_can_modify
                case commits
                case additions
                case deletions
                case changed_files
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        package struct release_asset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            package var browser_download_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            package var node_id: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            package var label: Swift.String?
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                case uploaded = "uploaded"
                case open = "open"
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            package var state: Components.Schemas.release_asset.statePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            package var content_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            package var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            package var download_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            package var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            package var uploader: Components.Schemas.nullable_simple_user?
            /// Creates a new `release_asset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browser_download_url:
            ///   - id:
            ///   - node_id:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - content_type:
            ///   - size:
            ///   - download_count:
            ///   - created_at:
            ///   - updated_at:
            ///   - uploader:
            package init(
                url: Swift.String,
                browser_download_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                label: Swift.String? = nil,
                state: Components.Schemas.release_asset.statePayload,
                content_type: Swift.String,
                size: Swift.Int,
                download_count: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                uploader: Components.Schemas.nullable_simple_user? = nil
            ) {
                self.url = url
                self.browser_download_url = browser_download_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.label = label
                self.state = state
                self.content_type = content_type
                self.size = size
                self.download_count = download_count
                self.created_at = created_at
                self.updated_at = updated_at
                self.uploader = uploader
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case browser_download_url
                case id
                case node_id
                case name
                case label
                case state
                case content_type
                case size
                case download_count
                case created_at
                case updated_at
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        package struct release: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            package var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            package var assets_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            package var upload_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            package var tarball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            package var zipball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            package var node_id: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            package var tag_name: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            package var target_commitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body`.
            package var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            package var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            package var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            package var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            package var published_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/release/author`.
            package var author: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            package var assets: [Components.Schemas.release_asset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            package var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            package var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            package var mentions_count: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            package var discussion_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            package var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - assets_url:
            ///   - upload_url:
            ///   - tarball_url:
            ///   - zipball_url:
            ///   - id:
            ///   - node_id:
            ///   - tag_name: The name of the tag.
            ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - created_at:
            ///   - published_at:
            ///   - author:
            ///   - assets:
            ///   - body_html:
            ///   - body_text:
            ///   - mentions_count:
            ///   - discussion_url: The URL of the release discussion.
            ///   - reactions:
            package init(
                url: Swift.String,
                html_url: Swift.String,
                assets_url: Swift.String,
                upload_url: Swift.String,
                tarball_url: Swift.String? = nil,
                zipball_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                tag_name: Swift.String,
                target_commitish: Swift.String,
                name: Swift.String? = nil,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                created_at: Foundation.Date,
                published_at: Foundation.Date? = nil,
                author: Components.Schemas.simple_user,
                assets: [Components.Schemas.release_asset],
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                mentions_count: Swift.Int? = nil,
                discussion_url: Swift.String? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.assets_url = assets_url
                self.upload_url = upload_url
                self.tarball_url = tarball_url
                self.zipball_url = zipball_url
                self.id = id
                self.node_id = node_id
                self.tag_name = tag_name
                self.target_commitish = target_commitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.created_at = created_at
                self.published_at = published_at
                self.author = author
                self.assets = assets
                self.body_html = body_html
                self.body_text = body_text
                self.mentions_count = mentions_count
                self.discussion_url = discussion_url
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case assets_url
                case upload_url
                case tarball_url
                case zipball_url
                case id
                case node_id
                case tag_name
                case target_commitish
                case name
                case body
                case draft
                case prerelease
                case created_at
                case published_at
                case author
                case assets
                case body_html
                case body_text
                case mentions_count
                case discussion_url
                case reactions
            }
        }
        /// Tag
        ///
        /// - Remark: Generated from `#/components/schemas/tag`.
        package struct tag: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/tag/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/tag/commit/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/tag/commit/url`.
                package var url: Swift.String
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                package init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package var commit: Components.Schemas.tag.commitPayload
            /// - Remark: Generated from `#/components/schemas/tag/zipball_url`.
            package var zipball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/tarball_url`.
            package var tarball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/node_id`.
            package var node_id: Swift.String
            /// Creates a new `tag`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - zipball_url:
            ///   - tarball_url:
            ///   - node_id:
            package init(
                name: Swift.String,
                commit: Components.Schemas.tag.commitPayload,
                zipball_url: Swift.String,
                tarball_url: Swift.String,
                node_id: Swift.String
            ) {
                self.name = name
                self.commit = commit
                self.zipball_url = zipball_url
                self.tarball_url = tarball_url
                self.node_id = node_id
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case commit
                case zipball_url
                case tarball_url
                case node_id
            }
        }
        /// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        package struct simple_installation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            package var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            package var node_id: Swift.String?
            /// Creates a new `simple_installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - node_id: The global node ID of the installation.
            package init(
                id: Swift.Int,
                node_id: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case node_id
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {
        /// The number of results per page (max 100).
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        package typealias per_page = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        package typealias cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        package typealias delivery_id = Swift.Int
        /// Page number of the results to fetch.
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        package typealias page = Swift.Int
        /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        package typealias since = Foundation.Date
        /// The unique identifier of the installation.
        ///
        /// - Remark: Generated from `#/components/parameters/installation-id`.
        package typealias installation_id = Swift.Int
        /// The client ID of the GitHub app.
        ///
        /// - Remark: Generated from `#/components/parameters/client-id`.
        package typealias client_id = Swift.String
        /// - Remark: Generated from `#/components/parameters/app-slug`.
        package typealias app_slug = Swift.String
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        package typealias enterprise = Swift.String
        /// A comma-separated list of states. If specified, only alerts with these states will be returned.
        ///
        /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-states`.
        package typealias dependabot_alert_comma_separated_states = Swift.String
        /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
        ///
        /// Can be: `low`, `medium`, `high`, `critical`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-severities`.
        package typealias dependabot_alert_comma_separated_severities = Swift.String
        /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
        ///
        /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-ecosystems`.
        package typealias dependabot_alert_comma_separated_ecosystems = Swift.String
        /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-packages`.
        package typealias dependabot_alert_comma_separated_packages = Swift.String
        /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
        @frozen package enum dependabot_alert_scope: String, Codable, Hashable, Sendable {
            case development = "development"
            case runtime = "runtime"
        }
        /// The property by which to sort the results.
        /// `created` means when the alert was created.
        /// `updated` means when the alert's state last changed.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
        @frozen package enum dependabot_alert_sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen package enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        package typealias pagination_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        package typealias pagination_after = Swift.String
        /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
        /// This parameter must not be used in combination with `last`.
        /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-first`.
        package typealias pagination_first = Swift.Int
        /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
        /// This parameter must not be used in combination with `first`.
        /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-last`.
        package typealias pagination_last = Swift.Int
        /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
        @frozen package enum secret_scanning_alert_state: String, Codable, Hashable, Sendable {
            case open = "open"
            case resolved = "resolved"
        }
        /// A comma-separated list of secret types to return. By default all secret types are returned.
        /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
        /// for a complete list of secret types.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-secret-type`.
        package typealias secret_scanning_alert_secret_type = Swift.String
        /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-resolution`.
        package typealias secret_scanning_alert_resolution = Swift.String
        /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
        @frozen package enum secret_scanning_alert_sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The unique identifier of the gist.
        ///
        /// - Remark: Generated from `#/components/parameters/gist-id`.
        package typealias gist_id = Swift.String
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        package typealias comment_id = Swift.Int
        /// A list of comma separated label names. Example: `bug,ui,@high`
        ///
        /// - Remark: Generated from `#/components/parameters/labels`.
        package typealias labels = Swift.String
        /// account_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/account-id`.
        package typealias account_id = Swift.Int
        /// The unique identifier of the plan.
        ///
        /// - Remark: Generated from `#/components/parameters/plan-id`.
        package typealias plan_id = Swift.Int
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen package enum sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        package typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        package typealias repo = Swift.String
        /// If `true`, show notifications marked as read.
        ///
        /// - Remark: Generated from `#/components/parameters/all`.
        package typealias all = Swift.Bool
        /// If `true`, only shows notifications in which the user is directly participating or mentioned.
        ///
        /// - Remark: Generated from `#/components/parameters/participating`.
        package typealias participating = Swift.Bool
        /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before`.
        package typealias before = Foundation.Date
        /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
        ///
        /// - Remark: Generated from `#/components/parameters/thread-id`.
        package typealias thread_id = Swift.Int
        /// An organization ID. Only return organizations with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-org`.
        package typealias since_org = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        package typealias org = Swift.String
        /// The unique identifier of the repository.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id`.
        package typealias repository_id = Swift.Int
        /// Unique identifier of the self-hosted runner.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-id`.
        package typealias runner_id = Swift.Int
        /// The name of a self-hosted runner's custom label.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-label-name`.
        package typealias runner_label_name = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        package typealias secret_name = Swift.String
        /// The number of results per page (max 30).
        ///
        /// - Remark: Generated from `#/components/parameters/variables-per-page`.
        package typealias variables_per_page = Swift.Int
        /// The name of the variable.
        ///
        /// - Remark: Generated from `#/components/parameters/variable-name`.
        package typealias variable_name = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        package typealias username = Swift.String
        /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-name`.
        package typealias tool_name = Components.Schemas.code_scanning_analysis_tool_name
        /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-guid`.
        package typealias tool_guid = Components.Schemas.code_scanning_analysis_tool_guid
        /// The unique identifier of the hook.
        ///
        /// - Remark: Generated from `#/components/parameters/hook-id`.
        package typealias hook_id = Swift.Int
        /// The unique identifier of the invitation.
        ///
        /// - Remark: Generated from `#/components/parameters/invitation-id`.
        package typealias invitation_id = Swift.Int
        /// The name of the codespace.
        ///
        /// - Remark: Generated from `#/components/parameters/codespace-name`.
        package typealias codespace_name = Swift.String
        /// The unique identifier of the migration.
        ///
        /// - Remark: Generated from `#/components/parameters/migration-id`.
        package typealias migration_id = Swift.Int
        /// repo_name parameter
        ///
        /// - Remark: Generated from `#/components/parameters/repo-name`.
        package typealias repo_name = Swift.String
        /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
        ///
        /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
        /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        ///
        /// - Remark: Generated from `#/components/parameters/package-visibility`.
        @frozen package enum package_visibility: String, Codable, Hashable, Sendable {
            case _public = "public"
            case _private = "private"
            case _internal = "internal"
        }
        /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        ///
        /// - Remark: Generated from `#/components/parameters/package-type`.
        @frozen package enum package_type: String, Codable, Hashable, Sendable {
            case npm = "npm"
            case maven = "maven"
            case rubygems = "rubygems"
            case docker = "docker"
            case nuget = "nuget"
            case container = "container"
        }
        /// The name of the package.
        ///
        /// - Remark: Generated from `#/components/parameters/package-name`.
        package typealias package_name = Swift.String
        /// Unique identifier of the package version.
        ///
        /// - Remark: Generated from `#/components/parameters/package-version-id`.
        package typealias package_version_id = Swift.Int
        /// The property by which to sort the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
        @frozen package enum personal_access_token_sort: String, Codable, Hashable, Sendable {
            case created_at = "created_at"
        }
        /// A list of owner usernames to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-owner`.
        package typealias personal_access_token_owner = [Swift.String]
        /// The name of the repository to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-repository`.
        package typealias personal_access_token_repository = Swift.String
        /// The permission to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-permission`.
        package typealias personal_access_token_permission = Swift.String
        /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-before`.
        package typealias personal_access_token_before = Foundation.Date
        /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-after`.
        package typealias personal_access_token_after = Foundation.Date
        /// The unique identifier of the fine-grained personal access token.
        ///
        /// - Remark: Generated from `#/components/parameters/fine-grained-personal-access-token-id`.
        package typealias fine_grained_personal_access_token_id = Swift.Int
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-before-org-repo`.
        package typealias secret_scanning_pagination_before_org_repo = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-after-org-repo`.
        package typealias secret_scanning_pagination_after_org_repo = Swift.String
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        package typealias team_slug = Swift.String
        /// The number that identifies the discussion.
        ///
        /// - Remark: Generated from `#/components/parameters/discussion-number`.
        package typealias discussion_number = Swift.Int
        /// The number that identifies the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-number`.
        package typealias comment_number = Swift.Int
        /// The unique identifier of the reaction.
        ///
        /// - Remark: Generated from `#/components/parameters/reaction-id`.
        package typealias reaction_id = Swift.Int
        /// The unique identifier of the project.
        ///
        /// - Remark: Generated from `#/components/parameters/project-id`.
        package typealias project_id = Swift.Int
        /// The security feature to enable or disable.
        ///
        /// - Remark: Generated from `#/components/parameters/security-product`.
        @frozen package enum security_product: String, Codable, Hashable, Sendable {
            case dependency_graph = "dependency_graph"
            case dependabot_alerts = "dependabot_alerts"
            case dependabot_security_updates = "dependabot_security_updates"
            case advanced_security = "advanced_security"
            case code_scanning_default_setup = "code_scanning_default_setup"
            case secret_scanning = "secret_scanning"
            case secret_scanning_push_protection = "secret_scanning_push_protection"
        }
        /// The action to take.
        ///
        /// `enable_all` means to enable the specified security feature for all repositories in the organization.
        /// `disable_all` means to disable the specified security feature for all repositories in the organization.
        ///
        /// - Remark: Generated from `#/components/parameters/org-security-product-enablement`.
        @frozen package enum org_security_product_enablement: String, Codable, Hashable, Sendable {
            case enable_all = "enable_all"
            case disable_all = "disable_all"
        }
        /// The unique identifier of the card.
        ///
        /// - Remark: Generated from `#/components/parameters/card-id`.
        package typealias card_id = Swift.Int
        /// The unique identifier of the column.
        ///
        /// - Remark: Generated from `#/components/parameters/column-id`.
        package typealias column_id = Swift.Int
        /// The unique identifier of the artifact.
        ///
        /// - Remark: Generated from `#/components/parameters/artifact-id`.
        package typealias artifact_id = Swift.Int
        /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-git-ref-full`.
        package typealias actions_cache_git_ref_full = Swift.String
        /// An explicit key or prefix for identifying the cache
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key`.
        package typealias actions_cache_key = Swift.String
        /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-list-sort`.
        @frozen package enum actions_cache_list_sort: String, Codable, Hashable, Sendable {
            case created_at = "created_at"
            case last_accessed_at = "last_accessed_at"
            case size_in_bytes = "size_in_bytes"
        }
        /// A key for identifying the cache.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key-required`.
        package typealias actions_cache_key_required = Swift.String
        /// The unique identifier of the GitHub Actions cache.
        ///
        /// - Remark: Generated from `#/components/parameters/cache-id`.
        package typealias cache_id = Swift.Int
        /// The unique identifier of the job.
        ///
        /// - Remark: Generated from `#/components/parameters/job-id`.
        package typealias job_id = Swift.Int
        /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/actor`.
        package typealias actor = Swift.String
        /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-branch`.
        package typealias workflow_run_branch = Swift.String
        /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        ///
        /// - Remark: Generated from `#/components/parameters/event`.
        package typealias event = Swift.String
        /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
        @frozen package enum workflow_run_status: String, Codable, Hashable, Sendable {
            case completed = "completed"
            case action_required = "action_required"
            case cancelled = "cancelled"
            case failure = "failure"
            case neutral = "neutral"
            case skipped = "skipped"
            case stale = "stale"
            case success = "success"
            case timed_out = "timed_out"
            case in_progress = "in_progress"
            case queued = "queued"
            case requested = "requested"
            case waiting = "waiting"
            case pending = "pending"
        }
        /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
        ///
        /// - Remark: Generated from `#/components/parameters/created`.
        package typealias created = Foundation.Date
        /// If `true` pull requests are omitted from the response (empty array).
        ///
        /// - Remark: Generated from `#/components/parameters/exclude-pull-requests`.
        package typealias exclude_pull_requests = Swift.Bool
        /// Returns workflow runs with the `check_suite_id` that you specify.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-check-suite-id`.
        package typealias workflow_run_check_suite_id = Swift.Int
        /// Only returns workflow runs that are associated with the specified `head_sha`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-head-sha`.
        package typealias workflow_run_head_sha = Swift.String
        /// The unique identifier of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/run-id`.
        package typealias run_id = Swift.Int
        /// The attempt number of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/attempt-number`.
        package typealias attempt_number = Swift.Int
        /// The ID of the workflow. You can also pass the workflow file name as a string.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-id`.
        @frozen package enum workflow_id: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
            case case1(Swift.Int)
            /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
            case case2(Swift.String)
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// The unique identifier of the autolink.
        ///
        /// - Remark: Generated from `#/components/parameters/autolink-id`.
        package typealias autolink_id = Swift.Int
        /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
        ///
        /// - Remark: Generated from `#/components/parameters/branch`.
        package typealias branch = Swift.String
        /// The unique identifier of the check run.
        ///
        /// - Remark: Generated from `#/components/parameters/check-run-id`.
        package typealias check_run_id = Swift.Int
        /// The unique identifier of the check suite.
        ///
        /// - Remark: Generated from `#/components/parameters/check-suite-id`.
        package typealias check_suite_id = Swift.Int
        /// Returns check runs with the specified `name`.
        ///
        /// - Remark: Generated from `#/components/parameters/check-name`.
        package typealias check_name = Swift.String
        /// Returns check runs with the specified `status`.
        ///
        /// - Remark: Generated from `#/components/parameters/status`.
        @frozen package enum status: String, Codable, Hashable, Sendable {
            case queued = "queued"
            case in_progress = "in_progress"
            case completed = "completed"
        }
        /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/git-ref`.
        package typealias git_ref = Components.Schemas.code_scanning_ref
        /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/alert-number`.
        package typealias alert_number = Components.Schemas.alert_number
        /// The SHA of the commit.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-sha`.
        package typealias commit_sha = Swift.String
        /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-ref`.
        package typealias commit_ref = Swift.String
        /// A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-manifests`.
        package typealias dependabot_alert_comma_separated_manifests = Swift.String
        /// The number that identifies a Dependabot alert in its repository.
        /// You can find this at the end of the URL for a Dependabot alert within GitHub,
        /// or in `number` fields in the response from the
        /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-number`.
        package typealias dependabot_alert_number = Components.Schemas.alert_number
        /// The full path, relative to the repository root, of the dependency manifest file.
        ///
        /// - Remark: Generated from `#/components/parameters/manifest-path`.
        package typealias manifest_path = Swift.String
        /// deployment_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/deployment-id`.
        package typealias deployment_id = Swift.Int
        /// The name of the environment.
        ///
        /// - Remark: Generated from `#/components/parameters/environment-name`.
        package typealias environment_name = Swift.String
        /// The unique identifier of the branch policy.
        ///
        /// - Remark: Generated from `#/components/parameters/branch-policy-id`.
        package typealias branch_policy_id = Swift.Int
        /// The unique identifier of the protection rule.
        ///
        /// - Remark: Generated from `#/components/parameters/protection-rule-id`.
        package typealias protection_rule_id = Swift.Int
        /// A user ID. Only return users with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-user`.
        package typealias since_user = Swift.Int
        /// The number that identifies the issue.
        ///
        /// - Remark: Generated from `#/components/parameters/issue-number`.
        package typealias issue_number = Swift.Int
        /// The unique identifier of the key.
        ///
        /// - Remark: Generated from `#/components/parameters/key-id`.
        package typealias key_id = Swift.Int
        /// The number that identifies the milestone.
        ///
        /// - Remark: Generated from `#/components/parameters/milestone-number`.
        package typealias milestone_number = Swift.Int
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        package typealias pull_number = Swift.Int
        /// The unique identifier of the review.
        ///
        /// - Remark: Generated from `#/components/parameters/review-id`.
        package typealias review_id = Swift.Int
        /// The unique identifier of the asset.
        ///
        /// - Remark: Generated from `#/components/parameters/asset-id`.
        package typealias asset_id = Swift.Int
        /// The unique identifier of the release.
        ///
        /// - Remark: Generated from `#/components/parameters/release-id`.
        package typealias release_id = Swift.Int
        /// The GHSA (GitHub Security Advisory) identifier of the advisory.
        ///
        /// - Remark: Generated from `#/components/parameters/ghsa_id`.
        package typealias ghsa_id = Swift.String
        /// The unique identifier of the tag protection.
        ///
        /// - Remark: Generated from `#/components/parameters/tag-protection-id`.
        package typealias tag_protection_id = Swift.Int
        /// The time frame to display results for.
        ///
        /// - Remark: Generated from `#/components/parameters/per`.
        @frozen package enum per: String, Codable, Hashable, Sendable {
            case day = "day"
            case week = "week"
        }
        /// A repository ID. Only return repositories with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo`.
        package typealias since_repo = Swift.Int
        /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        ///
        /// - Remark: Generated from `#/components/parameters/order`.
        @frozen package enum order: String, Codable, Hashable, Sendable {
            case desc = "desc"
            case asc = "asc"
        }
        /// The unique identifier of the team.
        ///
        /// - Remark: Generated from `#/components/parameters/team-id`.
        package typealias team_id = Swift.Int
        /// ID of the Repository to filter on
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id-in-query`.
        package typealias repository_id_in_query = Swift.Int
        /// The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
        ///
        /// - Remark: Generated from `#/components/parameters/export-id`.
        package typealias export_id = Swift.String
        /// The unique identifier of the GPG key.
        ///
        /// - Remark: Generated from `#/components/parameters/gpg-key-id`.
        package typealias gpg_key_id = Swift.Int
        /// Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo-date`.
        package typealias since_repo_date = Foundation.Date
        /// Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before-repo-date`.
        package typealias before_repo_date = Foundation.Date
        /// The unique identifier of the SSH signing key.
        ///
        /// - Remark: Generated from `#/components/parameters/ssh-signing-key-id`.
        package typealias ssh_signing_key_id = Swift.Int
        /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
        ///
        /// - Remark: Generated from `#/components/parameters/sort-starred`.
        @frozen package enum sort_starred: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {
        package struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        package struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_error_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.validation_error_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        package struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        package struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.validation_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        package struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        package struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            package init() {}
        }
        package struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        package struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        package struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    package var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    package var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    package var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    package init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        package struct forbidden_gist: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden_gist/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    package struct blockPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/reason`.
                        package var reason: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/created_at`.
                        package var created_at: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/html_url`.
                        package var html_url: Swift.String?
                        /// Creates a new `blockPayload`.
                        ///
                        /// - Parameters:
                        ///   - reason:
                        ///   - created_at:
                        ///   - html_url:
                        package init(
                            reason: Swift.String? = nil,
                            created_at: Swift.String? = nil,
                            html_url: Swift.String? = nil
                        ) {
                            self.reason = reason
                            self.created_at = created_at
                            self.html_url = html_url
                        }
                        package enum CodingKeys: String, CodingKey {
                            case reason
                            case created_at
                            case html_url
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    package var block: Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/message`.
                    package var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/documentation_url`.
                    package var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - block:
                    ///   - message:
                    ///   - documentation_url:
                    package init(
                        block: Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.block = block
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case block
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/application\/json`.
                case json(Components.Responses.forbidden_gist.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.forbidden_gist.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.forbidden_gist.Body
            /// Creates a new `forbidden_gist`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.forbidden_gist.Body) {
                self.body = body
            }
        }
        package struct moved_permanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.moved_permanently.Body) {
                self.body = body
            }
        }
        package struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
        package struct actions_runner_jitconfig: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/runner`.
                    package var runner: Components.Schemas.runner
                    /// The base64 encoded runner configuration.
                    ///
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/encoded_jit_config`.
                    package var encoded_jit_config: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - runner:
                    ///   - encoded_jit_config: The base64 encoded runner configuration.
                    package init(
                        runner: Components.Schemas.runner,
                        encoded_jit_config: Swift.String
                    ) {
                        self.runner = runner
                        self.encoded_jit_config = encoded_jit_config
                    }
                    package enum CodingKeys: String, CodingKey {
                        case runner
                        case encoded_jit_config
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/application\/json`.
                case json(Components.Responses.actions_runner_jitconfig.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.actions_runner_jitconfig.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.actions_runner_jitconfig.Body
            /// Creates a new `actions_runner_jitconfig`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.actions_runner_jitconfig.Body) {
                self.body = body
            }
        }
        package struct actions_runner_labels: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/total_count`.
                    package var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/labels`.
                    package var labels: [Components.Schemas.runner_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    package init(
                        total_count: Swift.Int,
                        labels: [Components.Schemas.runner_label]
                    ) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    package enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/application\/json`.
                case json(Components.Responses.actions_runner_labels.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.actions_runner_labels.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.actions_runner_labels.Body
            /// Creates a new `actions_runner_labels`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.actions_runner_labels.Body) {
                self.body = body
            }
        }
        package struct actions_runner_labels_readonly: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/total_count`.
                    package var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/labels`.
                    package var labels: [Components.Schemas.runner_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    package init(
                        total_count: Swift.Int,
                        labels: [Components.Schemas.runner_label]
                    ) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    package enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/application\/json`.
                case json(Components.Responses.actions_runner_labels_readonly.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.actions_runner_labels_readonly.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.actions_runner_labels_readonly.Body
            /// Creates a new `actions_runner_labels_readonly`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.actions_runner_labels_readonly.Body) {
                self.body = body
            }
        }
        package struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        package struct package_es_list_error: Sendable, Hashable {
            /// Creates a new `package_es_list_error`.
            package init() {}
        }
        package struct no_content: Sendable, Hashable {
            /// Creates a new `no_content`.
            package init() {}
        }
        package struct gone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/gone/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/gone/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.gone.Body
            /// Creates a new `gone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.gone.Body) {
                self.body = body
            }
        }
        package struct temporary_redirect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/temporary_redirect/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/temporary_redirect/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.temporary_redirect.Body
            /// Creates a new `temporary_redirect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.temporary_redirect.Body) {
                self.body = body
            }
        }
        package struct code_scanning_forbidden_read: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_read/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_read/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.code_scanning_forbidden_read.Body
            /// Creates a new `code_scanning_forbidden_read`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.code_scanning_forbidden_read.Body) {
                self.body = body
            }
        }
        package struct code_scanning_forbidden_write: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_write/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_write/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.code_scanning_forbidden_write.Body
            /// Creates a new `code_scanning_forbidden_write`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.code_scanning_forbidden_write.Body) {
                self.body = body
            }
        }
        package struct found: Sendable, Hashable {
            /// Creates a new `found`.
            package init() {}
        }
        package struct code_scanning_conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_conflict/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_conflict/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.code_scanning_conflict.Body
            /// Creates a new `code_scanning_conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.code_scanning_conflict.Body) {
                self.body = body
            }
        }
        package struct porter_maintenance: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/porter_maintenance/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/porter_maintenance/content/application\/json`.
                case json(Components.Schemas.basic_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.basic_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.porter_maintenance.Body
            /// Creates a new `porter_maintenance`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.porter_maintenance.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        @frozen package enum link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/headers/link/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/headers/link/case2`.
            case case2([Swift.String])
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/headers/content-type`.
        package typealias content_type = Swift.String
        /// - Remark: Generated from `#/components/headers/x-common-marker-version`.
        package typealias x_common_marker_version = Swift.String
        /// - Remark: Generated from `#/components/headers/x-rate-limit-limit`.
        package typealias x_rate_limit_limit = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-remaining`.
        package typealias x_rate_limit_remaining = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-reset`.
        package typealias x_rate_limit_reset = Swift.Int
        /// - Remark: Generated from `#/components/headers/location`.
        package typealias location = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package enum apps_create_installation_access_token {
        package static let id: Swift.String = "apps/create-installation-access-token"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path/installation_id`.
                package var installation_id: Components.Parameters.installation_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                package init(installation_id: Components.Parameters.installation_id) {
                    self.installation_id = installation_id
                }
            }
            package var path: Operations.apps_create_installation_access_token.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_create_installation_access_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_create_installation_access_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.apps_create_installation_access_token.Input.Headers
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// List of repository names that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repositories`.
                    package var repositories: [Swift.String]?
                    /// List of repository IDs that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repository_ids`.
                    package var repository_ids: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/permissions`.
                    package var permissions: Components.Schemas.app_permissions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repositories: List of repository names that the token should have access to
                    ///   - repository_ids: List of repository IDs that the token should have access to
                    ///   - permissions:
                    package init(
                        repositories: [Swift.String]? = nil,
                        repository_ids: [Swift.Int]? = nil,
                        permissions: Components.Schemas.app_permissions? = nil
                    ) {
                        self.repositories = repositories
                        self.repository_ids = repository_ids
                        self.permissions = permissions
                    }
                    package enum CodingKeys: String, CodingKey {
                        case repositories
                        case repository_ids
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/content/application\/json`.
                case json(Operations.apps_create_installation_access_token.Input.Body.jsonPayload)
            }
            package var body: Operations.apps_create_installation_access_token.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.apps_create_installation_access_token.Input.Path,
                headers: Operations.apps_create_installation_access_token.Input.Headers = .init(),
                body: Operations.apps_create_installation_access_token.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.installation_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.installation_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.apps_create_installation_access_token.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.apps_create_installation_access_token.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.apps_create_installation_access_token.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.apps_create_installation_access_token.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    package enum orgs_get {
        package static let id: Swift.String = "orgs/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/path/org`.
                package var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                package init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            package var path: Operations.orgs_get.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.orgs_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.orgs_get.Input.Path,
                headers: Operations.orgs_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.organization_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.orgs_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.orgs_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.orgs_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    package enum projects_get_card {
        package static let id: Swift.String = "projects/get-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/path/card_id`.
                package var card_id: Components.Parameters.card_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - card_id: The unique identifier of the card.
                package init(card_id: Components.Parameters.card_id) {
                    self.card_id = card_id
                }
            }
            package var path: Operations.projects_get_card.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_card.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_card.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_get_card.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_get_card.Input.Path,
                headers: Operations.projects_get_card.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.project_card)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_card {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_get_card.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_get_card.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_get_card.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_get_card.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing project card
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    package enum projects_update_card {
        package static let id: Swift.String = "projects/update-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/path/card_id`.
                package var card_id: Components.Parameters.card_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - card_id: The unique identifier of the card.
                package init(card_id: Components.Parameters.card_id) {
                    self.card_id = card_id
                }
            }
            package var path: Operations.projects_update_card.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update_card.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update_card.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_update_card.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The project card's note
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json/note`.
                    package var note: Swift.String?
                    /// Whether or not the card is archived
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json/archived`.
                    package var archived: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - note: The project card's note
                    ///   - archived: Whether or not the card is archived
                    package init(
                        note: Swift.String? = nil,
                        archived: Swift.Bool? = nil
                    ) {
                        self.note = note
                        self.archived = archived
                    }
                    package enum CodingKeys: String, CodingKey {
                        case note
                        case archived
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.projects_update_card.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_update_card.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_update_card.Input.Path,
                headers: Operations.projects_update_card.Input.Headers = .init(),
                body: Operations.projects_update_card.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.project_card)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_card {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_update_card.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_update_card.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_update_card.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_update_card.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package enum projects_delete_card {
        package static let id: Swift.String = "projects/delete-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path/card_id`.
                package var card_id: Components.Parameters.card_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - card_id: The unique identifier of the card.
                package init(card_id: Components.Parameters.card_id) {
                    self.card_id = card_id
                }
            }
            package var path: Operations.projects_delete_card.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete_card.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete_card.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_delete_card.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_delete_card.Input.Path,
                headers: Operations.projects_delete_card.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.projects_delete_card.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.projects_delete_card.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.projects_delete_card.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_delete_card.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_delete_card.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_delete_card.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.projects_delete_card.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.projects_delete_card.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package enum projects_move_card {
        package static let id: Swift.String = "projects/move-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path/card_id`.
                package var card_id: Components.Parameters.card_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - card_id: The unique identifier of the card.
                package init(card_id: Components.Parameters.card_id) {
                    self.card_id = card_id
                }
            }
            package var path: Operations.projects_move_card.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_move_card.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_move_card.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_move_card.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/position`.
                    package var position: Swift.String
                    /// The unique identifier of the column the card should be moved to
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/column_id`.
                    package var column_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - position: The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///   - column_id: The unique identifier of the column the card should be moved to
                    package init(
                        position: Swift.String,
                        column_id: Swift.Int? = nil
                    ) {
                        self.position = position
                        self.column_id = column_id
                    }
                    package enum CodingKeys: String, CodingKey {
                        case position
                        case column_id
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/content/application\/json`.
                case json(Operations.projects_move_card.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_move_card.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_move_card.Input.Path,
                headers: Operations.projects_move_card.Input.Headers = .init(),
                body: Operations.projects_move_card.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `jsonPayload`.
                        package init() {}
                        package init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/application\/json`.
                    case json(Operations.projects_move_card.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_move_card.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_move_card.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_move_card.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.projects_move_card.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.projects_move_card.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errorsPayload`.
                        package struct errorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errorsPayload/message`.
                            package var message: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errorsPayload/resource`.
                            package var resource: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errorsPayload/field`.
                            package var field: Swift.String?
                            /// Creates a new `errorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            ///   - resource:
                            ///   - field:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil,
                                resource: Swift.String? = nil,
                                field: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                                self.resource = resource
                                self.field = field
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                                case resource
                                case field
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package typealias errorsPayload = [Operations.projects_move_card.Output.Forbidden.Body.jsonPayload.errorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package var errors: Operations.projects_move_card.Output.Forbidden.Body.jsonPayload.errorsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: Operations.projects_move_card.Output.Forbidden.Body.jsonPayload.errorsPayload? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/application\/json`.
                    case json(Operations.projects_move_card.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_move_card.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_move_card.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_move_card.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.projects_move_card.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.projects_move_card.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errorsPayload`.
                        package struct errorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `errorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package typealias errorsPayload = [Operations.projects_move_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package var errors: Operations.projects_move_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: Operations.projects_move_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/application\/json`.
                    case json(Operations.projects_move_card.Output.ServiceUnavailable.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_move_card.Output.ServiceUnavailable.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_move_card.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_move_card.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.projects_move_card.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.projects_move_card.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    package enum projects_get_column {
        package static let id: Swift.String = "projects/get-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_get_column.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_column.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_column.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_get_column.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_get_column.Input.Path,
                headers: Operations.projects_get_column.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.project_column)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_column {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_get_column.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_get_column.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_get_column.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_get_column.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing project column
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    package enum projects_update_column {
        package static let id: Swift.String = "projects/update-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_update_column.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update_column.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update_column.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_update_column.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project column
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/json/name`.
                    package var name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project column
                    package init(name: Swift.String) {
                        self.name = name
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.projects_update_column.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_update_column.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_update_column.Input.Path,
                headers: Operations.projects_update_column.Input.Headers = .init(),
                body: Operations.projects_update_column.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.project_column)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_column {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_update_column.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_update_column.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_update_column.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_update_column.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    package enum projects_delete_column {
        package static let id: Swift.String = "projects/delete-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_delete_column.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete_column.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete_column.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_delete_column.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_delete_column.Input.Path,
                headers: Operations.projects_delete_column.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.projects_delete_column.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.projects_delete_column.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package enum projects_list_cards {
        package static let id: Swift.String = "projects/list-cards"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_list_cards.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                @frozen package enum archived_statePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case archived = "archived"
                    case not_archived = "not_archived"
                }
                /// Filters the project cards that are returned by the card's state.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                package var archived_state: Operations.projects_list_cards.Input.Query.archived_statePayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - archived_state: Filters the project cards that are returned by the card's state.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    archived_state: Operations.projects_list_cards.Input.Query.archived_statePayload? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.archived_state = archived_state
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.projects_list_cards.Input.Query
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_cards.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_cards.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_list_cards.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.projects_list_cards.Input.Path,
                query: Operations.projects_list_cards.Input.Query = .init(),
                headers: Operations.projects_list_cards.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.projects_list_cards.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.project_card])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.project_card] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_list_cards.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.projects_list_cards.Output.Ok.Headers = .init(),
                    body: Operations.projects_list_cards.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_list_cards.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_list_cards.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a project card
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package enum projects_create_card {
        package static let id: Swift.String = "projects/create-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_create_card.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_create_card.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_create_card.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_create_card.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json`.
                @frozen package enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    package struct Case1Payload: Codable, Hashable, Sendable {
                        /// The project card's note
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1/note`.
                        package var note: Swift.String?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - note: The project card's note
                        package init(note: Swift.String? = nil) {
                            self.note = note
                        }
                        package enum CodingKeys: String, CodingKey {
                            case note
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    case case1(Operations.projects_create_card.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    package struct Case2Payload: Codable, Hashable, Sendable {
                        /// The unique identifier of the content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_id`.
                        package var content_id: Swift.Int
                        /// The piece of content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_type`.
                        package var content_type: Swift.String
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - content_id: The unique identifier of the content associated with the card
                        ///   - content_type: The piece of content associated with the card
                        package init(
                            content_id: Swift.Int,
                            content_type: Swift.String
                        ) {
                            self.content_id = content_id
                            self.content_type = content_type
                        }
                        package enum CodingKeys: String, CodingKey {
                            case content_id
                            case content_type
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    case case2(Operations.projects_create_card.Input.Body.jsonPayload.Case2Payload)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/content/application\/json`.
                case json(Operations.projects_create_card.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_create_card.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_create_card.Input.Path,
                headers: Operations.projects_create_card.Input.Headers = .init(),
                body: Operations.projects_create_card.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.project_card)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_card {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_create_card.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_create_card.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.projects_create_card.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.projects_create_card.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json`.
                    @frozen package enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case1`.
                        case validation_error(Components.Schemas.validation_error)
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case2`.
                        case validation_error_simple(Components.Schemas.validation_error_simple)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .validation_error(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .validation_error_simple(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .validation_error(value):
                                try value.encode(to: encoder)
                            case let .validation_error_simple(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/application\/json`.
                    case json(Operations.projects_create_card.Output.UnprocessableContent.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_create_card.Output.UnprocessableContent.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_create_card.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_create_card.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation failed
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.projects_create_card.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.projects_create_card.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errorsPayload`.
                        package struct errorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `errorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package typealias errorsPayload = [Operations.projects_create_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package var errors: Operations.projects_create_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: Operations.projects_create_card.Output.ServiceUnavailable.Body.jsonPayload.errorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/application\/json`.
                    case json(Operations.projects_create_card.Output.ServiceUnavailable.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_create_card.Output.ServiceUnavailable.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_create_card.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_create_card.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.projects_create_card.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.projects_create_card.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move a project column
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    package enum projects_move_column {
        package static let id: Swift.String = "projects/move-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/path/column_id`.
                package var column_id: Components.Parameters.column_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - column_id: The unique identifier of the column.
                package init(column_id: Components.Parameters.column_id) {
                    self.column_id = column_id
                }
            }
            package var path: Operations.projects_move_column.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_move_column.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_move_column.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_move_column.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/json/position`.
                    package var position: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - position: The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
                    package init(position: Swift.String) {
                        self.position = position
                    }
                    package enum CodingKeys: String, CodingKey {
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/content/application\/json`.
                case json(Operations.projects_move_column.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_move_column.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_move_column.Input.Path,
                headers: Operations.projects_move_column.Input.Headers = .init(),
                body: Operations.projects_move_column.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `jsonPayload`.
                        package init() {}
                        package init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content/application\/json`.
                    case json(Operations.projects_move_column.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_move_column.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_move_column.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_move_column.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.projects_move_column.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.projects_move_column.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    package enum projects_get {
        package static let id: Swift.String = "projects/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/GET/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_get.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_get.Input.Path,
                headers: Operations.projects_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    package enum projects_update {
        package static let id: Swift.String = "projects/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_update.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_update.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/name`.
                    package var name: Swift.String?
                    /// Body of the project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// State of the project; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/state`.
                    package var state: Swift.String?
                    /// The baseline permission that all organization members have on this project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/organization_permission`.
                    @frozen package enum organization_permissionPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                        case none = "none"
                    }
                    /// The baseline permission that all organization members have on this project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/organization_permission`.
                    package var organization_permission: Operations.projects_update.Input.Body.jsonPayload.organization_permissionPayload?
                    /// Whether or not this project can be seen by everyone.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/private`.
                    package var _private: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project
                    ///   - body: Body of the project
                    ///   - state: State of the project; either 'open' or 'closed'
                    ///   - organization_permission: The baseline permission that all organization members have on this project
                    ///   - _private: Whether or not this project can be seen by everyone.
                    package init(
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Swift.String? = nil,
                        organization_permission: Operations.projects_update.Input.Body.jsonPayload.organization_permissionPayload? = nil,
                        _private: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.body = body
                        self.state = state
                        self.organization_permission = organization_permission
                        self._private = _private
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case body
                        case state
                        case organization_permission
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.projects_update.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_update.Input.Path,
                headers: Operations.projects_update.Input.Headers = .init(),
                body: Operations.projects_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                package init() {}
            }
            /// Not Found if the authenticated user does not have access to the project
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.projects_update.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.projects_update.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/application\/json`.
                    case json(Operations.projects_update.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_update.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_update.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_update.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.projects_update.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.projects_update.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    package enum projects_delete {
        package static let id: Swift.String = "projects/delete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_delete.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_delete.Input.Path,
                headers: Operations.projects_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Delete Success
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.projects_delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.projects_delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/documentation_url`.
                        package var documentation_url: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.projects_delete.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.projects_delete.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_delete.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_delete.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.projects_delete.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.projects_delete.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    package enum projects_list_collaborators {
        package static let id: Swift.String = "projects/list-collaborators"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_list_collaborators.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/affiliation`.
                @frozen package enum affiliationPayload: String, Codable, Hashable, Sendable {
                    case outside = "outside"
                    case direct = "direct"
                    case all = "all"
                }
                /// Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/affiliation`.
                package var affiliation: Operations.projects_list_collaborators.Input.Query.affiliationPayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - affiliation: Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    affiliation: Operations.projects_list_collaborators.Input.Query.affiliationPayload? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.affiliation = affiliation
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.projects_list_collaborators.Input.Query
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_collaborators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_collaborators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_list_collaborators.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.projects_list_collaborators.Input.Path,
                query: Operations.projects_list_collaborators.Input.Query = .init(),
                headers: Operations.projects_list_collaborators.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.projects_list_collaborators.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.simple_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_list_collaborators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.projects_list_collaborators.Output.Ok.Headers = .init(),
                    body: Operations.projects_list_collaborators.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_list_collaborators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_list_collaborators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    package enum projects_add_collaborator {
        package static let id: Swift.String = "projects/add-collaborator"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path/username`.
                package var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    project_id: Components.Parameters.project_id,
                    username: Components.Parameters.username
                ) {
                    self.project_id = project_id
                    self.username = username
                }
            }
            package var path: Operations.projects_add_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_add_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_add_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_add_collaborator.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant the collaborator.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json/permission`.
                    @frozen package enum permissionPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                    }
                    /// The permission to grant the collaborator.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json/permission`.
                    package var permission: Operations.projects_add_collaborator.Input.Body.jsonPayload.permissionPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant the collaborator.
                    package init(permission: Operations.projects_add_collaborator.Input.Body.jsonPayload.permissionPayload? = nil) {
                        self.permission = permission
                    }
                    package enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.projects_add_collaborator.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_add_collaborator.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_add_collaborator.Input.Path,
                headers: Operations.projects_add_collaborator.Input.Headers = .init(),
                body: Operations.projects_add_collaborator.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.projects_add_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.projects_add_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    package enum projects_remove_collaborator {
        package static let id: Swift.String = "projects/remove-collaborator"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path/username`.
                package var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    project_id: Components.Parameters.project_id,
                    username: Components.Parameters.username
                ) {
                    self.project_id = project_id
                    self.username = username
                }
            }
            package var path: Operations.projects_remove_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_remove_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_remove_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_remove_collaborator.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_remove_collaborator.Input.Path,
                headers: Operations.projects_remove_collaborator.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.projects_remove_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.projects_remove_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    package enum projects_get_permission_for_user {
        package static let id: Swift.String = "projects/get-permission-for-user"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path/username`.
                package var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    project_id: Components.Parameters.project_id,
                    username: Components.Parameters.username
                ) {
                    self.project_id = project_id
                    self.username = username
                }
            }
            package var path: Operations.projects_get_permission_for_user.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_permission_for_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_get_permission_for_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_get_permission_for_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.projects_get_permission_for_user.Input.Path,
                headers: Operations.projects_get_permission_for_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.project_collaborator_permission)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_collaborator_permission {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_get_permission_for_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_get_permission_for_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_get_permission_for_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_get_permission_for_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    package enum projects_list_columns {
        package static let id: Swift.String = "projects/list-columns"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_list_columns.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.projects_list_columns.Input.Query
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_columns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_list_columns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_list_columns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.projects_list_columns.Input.Path,
                query: Operations.projects_list_columns.Input.Query = .init(),
                headers: Operations.projects_list_columns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.projects_list_columns.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.project_column])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.project_column] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_list_columns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.projects_list_columns.Output.Ok.Headers = .init(),
                    body: Operations.projects_list_columns.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.projects_list_columns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.projects_list_columns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    package enum projects_create_column {
        package static let id: Swift.String = "projects/create-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/path/project_id`.
                package var project_id: Components.Parameters.project_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: The unique identifier of the project.
                package init(project_id: Components.Parameters.project_id) {
                    self.project_id = project_id
                }
            }
            package var path: Operations.projects_create_column.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_create_column.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.projects_create_column.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.projects_create_column.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project column
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/json/name`.
                    package var name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project column
                    package init(name: Swift.String) {
                        self.name = name
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/content/application\/json`.
                case json(Operations.projects_create_column.Input.Body.jsonPayload)
            }
            package var body: Operations.projects_create_column.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.projects_create_column.Input.Path,
                headers: Operations.projects_create_column.Input.Headers = .init(),
                body: Operations.projects_create_column.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.project_column)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.project_column {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.projects_create_column.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.projects_create_column.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.projects_create_column.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.projects_create_column.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    package enum rate_limit_get {
        package static let id: Swift.String = "rate-limit/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rate_limit/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rate_limit_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rate_limit_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.rate_limit_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.rate_limit_get.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Limit`.
                    package var X_RateLimit_Limit: Components.Headers.x_rate_limit_limit?
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Remaining`.
                    package var X_RateLimit_Remaining: Components.Headers.x_rate_limit_remaining?
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Reset`.
                    package var X_RateLimit_Reset: Components.Headers.x_rate_limit_reset?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_RateLimit_Limit:
                    ///   - X_RateLimit_Remaining:
                    ///   - X_RateLimit_Reset:
                    package init(
                        X_RateLimit_Limit: Components.Headers.x_rate_limit_limit? = nil,
                        X_RateLimit_Remaining: Components.Headers.x_rate_limit_remaining? = nil,
                        X_RateLimit_Reset: Components.Headers.x_rate_limit_reset? = nil
                    ) {
                        self.X_RateLimit_Limit = X_RateLimit_Limit
                        self.X_RateLimit_Remaining = X_RateLimit_Remaining
                        self.X_RateLimit_Reset = X_RateLimit_Reset
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.rate_limit_get.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.rate_limit_overview)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.rate_limit_overview {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.rate_limit_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.rate_limit_get.Output.Ok.Headers = .init(),
                    body: Operations.rate_limit_get.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.rate_limit_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.rate_limit_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    package enum repos_get {
        package static let id: Swift.String = "repos/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.repos_get.Input.Path,
                headers: Operations.repos_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.full_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.full_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.repos_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package enum repos_list_commits {
        package static let id: Swift.String = "repos/list-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_list_commits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query`.
            package struct Query: Sendable, Hashable {
                /// SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/sha`.
                package var sha: Swift.String?
                /// Only commits containing this file path will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/path`.
                package var path: Swift.String?
                /// GitHub username or email address to use to filter by commit author.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/author`.
                package var author: Swift.String?
                /// GitHub username or email address to use to filter by commit committer.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/committer`.
                package var committer: Swift.String?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/since`.
                package var since: Components.Parameters.since?
                /// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/until`.
                package var until: Foundation.Date?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha: SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///   - path: Only commits containing this file path will be returned.
                ///   - author: GitHub username or email address to use to filter by commit author.
                ///   - committer: GitHub username or email address to use to filter by commit committer.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - until: Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    sha: Swift.String? = nil,
                    path: Swift.String? = nil,
                    author: Swift.String? = nil,
                    committer: Swift.String? = nil,
                    since: Components.Parameters.since? = nil,
                    until: Foundation.Date? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sha = sha
                    self.path = path
                    self.author = author
                    self.committer = committer
                    self.since = since
                    self.until = until
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.repos_list_commits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_list_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_list_commits.Input.Path,
                query: Operations.repos_list_commits.Input.Query = .init(),
                headers: Operations.repos_list_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_list_commits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_list_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_list_commits.Output.Ok.Headers = .init(),
                    body: Operations.repos_list_commits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_list_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package enum repos_list_pull_requests_associated_with_commit {
        package static let id: Swift.String = "repos/list-pull-requests-associated-with-commit"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/commit_sha`.
                package var commit_sha: Components.Parameters.commit_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commit_sha: The SHA of the commit.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            package var path: Operations.repos_list_pull_requests_associated_with_commit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.repos_list_pull_requests_associated_with_commit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_pull_requests_associated_with_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_pull_requests_associated_with_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_list_pull_requests_associated_with_commit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_list_pull_requests_associated_with_commit.Input.Path,
                query: Operations.repos_list_pull_requests_associated_with_commit.Input.Query = .init(),
                headers: Operations.repos_list_pull_requests_associated_with_commit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_request_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.pull_request_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Headers = .init(),
                    body: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_pull_requests_associated_with_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package enum repos_compare_commits {
        package static let id: Swift.String = "repos/compare-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/basehead`.
                package var basehead: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - basehead: The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    basehead: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.basehead = basehead
                }
            }
            package var path: Operations.repos_compare_commits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/page`.
                package var page: Components.Parameters.page?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Page number of the results to fetch.
                ///   - per_page: The number of results per page (max 100).
                package init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            package var query: Operations.repos_compare_commits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_compare_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_compare_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_compare_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_compare_commits.Input.Path,
                query: Operations.repos_compare_commits.Input.Query = .init(),
                headers: Operations.repos_compare_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.commit_comparison)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.commit_comparison {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_compare_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.repos_compare_commits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_compare_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_compare_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package enum repos_list_contributors {
        package static let id: Swift.String = "repos/list-contributors"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_list_contributors.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Set to `1` or `true` to include anonymous contributors in results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/anon`.
                package var anon: Swift.String?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - anon: Set to `1` or `true` to include anonymous contributors in results.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    anon: Swift.String? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.anon = anon
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.repos_list_contributors.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_contributors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_contributors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_list_contributors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_list_contributors.Input.Path,
                query: Operations.repos_list_contributors.Input.Query = .init(),
                headers: Operations.repos_list_contributors.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_list_contributors.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.contributor])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.contributor] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_list_contributors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_list_contributors.Output.Ok.Headers = .init(),
                    body: Operations.repos_list_contributors.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// if repository contains content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_contributors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_list_contributors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_list_contributors.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.repos_list_contributors.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    package enum issues_list_for_repo {
        package static let id: Swift.String = "issues/list-for-repo"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.issues_list_for_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query`.
            package struct Query: Sendable, Hashable {
                /// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/milestone`.
                package var milestone: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                package var state: Operations.issues_list_for_repo.Input.Query.statePayload?
                /// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/assignee`.
                package var assignee: Swift.String?
                /// The user that created the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/creator`.
                package var creator: Swift.String?
                /// A user that's mentioned in the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/mentioned`.
                package var mentioned: Swift.String?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/labels`.
                package var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                @frozen package enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                package var sort: Operations.issues_list_for_repo.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen package enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/direction`.
                package var direction: Components.Parameters.direction?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/since`.
                package var since: Components.Parameters.since?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - milestone: If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///   - state: Indicates the state of the issues to return.
                ///   - assignee: Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///   - creator: The user that created the issue.
                ///   - mentioned: A user that's mentioned in the issue.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    milestone: Swift.String? = nil,
                    state: Operations.issues_list_for_repo.Input.Query.statePayload? = nil,
                    assignee: Swift.String? = nil,
                    creator: Swift.String? = nil,
                    mentioned: Swift.String? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_list_for_repo.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.milestone = milestone
                    self.state = state
                    self.assignee = assignee
                    self.creator = creator
                    self.mentioned = mentioned
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.issues_list_for_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_list_for_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_list_for_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_list_for_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.issues_list_for_repo.Input.Path,
                query: Operations.issues_list_for_repo.Input.Query = .init(),
                headers: Operations.issues_list_for_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.issues_list_for_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_list_for_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.issues_list_for_repo.Output.Ok.Headers = .init(),
                    body: Operations.issues_list_for_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_list_for_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.issues_list_for_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package enum issues_create {
        package static let id: Swift.String = "issues/create"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.issues_create.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_create.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    @frozen package enum titlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    package var title: Operations.issues_create.Input.Body.jsonPayload.titlePayload
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignee`.
                    package var assignee: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    @frozen package enum milestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    package var milestone: Operations.issues_create.Input.Body.jsonPayload.milestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload`.
                    @frozen package enum labelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2`.
                        package struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/id`.
                            package var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/name`.
                            package var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/description`.
                            package var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/color`.
                            package var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            package init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            package enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2`.
                        case case2(Operations.issues_create.Input.Body.jsonPayload.labelsPayloadPayload.Case2Payload)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package typealias labelsPayload = [Operations.issues_create.Input.Body.jsonPayload.labelsPayloadPayload]
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package var labels: Operations.issues_create.Input.Body.jsonPayload.labelsPayload?
                    /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignees`.
                    package var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///   - assignees: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    package init(
                        title: Operations.issues_create.Input.Body.jsonPayload.titlePayload,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        milestone: Operations.issues_create.Input.Body.jsonPayload.milestonePayload? = nil,
                        labels: Operations.issues_create.Input.Body.jsonPayload.labelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/content/application\/json`.
                case json(Operations.issues_create.Input.Body.jsonPayload)
            }
            package var body: Operations.issues_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.issues_create.Input.Path,
                headers: Operations.issues_create.Input.Headers = .init(),
                body: Operations.issues_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers/Location`.
                    package var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    package init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.issues_create.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.issues_create.Output.Created.Headers = .init(),
                    body: Operations.issues_create.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.issues_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package enum issues_get {
        package static let id: Swift.String = "issues/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/issue_number`.
                package var issue_number: Components.Parameters.issue_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            package var path: Operations.issues_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.issues_get.Input.Path,
                headers: Operations.issues_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.issues_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.issues_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    package enum issues_update {
        package static let id: Swift.String = "issues/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/issue_number`.
                package var issue_number: Components.Parameters.issue_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            package var path: Operations.issues_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    @frozen package enum titlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    package var title: Operations.issues_update.Input.Body.jsonPayload.titlePayload?
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// Username to assign to this issue. **This field is deprecated.**
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignee`.
                    package var assignee: Swift.String?
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    package var state: Operations.issues_update.Input.Body.jsonPayload.statePayload?
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    @frozen package enum state_reasonPayload: String, Codable, Hashable, Sendable {
                        case completed = "completed"
                        case not_planned = "not_planned"
                        case reopened = "reopened"
                    }
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    package var state_reason: Operations.issues_update.Input.Body.jsonPayload.state_reasonPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    @frozen package enum milestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    package var milestone: Operations.issues_update.Input.Body.jsonPayload.milestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload`.
                    @frozen package enum labelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2`.
                        package struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/id`.
                            package var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/name`.
                            package var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/description`.
                            package var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/color`.
                            package var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            package init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            package enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2`.
                        case case2(Operations.issues_update.Input.Body.jsonPayload.labelsPayloadPayload.Case2Payload)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    package typealias labelsPayload = [Operations.issues_update.Input.Body.jsonPayload.labelsPayloadPayload]
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    package var labels: Operations.issues_update.Input.Body.jsonPayload.labelsPayload?
                    /// Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignees`.
                    package var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Username to assign to this issue. **This field is deprecated.**
                    ///   - state: The open or closed state of the issue.
                    ///   - state_reason: The reason for the state change. Ignored unless `state` is changed.
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///   - assignees: Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    package init(
                        title: Operations.issues_update.Input.Body.jsonPayload.titlePayload? = nil,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        state: Operations.issues_update.Input.Body.jsonPayload.statePayload? = nil,
                        state_reason: Operations.issues_update.Input.Body.jsonPayload.state_reasonPayload? = nil,
                        milestone: Operations.issues_update.Input.Body.jsonPayload.milestonePayload? = nil,
                        labels: Operations.issues_update.Input.Body.jsonPayload.labelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.state = state
                        self.state_reason = state_reason
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case state
                        case state_reason
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.issues_update.Input.Body.jsonPayload)
            }
            package var body: Operations.issues_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.issues_update.Input.Path,
                headers: Operations.issues_update.Input.Headers = .init(),
                body: Operations.issues_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.issues_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.issues_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    package enum issues_create_comment {
        package static let id: Swift.String = "issues/create-comment"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/issue_number`.
                package var issue_number: Components.Parameters.issue_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            package var path: Operations.issues_create_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_create_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_create_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_create_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json/body`.
                    package var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    package init(body: Swift.String) {
                        self.body = body
                    }
                    package enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.issues_create_comment.Input.Body.jsonPayload)
            }
            package var body: Operations.issues_create_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.issues_create_comment.Input.Path,
                headers: Operations.issues_create_comment.Input.Headers = .init(),
                body: Operations.issues_create_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers/Location`.
                    package var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    package init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.issues_create_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.issue_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.issue_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_create_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.issues_create_comment.Output.Created.Headers = .init(),
                    body: Operations.issues_create_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_create_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.issues_create_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    package enum issues_list_events_for_timeline {
        package static let id: Swift.String = "issues/list-events-for-timeline"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/issue_number`.
                package var issue_number: Components.Parameters.issue_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            package var path: Operations.issues_list_events_for_timeline.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.issues_list_events_for_timeline.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_list_events_for_timeline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_list_events_for_timeline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.issues_list_events_for_timeline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.issues_list_events_for_timeline.Input.Path,
                query: Operations.issues_list_events_for_timeline.Input.Query = .init(),
                headers: Operations.issues_list_events_for_timeline.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.issues_list_events_for_timeline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.timeline_issue_events])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.timeline_issue_events] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.issues_list_events_for_timeline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.issues_list_events_for_timeline.Output.Ok.Headers = .init(),
                    body: Operations.issues_list_events_for_timeline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_list_events_for_timeline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.issues_list_events_for_timeline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    package enum pulls_list {
        package static let id: Swift.String = "pulls/list"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.pulls_list.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Either `open`, `closed`, or `all` to filter by state.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                package var state: Operations.pulls_list.Input.Query.statePayload?
                /// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/head`.
                package var head: Swift.String?
                /// Filter pulls by base branch name. Example: `gh-pages`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/base`.
                package var base: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                @frozen package enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case popularity = "popularity"
                    case long_running = "long-running"
                }
                /// What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                package var sort: Operations.pulls_list.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                @frozen package enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                package var direction: Operations.pulls_list.Input.Query.directionPayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Either `open`, `closed`, or `all` to filter by state.
                ///   - head: Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///   - base: Filter pulls by base branch name. Example: `gh-pages`.
                ///   - sort: What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///   - direction: The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    state: Operations.pulls_list.Input.Query.statePayload? = nil,
                    head: Swift.String? = nil,
                    base: Swift.String? = nil,
                    sort: Operations.pulls_list.Input.Query.sortPayload? = nil,
                    direction: Operations.pulls_list.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.state = state
                    self.head = head
                    self.base = base
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.pulls_list.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.pulls_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.pulls_list.Input.Path,
                query: Operations.pulls_list.Input.Query = .init(),
                headers: Operations.pulls_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.pulls_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_request_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.pull_request_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.pulls_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.pulls_list.Output.Ok.Headers = .init(),
                    body: Operations.pulls_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.pulls_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package enum pulls_get {
        package static let id: Swift.String = "pulls/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/pull_number`.
                package var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            package var path: Operations.pulls_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.pulls_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.pulls_get.Input.Path,
                headers: Operations.pulls_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.pull_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.pulls_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.pulls_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.pulls_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package enum pulls_update {
        package static let id: Swift.String = "pulls/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/pull_number`.
                package var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            package var path: Operations.pulls_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.pulls_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/title`.
                    package var title: Swift.String?
                    /// The contents of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    @frozen package enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    package var state: Operations.pulls_update.Input.Body.jsonPayload.statePayload?
                    /// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/base`.
                    package var base: Swift.String?
                    /// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/maintainer_can_modify`.
                    package var maintainer_can_modify: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the pull request.
                    ///   - body: The contents of the pull request.
                    ///   - state: State of this Pull Request. Either `open` or `closed`.
                    ///   - base: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///   - maintainer_can_modify: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    package init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Operations.pulls_update.Input.Body.jsonPayload.statePayload? = nil,
                        base: Swift.String? = nil,
                        maintainer_can_modify: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.state = state
                        self.base = base
                        self.maintainer_can_modify = maintainer_can_modify
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case state
                        case base
                        case maintainer_can_modify
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.pulls_update.Input.Body.jsonPayload)
            }
            package var body: Operations.pulls_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.pulls_update.Input.Path,
                headers: Operations.pulls_update.Input.Headers = .init(),
                body: Operations.pulls_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.pull_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.pulls_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.pulls_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.pulls_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    package enum pulls_list_review_comments {
        package static let id: Swift.String = "pulls/list-review-comments"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/pull_number`.
                package var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            package var path: Operations.pulls_list_review_comments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen package enum sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/sort`.
                package var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                @frozen package enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort results. Ignored without `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                package var direction: Operations.pulls_list_review_comments.Input.Query.directionPayload?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/since`.
                package var since: Components.Parameters.since?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: The direction to sort results. Ignored without `sort` parameter.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.pulls_list_review_comments.Input.Query.directionPayload? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.pulls_list_review_comments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list_review_comments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list_review_comments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.pulls_list_review_comments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.pulls_list_review_comments.Input.Path,
                query: Operations.pulls_list_review_comments.Input.Query = .init(),
                headers: Operations.pulls_list_review_comments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.pulls_list_review_comments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_request_review_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.pull_request_review_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.pulls_list_review_comments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.pulls_list_review_comments.Output.Ok.Headers = .init(),
                    body: Operations.pulls_list_review_comments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list_review_comments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.pulls_list_review_comments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package enum pulls_list_files {
        package static let id: Swift.String = "pulls/list-files"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/pull_number`.
                package var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            package var path: Operations.pulls_list_files.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.pulls_list_files.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list_files.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_list_files.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.pulls_list_files.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.pulls_list_files.Input.Path,
                query: Operations.pulls_list_files.Input.Query = .init(),
                headers: Operations.pulls_list_files.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.pulls_list_files.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.diff_entry])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.diff_entry] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.pulls_list_files.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.pulls_list_files.Output.Ok.Headers = .init(),
                    body: Operations.pulls_list_files.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list_files.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.pulls_list_files.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package enum repos_list_releases {
        package static let id: Swift.String = "repos/list-releases"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_list_releases.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.repos_list_releases.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_releases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_releases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_list_releases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_list_releases.Input.Path,
                query: Operations.repos_list_releases.Input.Query = .init(),
                headers: Operations.repos_list_releases.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_list_releases.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.release])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.release] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_list_releases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_list_releases.Output.Ok.Headers = .init(),
                    body: Operations.repos_list_releases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_releases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_list_releases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package enum repos_create_release {
        package static let id: Swift.String = "repos/create-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_create_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_create_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_create_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_create_release.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/tag_name`.
                    package var tag_name: Swift.String
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/target_commitish`.
                    package var target_commitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/name`.
                    package var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/draft`.
                    package var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/prerelease`.
                    package var prerelease: Swift.Bool?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/discussion_category_name`.
                    package var discussion_category_name: Swift.String?
                    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/generate_release_notes`.
                    package var generate_release_notes: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    @frozen package enum make_latestPayload: String, Codable, Hashable, Sendable {
                        case _true = "true"
                        case _false = "false"
                        case legacy = "legacy"
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    package var make_latest: Operations.repos_create_release.Input.Body.jsonPayload.make_latestPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag_name: The name of the tag.
                    ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///   - prerelease: `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///   - discussion_category_name: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///   - generate_release_notes: Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///   - make_latest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    package init(
                        tag_name: Swift.String,
                        target_commitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        discussion_category_name: Swift.String? = nil,
                        generate_release_notes: Swift.Bool? = nil,
                        make_latest: Operations.repos_create_release.Input.Body.jsonPayload.make_latestPayload? = nil
                    ) {
                        self.tag_name = tag_name
                        self.target_commitish = target_commitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.discussion_category_name = discussion_category_name
                        self.generate_release_notes = generate_release_notes
                        self.make_latest = make_latest
                    }
                    package enum CodingKeys: String, CodingKey {
                        case tag_name
                        case target_commitish
                        case name
                        case body
                        case draft
                        case prerelease
                        case discussion_category_name
                        case generate_release_notes
                        case make_latest
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/content/application\/json`.
                case json(Operations.repos_create_release.Input.Body.jsonPayload)
            }
            package var body: Operations.repos_create_release.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.repos_create_release.Input.Path,
                headers: Operations.repos_create_release.Input.Headers = .init(),
                body: Operations.repos_create_release.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers/Location`.
                    package var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    package init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_create_release.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_create_release.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_create_release.Output.Created.Headers = .init(),
                    body: Operations.repos_create_release.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_create_release.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.repos_create_release.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.basic_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_create_release.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.repos_create_release.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_create_release.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.repos_create_release.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package enum repos_get_latest_release {
        package static let id: Swift.String = "repos/get-latest-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_get_latest_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_get_latest_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_get_latest_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_get_latest_release.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.repos_get_latest_release.Input.Path,
                headers: Operations.repos_get_latest_release.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_get_latest_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.repos_get_latest_release.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_get_latest_release.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_get_latest_release.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository tags
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package enum repos_list_tags {
        package static let id: Swift.String = "repos/list-tags"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/owner`.
                package var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/repo`.
                package var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.repos_list_tags.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/per_page`.
                package var per_page: Components.Parameters.per_page?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/page`.
                package var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            package var query: Operations.repos_list_tags.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_tags.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_list_tags.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.repos_list_tags.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.repos_list_tags.Input.Path,
                query: Operations.repos_list_tags.Input.Query = .init(),
                headers: Operations.repos_list_tags.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers/Link`.
                    package var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    package init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.repos_list_tags.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.tag])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.tag] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.repos_list_tags.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.repos_list_tags.Output.Ok.Headers = .init(),
                    body: Operations.repos_list_tags.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_tags.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.repos_list_tags.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
