// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    func apps_create_installation_access_token(
        _ input: Operations.apps_create_installation_access_token.Input
    ) async throws -> Operations.apps_create_installation_access_token.Output
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    func orgs_get(_ input: Operations.orgs_get.Input) async throws -> Operations.orgs_get.Output
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    func repos_get(_ input: Operations.repos_get.Input) async throws -> Operations.repos_get.Output
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    func repos_list_pull_requests_associated_with_commit(
        _ input: Operations.repos_list_pull_requests_associated_with_commit.Input
    ) async throws -> Operations.repos_list_pull_requests_associated_with_commit.Output
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    func repos_list_contributors(_ input: Operations.repos_list_contributors.Input) async throws
        -> Operations.repos_list_contributors.Output
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    func issues_list_for_repo(_ input: Operations.issues_list_for_repo.Input) async throws
        -> Operations.issues_list_for_repo.Output
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    func issues_create(_ input: Operations.issues_create.Input) async throws
        -> Operations.issues_create.Output
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    func issues_create_comment(_ input: Operations.issues_create_comment.Input) async throws
        -> Operations.issues_create_comment.Output
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    func pulls_list(_ input: Operations.pulls_list.Input) async throws
        -> Operations.pulls_list.Output
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    func pulls_list_review_comments(_ input: Operations.pulls_list_review_comments.Input)
        async throws -> Operations.pulls_list_review_comments.Output
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    func pulls_list_files(_ input: Operations.pulls_list_files.Input) async throws
        -> Operations.pulls_list_files.Output
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    func repos_list_releases(_ input: Operations.repos_list_releases.Input) async throws
        -> Operations.repos_list_releases.Output
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    func repos_create_release(_ input: Operations.repos_create_release.Input) async throws
        -> Operations.repos_create_release.Output
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func repos_get_latest_release(_ input: Operations.repos_get_latest_release.Input) async throws
        -> Operations.repos_get_latest_release.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://api.github.com")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/simple-user-nameonly`.
        public typealias simple_user_nameonly = Swift.String
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_simple_user: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_simple_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_error: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_error_simple: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_error_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_error: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String])
                    /// Parsed a case that was not defined in the OpenAPI document.
                    case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                    public init(from decoder: any Decoder) throws {
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {}
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {}
                        do {
                            self = .case3(try .init(from: decoder))
                            return
                        } catch {}
                        let container = try decoder.singleValueContainer()
                        let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                        self = .undocumented(value)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value): try value.encode(to: encoder)
                        case let .case2(value): try value.encode(to: encoder)
                        case let .case3(value): try value.encode(to: encoder)
                        case let .undocumented(value): try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value:
                    Components.Schemas.validation_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_error.errorsPayloadPayload.valuePayload? =
                        nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_error
                .errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_error.errorsPayload?
            /// Creates a new `validation_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        public struct hook_delivery: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            public var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            public var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            public var action: Swift.String
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            public var installation_id: Swift.Int
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            public var repository_id: Swift.Int
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public struct requestPayload: Codable, Equatable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public struct headersPayload: Codable, Equatable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(
                        additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                    ) { self.additionalProperties = additionalProperties }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public var headers: Components.Schemas.hook_delivery.requestPayload.headersPayload
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public struct payloadPayload: Codable, Equatable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `payloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(
                        additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                    ) { self.additionalProperties = additionalProperties }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public var payload: Components.Schemas.hook_delivery.requestPayload.payloadPayload
                /// Creates a new `requestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                public init(
                    headers: Components.Schemas.hook_delivery.requestPayload.headersPayload,
                    payload: Components.Schemas.hook_delivery.requestPayload.payloadPayload
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public var request: Components.Schemas.hook_delivery.requestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public struct responsePayload: Codable, Equatable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public struct headersPayload: Codable, Equatable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(
                        additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                    ) { self.additionalProperties = additionalProperties }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public var headers: Components.Schemas.hook_delivery.responsePayload.headersPayload
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                public var payload: Swift.String
                /// Creates a new `responsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                public init(
                    headers: Components.Schemas.hook_delivery.responsePayload.headersPayload,
                    payload: Swift.String
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public var response: Components.Schemas.hook_delivery.responsePayload
            /// Creates a new `hook_delivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String,
                installation_id: Swift.Int,
                repository_id: Swift.Int,
                url: Swift.String? = nil,
                request: Components.Schemas.hook_delivery.requestPayload,
                response: Components.Schemas.hook_delivery.responsePayload
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.url = url
                self.request = request
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case url
                case request
                case response
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_user: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// An enterprise on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct enterprise: Codable, Equatable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var html_url: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var website_url: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var node_id: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatar_url: Swift.String
            /// Creates a new `enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - html_url:
            ///   - website_url: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - node_id:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - created_at:
            ///   - updated_at:
            ///   - avatar_url:
            public init(
                description: Swift.String? = nil,
                html_url: Swift.String,
                website_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                avatar_url: Swift.String
            ) {
                self.description = description
                self.html_url = html_url
                self.website_url = website_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.created_at = created_at
                self.updated_at = updated_at
                self.avatar_url = avatar_url
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case html_url
                case website_url
                case id
                case node_id
                case name
                case slug
                case created_at
                case updated_at
                case avatar_url
            }
        }
        /// Request to install an integration on a target
        ///
        /// - Remark: Generated from `#/components/schemas/integration-installation-request`.
        public struct integration_installation_request: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the request installation.
            ///
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            public struct accountPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value1`.
                public var value1: Components.Schemas.simple_user?
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value2`.
                public var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.simple_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try? .init(from: decoder)
                    value2 = try? .init(from: decoder)
                    try DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [value1, value2],
                        type: Self.self,
                        codingPath: decoder.codingPath
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            public var account: Components.Schemas.integration_installation_request.accountPayload
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/requester`.
            public var requester: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `integration_installation_request`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the request installation.
            ///   - node_id:
            ///   - account:
            ///   - requester:
            ///   - created_at:
            public init(
                id: Swift.Int,
                node_id: Swift.String? = nil,
                account: Components.Schemas.integration_installation_request.accountPayload,
                requester: Components.Schemas.simple_user,
                created_at: Foundation.Date
            ) {
                self.id = id
                self.node_id = node_id
                self.account = account
                self.requester = requester
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case account
                case requester
                case created_at
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        public struct app_permissions: Codable, Equatable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen
            public enum actionsPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [actionsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            public var actions: Components.Schemas.app_permissions.actionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen
            public enum administrationPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [administrationPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            public var administration: Components.Schemas.app_permissions.administrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen
            public enum checksPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [checksPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            public var checks: Components.Schemas.app_permissions.checksPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen
            public enum contentsPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [contentsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            public var contents: Components.Schemas.app_permissions.contentsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen
            public enum deploymentsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [deploymentsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            public var deployments: Components.Schemas.app_permissions.deploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen
            public enum environmentsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [environmentsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            public var environments: Components.Schemas.app_permissions.environmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen
            public enum issuesPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [issuesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            public var issues: Components.Schemas.app_permissions.issuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen
            public enum metadataPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [metadataPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            public var metadata: Components.Schemas.app_permissions.metadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen
            public enum packagesPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [packagesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            public var packages: Components.Schemas.app_permissions.packagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen
            public enum pagesPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [pagesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            public var pages: Components.Schemas.app_permissions.pagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen
            public enum pull_requestsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [pull_requestsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            public var pull_requests: Components.Schemas.app_permissions.pull_requestsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen
            public enum repository_hooksPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [repository_hooksPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            public var repository_hooks: Components.Schemas.app_permissions.repository_hooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen
            public enum repository_projectsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                case admin
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    case "admin": self = .admin
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    case .admin: return "admin"
                    }
                }
                public static var allCases: [repository_projectsPayload] {
                    [.read, .write, .admin]
                }
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            public var repository_projects:
                Components.Schemas.app_permissions.repository_projectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen
            public enum secret_scanning_alertsPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [secret_scanning_alertsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            public var secret_scanning_alerts:
                Components.Schemas.app_permissions.secret_scanning_alertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen
            public enum secretsPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [secretsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            public var secrets: Components.Schemas.app_permissions.secretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen
            public enum security_eventsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [security_eventsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            public var security_events: Components.Schemas.app_permissions.security_eventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen
            public enum single_filePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [single_filePayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            public var single_file: Components.Schemas.app_permissions.single_filePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen
            public enum statusesPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [statusesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            public var statuses: Components.Schemas.app_permissions.statusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen
            public enum vulnerability_alertsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [vulnerability_alertsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            public var vulnerability_alerts:
                Components.Schemas.app_permissions.vulnerability_alertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen
            public enum workflowsPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .write: return "write"
                    }
                }
                public static var allCases: [workflowsPayload] { [.write] }
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            public var workflows: Components.Schemas.app_permissions.workflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen
            public enum membersPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [membersPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            public var members: Components.Schemas.app_permissions.membersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen
            public enum organization_administrationPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_administrationPayload] {
                    [.read, .write]
                }
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            public var organization_administration:
                Components.Schemas.app_permissions.organization_administrationPayload?
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen
            public enum organization_custom_rolesPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_custom_rolesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            public var organization_custom_roles:
                Components.Schemas.app_permissions.organization_custom_rolesPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen
            public enum organization_announcement_bannersPayload: RawRepresentable, Codable,
                Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_announcement_bannersPayload] {
                    [.read, .write]
                }
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            public var organization_announcement_banners:
                Components.Schemas.app_permissions.organization_announcement_bannersPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen
            public enum organization_hooksPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_hooksPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            public var organization_hooks:
                Components.Schemas.app_permissions.organization_hooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen
            public enum organization_personal_access_tokensPayload: RawRepresentable, Codable,
                Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_personal_access_tokensPayload] {
                    [.read, .write]
                }
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            public var organization_personal_access_tokens:
                Components.Schemas.app_permissions.organization_personal_access_tokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen
            public enum organization_personal_access_token_requestsPayload: RawRepresentable,
                Codable, Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_personal_access_token_requestsPayload] {
                    [.read, .write]
                }
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            public var organization_personal_access_token_requests:
                Components.Schemas.app_permissions
                    .organization_personal_access_token_requestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen
            public enum organization_planPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    }
                }
                public static var allCases: [organization_planPayload] { [.read] }
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            public var organization_plan:
                Components.Schemas.app_permissions.organization_planPayload?
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen
            public enum organization_projectsPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                case admin
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    case "admin": self = .admin
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    case .admin: return "admin"
                    }
                }
                public static var allCases: [organization_projectsPayload] {
                    [.read, .write, .admin]
                }
            }
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            public var organization_projects:
                Components.Schemas.app_permissions.organization_projectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen
            public enum organization_packagesPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_packagesPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            public var organization_packages:
                Components.Schemas.app_permissions.organization_packagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen
            public enum organization_secretsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_secretsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            public var organization_secrets:
                Components.Schemas.app_permissions.organization_secretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen
            public enum organization_self_hosted_runnersPayload: RawRepresentable, Codable,
                Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_self_hosted_runnersPayload] {
                    [.read, .write]
                }
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            public var organization_self_hosted_runners:
                Components.Schemas.app_permissions.organization_self_hosted_runnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen
            public enum organization_user_blockingPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [organization_user_blockingPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            public var organization_user_blocking:
                Components.Schemas.app_permissions.organization_user_blockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen
            public enum team_discussionsPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case read
                case write
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read": self = .read
                    case "write": self = .write
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read: return "read"
                    case .write: return "write"
                    }
                }
                public static var allCases: [team_discussionsPayload] { [.read, .write] }
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            public var team_discussions: Components.Schemas.app_permissions.team_discussionsPayload?
            /// Creates a new `app_permissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pull_requests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repository_hooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repository_projects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secret_scanning_alerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - security_events: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - single_file: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerability_alerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organization_administration: The level of permission to grant the access token to manage access to an organization.
            ///   - organization_custom_roles: The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///   - organization_announcement_banners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organization_hooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organization_personal_access_tokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organization_personal_access_token_requests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organization_plan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organization_projects: The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///   - organization_packages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organization_secrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organization_self_hosted_runners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organization_user_blocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - team_discussions: The level of permission to grant the access token to manage team discussions and related comments.
            public init(
                actions: Components.Schemas.app_permissions.actionsPayload? = nil,
                administration: Components.Schemas.app_permissions.administrationPayload? = nil,
                checks: Components.Schemas.app_permissions.checksPayload? = nil,
                contents: Components.Schemas.app_permissions.contentsPayload? = nil,
                deployments: Components.Schemas.app_permissions.deploymentsPayload? = nil,
                environments: Components.Schemas.app_permissions.environmentsPayload? = nil,
                issues: Components.Schemas.app_permissions.issuesPayload? = nil,
                metadata: Components.Schemas.app_permissions.metadataPayload? = nil,
                packages: Components.Schemas.app_permissions.packagesPayload? = nil,
                pages: Components.Schemas.app_permissions.pagesPayload? = nil,
                pull_requests: Components.Schemas.app_permissions.pull_requestsPayload? = nil,
                repository_hooks: Components.Schemas.app_permissions.repository_hooksPayload? = nil,
                repository_projects: Components.Schemas.app_permissions
                    .repository_projectsPayload? = nil,
                secret_scanning_alerts: Components.Schemas.app_permissions
                    .secret_scanning_alertsPayload? = nil,
                secrets: Components.Schemas.app_permissions.secretsPayload? = nil,
                security_events: Components.Schemas.app_permissions.security_eventsPayload? = nil,
                single_file: Components.Schemas.app_permissions.single_filePayload? = nil,
                statuses: Components.Schemas.app_permissions.statusesPayload? = nil,
                vulnerability_alerts: Components.Schemas.app_permissions
                    .vulnerability_alertsPayload? = nil,
                workflows: Components.Schemas.app_permissions.workflowsPayload? = nil,
                members: Components.Schemas.app_permissions.membersPayload? = nil,
                organization_administration: Components.Schemas.app_permissions
                    .organization_administrationPayload? = nil,
                organization_custom_roles: Components.Schemas.app_permissions
                    .organization_custom_rolesPayload? = nil,
                organization_announcement_banners: Components.Schemas.app_permissions
                    .organization_announcement_bannersPayload? = nil,
                organization_hooks: Components.Schemas.app_permissions.organization_hooksPayload? =
                    nil,
                organization_personal_access_tokens: Components.Schemas.app_permissions
                    .organization_personal_access_tokensPayload? = nil,
                organization_personal_access_token_requests: Components.Schemas.app_permissions
                    .organization_personal_access_token_requestsPayload? = nil,
                organization_plan: Components.Schemas.app_permissions.organization_planPayload? =
                    nil,
                organization_projects: Components.Schemas.app_permissions
                    .organization_projectsPayload? = nil,
                organization_packages: Components.Schemas.app_permissions
                    .organization_packagesPayload? = nil,
                organization_secrets: Components.Schemas.app_permissions
                    .organization_secretsPayload? = nil,
                organization_self_hosted_runners: Components.Schemas.app_permissions
                    .organization_self_hosted_runnersPayload? = nil,
                organization_user_blocking: Components.Schemas.app_permissions
                    .organization_user_blockingPayload? = nil,
                team_discussions: Components.Schemas.app_permissions.team_discussionsPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.contents = contents
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pull_requests = pull_requests
                self.repository_hooks = repository_hooks
                self.repository_projects = repository_projects
                self.secret_scanning_alerts = secret_scanning_alerts
                self.secrets = secrets
                self.security_events = security_events
                self.single_file = single_file
                self.statuses = statuses
                self.vulnerability_alerts = vulnerability_alerts
                self.workflows = workflows
                self.members = members
                self.organization_administration = organization_administration
                self.organization_custom_roles = organization_custom_roles
                self.organization_announcement_banners = organization_announcement_banners
                self.organization_hooks = organization_hooks
                self.organization_personal_access_tokens = organization_personal_access_tokens
                self.organization_personal_access_token_requests =
                    organization_personal_access_token_requests
                self.organization_plan = organization_plan
                self.organization_projects = organization_projects
                self.organization_packages = organization_packages
                self.organization_secrets = organization_secrets
                self.organization_self_hosted_runners = organization_self_hosted_runners
                self.organization_user_blocking = organization_user_blocking
                self.team_discussions = team_discussions
            }
            public enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case contents
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pull_requests
                case repository_hooks
                case repository_projects
                case secret_scanning_alerts
                case secrets
                case security_events
                case single_file
                case statuses
                case vulnerability_alerts
                case workflows
                case members
                case organization_administration
                case organization_custom_roles
                case organization_announcement_banners
                case organization_hooks
                case organization_personal_access_tokens
                case organization_personal_access_token_requests
                case organization_plan
                case organization_projects
                case organization_packages
                case organization_secrets
                case organization_self_hosted_runners
                case organization_user_blocking
                case team_discussions
            }
        }
        /// Installation
        ///
        /// - Remark: Generated from `#/components/schemas/installation`.
        public struct installation: Codable, Equatable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public struct accountPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/installation/account/value1`.
                public var value1: Components.Schemas.simple_user?
                /// - Remark: Generated from `#/components/schemas/installation/account/value2`.
                public var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.simple_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try? .init(from: decoder)
                    value2 = try? .init(from: decoder)
                    try DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [value1, value2],
                        type: Self.self,
                        codingPath: decoder.codingPath
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public var account: Components.Schemas.installation.accountPayload
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            @frozen
            public enum repository_selectionPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case all
                case selected
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "all": self = .all
                    case "selected": self = .selected
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .all: return "all"
                    case .selected: return "selected"
                    }
                }
                public static var allCases: [repository_selectionPayload] { [.all, .selected] }
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            public var repository_selection:
                Components.Schemas.installation.repository_selectionPayload
            /// - Remark: Generated from `#/components/schemas/installation/access_tokens_url`.
            public var access_tokens_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/app_id`.
            public var app_id: Swift.Int
            /// The ID of the user or organization this token is being scoped to.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/target_id`.
            public var target_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/target_type`.
            public var target_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/permissions`.
            public var permissions: Components.Schemas.app_permissions
            /// - Remark: Generated from `#/components/schemas/installation/events`.
            public var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/installation/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/single_file_name`.
            public var single_file_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/installation/app_slug`.
            public var app_slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/suspended_by`.
            public var suspended_by: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/installation/suspended_at`.
            public var suspended_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/contact_email`.
            public var contact_email: Swift.String?
            /// Creates a new `installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - account:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            ///   - access_tokens_url:
            ///   - repositories_url:
            ///   - html_url:
            ///   - app_id:
            ///   - target_id: The ID of the user or organization this token is being scoped to.
            ///   - target_type:
            ///   - permissions:
            ///   - events:
            ///   - created_at:
            ///   - updated_at:
            ///   - single_file_name:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            ///   - app_slug:
            ///   - suspended_by:
            ///   - suspended_at:
            ///   - contact_email:
            public init(
                id: Swift.Int,
                account: Components.Schemas.installation.accountPayload,
                repository_selection: Components.Schemas.installation.repository_selectionPayload,
                access_tokens_url: Swift.String,
                repositories_url: Swift.String,
                html_url: Swift.String,
                app_id: Swift.Int,
                target_id: Swift.Int,
                target_type: Swift.String,
                permissions: Components.Schemas.app_permissions,
                events: [Swift.String],
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                single_file_name: Swift.String,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil,
                app_slug: Swift.String,
                suspended_by: Components.Schemas.nullable_simple_user,
                suspended_at: Foundation.Date,
                contact_email: Swift.String? = nil
            ) {
                self.id = id
                self.account = account
                self.repository_selection = repository_selection
                self.access_tokens_url = access_tokens_url
                self.repositories_url = repositories_url
                self.html_url = html_url
                self.app_id = app_id
                self.target_id = target_id
                self.target_type = target_type
                self.permissions = permissions
                self.events = events
                self.created_at = created_at
                self.updated_at = updated_at
                self.single_file_name = single_file_name
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
                self.app_slug = app_slug
                self.suspended_by = suspended_by
                self.suspended_at = suspended_at
                self.contact_email = contact_email
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account
                case repository_selection
                case access_tokens_url
                case repositories_url
                case html_url
                case app_id
                case target_id
                case target_type
                case permissions
                case events
                case created_at
                case updated_at
                case single_file_name
                case has_multiple_single_files
                case single_file_paths
                case app_slug
                case suspended_by
                case suspended_at
                case contact_email
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_license_simple: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_license_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                spdx_id: Swift.String,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            @frozen public enum organizationPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/organization/case1`.
                case nullable_simple_user(Components.Schemas.nullable_simple_user)
                /// - Remark: Generated from `#/components/schemas/repository/organization/case2`.
                case simple_user_nameonly(Components.Schemas.simple_user_nameonly)
                /// Parsed a case that was not defined in the OpenAPI document.
                case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    do {
                        self = .nullable_simple_user(try .init(from: decoder))
                        return
                    } catch {}
                    do {
                        self = .simple_user_nameonly(try .init(from: decoder))
                        return
                    } catch {}
                    let container = try decoder.singleValueContainer()
                    let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                    self = .undocumented(value)
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .nullable_simple_user(value): try value.encode(to: encoder)
                    case let .simple_user_nameonly(value): try value.encode(to: encoder)
                    case let .undocumented(value): try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.repository.organizationPayload?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Components.Schemas.string_or_int_date
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Components.Schemas.string_or_int_date
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Components.Schemas.string_or_int_date
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct template_repositoryPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var full_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct ownerPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var site_admin: Swift.Bool?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - avatar_url:
                    ///   - gravatar_id:
                    ///   - url:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.avatar_url = avatar_url
                        self.gravatar_id = gravatar_id
                        self.url = url
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case avatar_url
                        case gravatar_id
                        case url
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case repos_url
                        case events_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner:
                    Components.Schemas.repository.template_repositoryPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archive_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assignees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branches_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaborators_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var comments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compare_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contents_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributors_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deployments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloads_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var git_commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var git_refs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var git_tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issue_comment_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issue_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issues_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keys_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labels_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languages_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var merges_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestones_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notifications_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pulls_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releases_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var ssh_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statuses_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscription_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teams_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var trees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var clone_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirror_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svn_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forks_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var default_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var open_issues_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var is_template: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var has_issues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var has_projects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var has_wiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var has_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var has_downloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushed_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions:
                    Components.Schemas.repository.template_repositoryPayload.permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allow_rebase_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var temp_clone_token: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allow_squash_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allow_auto_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var delete_branch_on_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allow_update_branch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var use_squash_pr_title_as_default: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen
                public enum squash_merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_TITLE
                    case COMMIT_OR_PR_TITLE
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_TITLE": self = .PR_TITLE
                        case "COMMIT_OR_PR_TITLE": self = .COMMIT_OR_PR_TITLE
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_TITLE: return "PR_TITLE"
                        case .COMMIT_OR_PR_TITLE: return "COMMIT_OR_PR_TITLE"
                        }
                    }
                    public static var allCases: [squash_merge_commit_titlePayload] {
                        [.PR_TITLE, .COMMIT_OR_PR_TITLE]
                    }
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squash_merge_commit_title:
                    Components.Schemas.repository.template_repositoryPayload
                        .squash_merge_commit_titlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen
                public enum squash_merge_commit_messagePayload: RawRepresentable, Codable,
                    Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_BODY
                    case COMMIT_MESSAGES
                    case BLANK
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_BODY": self = .PR_BODY
                        case "COMMIT_MESSAGES": self = .COMMIT_MESSAGES
                        case "BLANK": self = .BLANK
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_BODY: return "PR_BODY"
                        case .COMMIT_MESSAGES: return "COMMIT_MESSAGES"
                        case .BLANK: return "BLANK"
                        }
                    }
                    public static var allCases: [squash_merge_commit_messagePayload] {
                        [.PR_BODY, .COMMIT_MESSAGES, .BLANK]
                    }
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squash_merge_commit_message:
                    Components.Schemas.repository.template_repositoryPayload
                        .squash_merge_commit_messagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen
                public enum merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_TITLE
                    case MERGE_MESSAGE
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_TITLE": self = .PR_TITLE
                        case "MERGE_MESSAGE": self = .MERGE_MESSAGE
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_TITLE: return "PR_TITLE"
                        case .MERGE_MESSAGE: return "MERGE_MESSAGE"
                        }
                    }
                    public static var allCases: [merge_commit_titlePayload] {
                        [.PR_TITLE, .MERGE_MESSAGE]
                    }
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var merge_commit_title:
                    Components.Schemas.repository.template_repositoryPayload
                        .merge_commit_titlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen
                public enum merge_commit_messagePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_BODY
                    case PR_TITLE
                    case BLANK
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_BODY": self = .PR_BODY
                        case "PR_TITLE": self = .PR_TITLE
                        case "BLANK": self = .BLANK
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_BODY: return "PR_BODY"
                        case .PR_TITLE: return "PR_TITLE"
                        case .BLANK: return "BLANK"
                        }
                    }
                    public static var allCases: [merge_commit_messagePayload] {
                        [.PR_BODY, .PR_TITLE, .BLANK]
                    }
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var merge_commit_message:
                    Components.Schemas.repository.template_repositoryPayload
                        .merge_commit_messagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allow_merge_commit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var network_count: Swift.Int?
                /// Creates a new `template_repositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - name:
                ///   - full_name:
                ///   - owner:
                ///   - _private:
                ///   - html_url:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archive_url:
                ///   - assignees_url:
                ///   - blobs_url:
                ///   - branches_url:
                ///   - collaborators_url:
                ///   - comments_url:
                ///   - commits_url:
                ///   - compare_url:
                ///   - contents_url:
                ///   - contributors_url:
                ///   - deployments_url:
                ///   - downloads_url:
                ///   - events_url:
                ///   - forks_url:
                ///   - git_commits_url:
                ///   - git_refs_url:
                ///   - git_tags_url:
                ///   - git_url:
                ///   - issue_comment_url:
                ///   - issue_events_url:
                ///   - issues_url:
                ///   - keys_url:
                ///   - labels_url:
                ///   - languages_url:
                ///   - merges_url:
                ///   - milestones_url:
                ///   - notifications_url:
                ///   - pulls_url:
                ///   - releases_url:
                ///   - ssh_url:
                ///   - stargazers_url:
                ///   - statuses_url:
                ///   - subscribers_url:
                ///   - subscription_url:
                ///   - tags_url:
                ///   - teams_url:
                ///   - trees_url:
                ///   - clone_url:
                ///   - mirror_url:
                ///   - hooks_url:
                ///   - svn_url:
                ///   - homepage:
                ///   - language:
                ///   - forks_count:
                ///   - stargazers_count:
                ///   - watchers_count:
                ///   - size:
                ///   - default_branch:
                ///   - open_issues_count:
                ///   - is_template:
                ///   - topics:
                ///   - has_issues:
                ///   - has_projects:
                ///   - has_wiki:
                ///   - has_pages:
                ///   - has_downloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushed_at:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - allow_rebase_merge:
                ///   - temp_clone_token:
                ///   - allow_squash_merge:
                ///   - allow_auto_merge:
                ///   - delete_branch_on_merge:
                ///   - allow_update_branch:
                ///   - use_squash_pr_title_as_default:
                ///   - squash_merge_commit_title: The default value for a squash merge commit title:
                ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                ///   - merge_commit_title: The default value for a merge commit title.
                ///   - merge_commit_message: The default value for a merge commit message.
                ///   - allow_merge_commit:
                ///   - subscribers_count:
                ///   - network_count:
                public init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    full_name: Swift.String? = nil,
                    owner: Components.Schemas.repository.template_repositoryPayload.ownerPayload? =
                        nil,
                    _private: Swift.Bool? = nil,
                    html_url: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archive_url: Swift.String? = nil,
                    assignees_url: Swift.String? = nil,
                    blobs_url: Swift.String? = nil,
                    branches_url: Swift.String? = nil,
                    collaborators_url: Swift.String? = nil,
                    comments_url: Swift.String? = nil,
                    commits_url: Swift.String? = nil,
                    compare_url: Swift.String? = nil,
                    contents_url: Swift.String? = nil,
                    contributors_url: Swift.String? = nil,
                    deployments_url: Swift.String? = nil,
                    downloads_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    forks_url: Swift.String? = nil,
                    git_commits_url: Swift.String? = nil,
                    git_refs_url: Swift.String? = nil,
                    git_tags_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    issue_comment_url: Swift.String? = nil,
                    issue_events_url: Swift.String? = nil,
                    issues_url: Swift.String? = nil,
                    keys_url: Swift.String? = nil,
                    labels_url: Swift.String? = nil,
                    languages_url: Swift.String? = nil,
                    merges_url: Swift.String? = nil,
                    milestones_url: Swift.String? = nil,
                    notifications_url: Swift.String? = nil,
                    pulls_url: Swift.String? = nil,
                    releases_url: Swift.String? = nil,
                    ssh_url: Swift.String? = nil,
                    stargazers_url: Swift.String? = nil,
                    statuses_url: Swift.String? = nil,
                    subscribers_url: Swift.String? = nil,
                    subscription_url: Swift.String? = nil,
                    tags_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil,
                    trees_url: Swift.String? = nil,
                    clone_url: Swift.String? = nil,
                    mirror_url: Swift.String? = nil,
                    hooks_url: Swift.String? = nil,
                    svn_url: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forks_count: Swift.Int? = nil,
                    stargazers_count: Swift.Int? = nil,
                    watchers_count: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    default_branch: Swift.String? = nil,
                    open_issues_count: Swift.Int? = nil,
                    is_template: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    has_issues: Swift.Bool? = nil,
                    has_projects: Swift.Bool? = nil,
                    has_wiki: Swift.Bool? = nil,
                    has_pages: Swift.Bool? = nil,
                    has_downloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushed_at: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.repository.template_repositoryPayload
                        .permissionsPayload? = nil,
                    allow_rebase_merge: Swift.Bool? = nil,
                    temp_clone_token: Swift.String? = nil,
                    allow_squash_merge: Swift.Bool? = nil,
                    allow_auto_merge: Swift.Bool? = nil,
                    delete_branch_on_merge: Swift.Bool? = nil,
                    allow_update_branch: Swift.Bool? = nil,
                    use_squash_pr_title_as_default: Swift.Bool? = nil,
                    squash_merge_commit_title: Components.Schemas.repository
                        .template_repositoryPayload.squash_merge_commit_titlePayload? = nil,
                    squash_merge_commit_message: Components.Schemas.repository
                        .template_repositoryPayload.squash_merge_commit_messagePayload? = nil,
                    merge_commit_title: Components.Schemas.repository.template_repositoryPayload
                        .merge_commit_titlePayload? = nil,
                    merge_commit_message: Components.Schemas.repository.template_repositoryPayload
                        .merge_commit_messagePayload? = nil,
                    allow_merge_commit: Swift.Bool? = nil,
                    subscribers_count: Swift.Int? = nil,
                    network_count: Swift.Int? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.full_name = full_name
                    self.owner = owner
                    self._private = _private
                    self.html_url = html_url
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archive_url = archive_url
                    self.assignees_url = assignees_url
                    self.blobs_url = blobs_url
                    self.branches_url = branches_url
                    self.collaborators_url = collaborators_url
                    self.comments_url = comments_url
                    self.commits_url = commits_url
                    self.compare_url = compare_url
                    self.contents_url = contents_url
                    self.contributors_url = contributors_url
                    self.deployments_url = deployments_url
                    self.downloads_url = downloads_url
                    self.events_url = events_url
                    self.forks_url = forks_url
                    self.git_commits_url = git_commits_url
                    self.git_refs_url = git_refs_url
                    self.git_tags_url = git_tags_url
                    self.git_url = git_url
                    self.issue_comment_url = issue_comment_url
                    self.issue_events_url = issue_events_url
                    self.issues_url = issues_url
                    self.keys_url = keys_url
                    self.labels_url = labels_url
                    self.languages_url = languages_url
                    self.merges_url = merges_url
                    self.milestones_url = milestones_url
                    self.notifications_url = notifications_url
                    self.pulls_url = pulls_url
                    self.releases_url = releases_url
                    self.ssh_url = ssh_url
                    self.stargazers_url = stargazers_url
                    self.statuses_url = statuses_url
                    self.subscribers_url = subscribers_url
                    self.subscription_url = subscription_url
                    self.tags_url = tags_url
                    self.teams_url = teams_url
                    self.trees_url = trees_url
                    self.clone_url = clone_url
                    self.mirror_url = mirror_url
                    self.hooks_url = hooks_url
                    self.svn_url = svn_url
                    self.homepage = homepage
                    self.language = language
                    self.forks_count = forks_count
                    self.stargazers_count = stargazers_count
                    self.watchers_count = watchers_count
                    self.size = size
                    self.default_branch = default_branch
                    self.open_issues_count = open_issues_count
                    self.is_template = is_template
                    self.topics = topics
                    self.has_issues = has_issues
                    self.has_projects = has_projects
                    self.has_wiki = has_wiki
                    self.has_pages = has_pages
                    self.has_downloads = has_downloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushed_at = pushed_at
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.allow_rebase_merge = allow_rebase_merge
                    self.temp_clone_token = temp_clone_token
                    self.allow_squash_merge = allow_squash_merge
                    self.allow_auto_merge = allow_auto_merge
                    self.delete_branch_on_merge = delete_branch_on_merge
                    self.allow_update_branch = allow_update_branch
                    self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                    self.squash_merge_commit_title = squash_merge_commit_title
                    self.squash_merge_commit_message = squash_merge_commit_message
                    self.merge_commit_title = merge_commit_title
                    self.merge_commit_message = merge_commit_message
                    self.allow_merge_commit = allow_merge_commit
                    self.subscribers_count = subscribers_count
                    self.network_count = network_count
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case full_name
                    case owner
                    case _private = "private"
                    case html_url
                    case description
                    case fork
                    case url
                    case archive_url
                    case assignees_url
                    case blobs_url
                    case branches_url
                    case collaborators_url
                    case comments_url
                    case commits_url
                    case compare_url
                    case contents_url
                    case contributors_url
                    case deployments_url
                    case downloads_url
                    case events_url
                    case forks_url
                    case git_commits_url
                    case git_refs_url
                    case git_tags_url
                    case git_url
                    case issue_comment_url
                    case issue_events_url
                    case issues_url
                    case keys_url
                    case labels_url
                    case languages_url
                    case merges_url
                    case milestones_url
                    case notifications_url
                    case pulls_url
                    case releases_url
                    case ssh_url
                    case stargazers_url
                    case statuses_url
                    case subscribers_url
                    case subscription_url
                    case tags_url
                    case teams_url
                    case trees_url
                    case clone_url
                    case mirror_url
                    case hooks_url
                    case svn_url
                    case homepage
                    case language
                    case forks_count
                    case stargazers_count
                    case watchers_count
                    case size
                    case default_branch
                    case open_issues_count
                    case is_template
                    case topics
                    case has_issues
                    case has_projects
                    case has_wiki
                    case has_pages
                    case has_downloads
                    case archived
                    case disabled
                    case visibility
                    case pushed_at
                    case created_at
                    case updated_at
                    case permissions
                    case allow_rebase_merge
                    case temp_clone_token
                    case allow_squash_merge
                    case allow_auto_merge
                    case delete_branch_on_merge
                    case allow_update_branch
                    case use_squash_pr_title_as_default
                    case squash_merge_commit_title
                    case squash_merge_commit_message
                    case merge_commit_title
                    case merge_commit_message
                    case allow_merge_commit
                    case subscribers_count
                    case network_count
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var template_repository:
                Components.Schemas.repository.template_repositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated) public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen
            public enum squash_merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case COMMIT_OR_PR_TITLE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "COMMIT_OR_PR_TITLE": self = .COMMIT_OR_PR_TITLE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .COMMIT_OR_PR_TITLE: return "COMMIT_OR_PR_TITLE"
                    }
                }
                public static var allCases: [squash_merge_commit_titlePayload] {
                    [.PR_TITLE, .COMMIT_OR_PR_TITLE]
                }
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title:
                Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen
            public enum squash_merge_commit_messagePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case COMMIT_MESSAGES
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "COMMIT_MESSAGES": self = .COMMIT_MESSAGES
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .COMMIT_MESSAGES: return "COMMIT_MESSAGES"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [squash_merge_commit_messagePayload] {
                    [.PR_BODY, .COMMIT_MESSAGES, .BLANK]
                }
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message:
                Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen
            public enum merge_commit_titlePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case MERGE_MESSAGE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "MERGE_MESSAGE": self = .MERGE_MESSAGE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .MERGE_MESSAGE: return "MERGE_MESSAGE"
                    }
                }
                public static var allCases: [merge_commit_titlePayload] {
                    [.PR_TITLE, .MERGE_MESSAGE]
                }
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen
            public enum merge_commit_messagePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case PR_TITLE
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "PR_TITLE": self = .PR_TITLE
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .PR_TITLE: return "PR_TITLE"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [merge_commit_messagePayload] {
                    [.PR_BODY, .PR_TITLE, .BLANK]
                }
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message:
                Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.repository.organizationPayload? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Components.Schemas.string_or_int_date,
                created_at: Components.Schemas.string_or_int_date,
                updated_at: Components.Schemas.string_or_int_date,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.repository.template_repositoryPayload? =
                    nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository
                    .squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository
                    .squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? =
                    nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-or-int-date`.
        @frozen public enum string_or_int_date: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case1`.
            case string_date(Components.Schemas.string_date)
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case2`.
            case int_date(Components.Schemas.int_date)
            /// Parsed a case that was not defined in the OpenAPI document.
            case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
            public init(from decoder: any Decoder) throws {
                do {
                    self = .string_date(try .init(from: decoder))
                    return
                } catch {}
                do {
                    self = .int_date(try .init(from: decoder))
                    return
                } catch {}
                let container = try decoder.singleValueContainer()
                let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                self = .undocumented(value)
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .string_date(value): try value.encode(to: encoder)
                case let .int_date(value): try value.encode(to: encoder)
                case let .undocumented(value): try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-date`.
        public typealias string_date = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/int-date`.
        public typealias int_date = Swift.Int
        /// Authentication token for a GitHub App installed on a user or org.
        ///
        /// - Remark: Generated from `#/components/schemas/installation-token`.
        public struct installation_token: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/installation-token/token`.
            public var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/expires_at`.
            public var expires_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/permissions`.
            public var permissions: Components.Schemas.app_permissions?
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            @frozen
            public enum repository_selectionPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case all
                case selected
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "all": self = .all
                    case "selected": self = .selected
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .all: return "all"
                    case .selected: return "selected"
                    }
                }
                public static var allCases: [repository_selectionPayload] { [.all, .selected] }
            }
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            public var repository_selection:
                Components.Schemas.installation_token.repository_selectionPayload?
            /// - Remark: Generated from `#/components/schemas/installation-token/repositories`.
            public var repositories: [Components.Schemas.repository]?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file`.
            public var single_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation-token/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// Creates a new `installation_token`.
            ///
            /// - Parameters:
            ///   - token:
            ///   - expires_at:
            ///   - permissions:
            ///   - repository_selection:
            ///   - repositories:
            ///   - single_file:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            public init(
                token: Swift.String,
                expires_at: Swift.String,
                permissions: Components.Schemas.app_permissions? = nil,
                repository_selection: Components.Schemas.installation_token
                    .repository_selectionPayload? = nil,
                repositories: [Components.Schemas.repository]? = nil,
                single_file: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil
            ) {
                self.token = token
                self.expires_at = expires_at
                self.permissions = permissions
                self.repository_selection = repository_selection
                self.repositories = repositories
                self.single_file = single_file
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
            }
            public enum CodingKeys: String, CodingKey {
                case token
                case expires_at
                case permissions
                case repository_selection
                case repositories
                case single_file
                case has_multiple_single_files
                case single_file_paths
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_of_conduct: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String
            /// Creates a new `code_of_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// The security alert number.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-number`.
        public typealias alert_number = Swift.Int
        /// Details for the vulnerable package.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-package`.
        public struct dependabot_alert_package: Codable, Equatable, Hashable, Sendable {
            /// The package's language or package management ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/ecosystem`.
            public var ecosystem: Swift.String
            /// The unique package name within its ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/name`.
            public var name: Swift.String
            /// Creates a new `dependabot_alert_package`.
            ///
            /// - Parameters:
            ///   - ecosystem: The package's language or package management ecosystem.
            ///   - name: The unique package name within its ecosystem.
            public init(ecosystem: Swift.String, name: Swift.String) {
                self.ecosystem = ecosystem
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case ecosystem
                case name
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ecosystem = try container.decode(Swift.String.self, forKey: .ecosystem)
                name = try container.decode(Swift.String.self, forKey: .name)
                try decoder.ensureNoAdditionalProperties(knownKeys: ["ecosystem", "name"])
            }
        }
        /// Details pertaining to one vulnerable version range for the advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability`.
        public struct dependabot_alert_security_vulnerability: Codable, Equatable, Hashable,
            Sendable
        {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/package`.
            public var package: Components.Schemas.dependabot_alert_package
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            @frozen
            public enum severityPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case low
                case medium
                case high
                case critical
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "low": self = .low
                    case "medium": self = .medium
                    case "high": self = .high
                    case "critical": self = .critical
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .low: return "low"
                    case .medium: return "medium"
                    case .high: return "high"
                    case .critical: return "critical"
                    }
                }
                public static var allCases: [severityPayload] { [.low, .medium, .high, .critical] }
            }
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            public var severity:
                Components.Schemas.dependabot_alert_security_vulnerability.severityPayload
            /// Conditions that identify vulnerable versions of this vulnerability's package.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/vulnerable_version_range`.
            public var vulnerable_version_range: Swift.String
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            public struct first_patched_versionPayload: Codable, Equatable, Hashable, Sendable {
                /// The package version that patches this vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version/identifier`.
                public var identifier: Swift.String
                /// Creates a new `first_patched_versionPayload`.
                ///
                /// - Parameters:
                ///   - identifier: The package version that patches this vulnerability.
                public init(identifier: Swift.String) { self.identifier = identifier }
                public enum CodingKeys: String, CodingKey { case identifier }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    identifier = try container.decode(Swift.String.self, forKey: .identifier)
                    try decoder.ensureNoAdditionalProperties(knownKeys: ["identifier"])
                }
            }
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            public var first_patched_version:
                Components.Schemas.dependabot_alert_security_vulnerability
                    .first_patched_versionPayload
            /// Creates a new `dependabot_alert_security_vulnerability`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - severity: The severity of the vulnerability.
            ///   - vulnerable_version_range: Conditions that identify vulnerable versions of this vulnerability's package.
            ///   - first_patched_version: Details pertaining to the package version that patches this vulnerability.
            public init(
                package: Components.Schemas.dependabot_alert_package,
                severity: Components.Schemas.dependabot_alert_security_vulnerability
                    .severityPayload,
                vulnerable_version_range: Swift.String,
                first_patched_version: Components.Schemas.dependabot_alert_security_vulnerability
                    .first_patched_versionPayload
            ) {
                self.package = package
                self.severity = severity
                self.vulnerable_version_range = vulnerable_version_range
                self.first_patched_version = first_patched_version
            }
            public enum CodingKeys: String, CodingKey {
                case package
                case severity
                case vulnerable_version_range
                case first_patched_version
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                package = try container.decode(
                    Components.Schemas.dependabot_alert_package.self,
                    forKey: .package
                )
                severity = try container.decode(
                    Components.Schemas.dependabot_alert_security_vulnerability.severityPayload.self,
                    forKey: .severity
                )
                vulnerable_version_range = try container.decode(
                    Swift.String.self,
                    forKey: .vulnerable_version_range
                )
                first_patched_version = try container.decode(
                    Components.Schemas.dependabot_alert_security_vulnerability
                        .first_patched_versionPayload.self,
                    forKey: .first_patched_version
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package", "severity", "vulnerable_version_range", "first_patched_version",
                ])
            }
        }
        /// Details for the GitHub Security Advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory`.
        public struct dependabot_alert_security_advisory: Codable, Equatable, Hashable, Sendable {
            /// The unique GitHub Security Advisory ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ghsa_id`.
            public var ghsa_id: Swift.String
            /// The unique CVE ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cve_id`.
            public var cve_id: Swift.String
            /// A short, plain text summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/summary`.
            public var summary: Swift.String
            /// A long-form Markdown-supported description of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/description`.
            public var description: Swift.String
            /// Vulnerable version range information for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/vulnerabilities`.
            public var vulnerabilities: [Components.Schemas.dependabot_alert_security_vulnerability]
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            @frozen
            public enum severityPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case low
                case medium
                case high
                case critical
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "low": self = .low
                    case "medium": self = .medium
                    case "high": self = .high
                    case "critical": self = .critical
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .low: return "low"
                    case .medium: return "medium"
                    case .high: return "high"
                    case .critical: return "critical"
                    }
                }
                public static var allCases: [severityPayload] { [.low, .medium, .high, .critical] }
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            public var severity:
                Components.Schemas.dependabot_alert_security_advisory.severityPayload
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            public struct cvssPayload: Codable, Equatable, Hashable, Sendable {
                /// The overall CVSS score of the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/score`.
                public var score: Swift.Double
                /// The full CVSS vector string for the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/vector_string`.
                public var vector_string: Swift.String
                /// Creates a new `cvssPayload`.
                ///
                /// - Parameters:
                ///   - score: The overall CVSS score of the advisory.
                ///   - vector_string: The full CVSS vector string for the advisory.
                public init(score: Swift.Double, vector_string: Swift.String) {
                    self.score = score
                    self.vector_string = vector_string
                }
                public enum CodingKeys: String, CodingKey {
                    case score
                    case vector_string
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    score = try container.decode(Swift.Double.self, forKey: .score)
                    vector_string = try container.decode(Swift.String.self, forKey: .vector_string)
                    try decoder.ensureNoAdditionalProperties(knownKeys: ["score", "vector_string"])
                }
            }
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            public var cvss: Components.Schemas.dependabot_alert_security_advisory.cvssPayload
            /// A CWE weakness assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload`.
            public struct cwesPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// The unique CWE ID.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/cwe_id`.
                public var cwe_id: Swift.String
                /// The short, plain text name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/name`.
                public var name: Swift.String
                /// Creates a new `cwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cwe_id: The unique CWE ID.
                ///   - name: The short, plain text name of the CWE.
                public init(cwe_id: Swift.String, name: Swift.String) {
                    self.cwe_id = cwe_id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cwe_id
                    case name
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    cwe_id = try container.decode(Swift.String.self, forKey: .cwe_id)
                    name = try container.decode(Swift.String.self, forKey: .name)
                    try decoder.ensureNoAdditionalProperties(knownKeys: ["cwe_id", "name"])
                }
            }
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            public typealias cwesPayload = [Components.Schemas.dependabot_alert_security_advisory
                .cwesPayloadPayload]
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            public var cwes: Components.Schemas.dependabot_alert_security_advisory.cwesPayload
            /// An advisory identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload`.
            public struct identifiersPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                @frozen
                public enum _typePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case CVE
                    case GHSA
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "CVE": self = .CVE
                        case "GHSA": self = .GHSA
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .CVE: return "CVE"
                        case .GHSA: return "GHSA"
                        }
                    }
                    public static var allCases: [_typePayload] { [.CVE, .GHSA] }
                }
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                public var _type:
                    Components.Schemas.dependabot_alert_security_advisory.identifiersPayloadPayload
                        ._typePayload
                /// The value of the advisory identifer.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/value`.
                public var value: Swift.String
                /// Creates a new `identifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of advisory identifier.
                ///   - value: The value of the advisory identifer.
                public init(
                    _type: Components.Schemas.dependabot_alert_security_advisory
                        .identifiersPayloadPayload._typePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    _type = try container.decode(
                        Components.Schemas.dependabot_alert_security_advisory
                            .identifiersPayloadPayload._typePayload.self,
                        forKey: ._type
                    )
                    value = try container.decode(Swift.String.self, forKey: .value)
                    try decoder.ensureNoAdditionalProperties(knownKeys: ["type", "value"])
                }
            }
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            public typealias identifiersPayload = [Components.Schemas
                .dependabot_alert_security_advisory.identifiersPayloadPayload]
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            public var identifiers:
                Components.Schemas.dependabot_alert_security_advisory.identifiersPayload
            /// A link to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload`.
            public struct referencesPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// The URL of the reference.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload/url`.
                public var url: Swift.String
                /// Creates a new `referencesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL of the reference.
                public init(url: Swift.String) { self.url = url }
                public enum CodingKeys: String, CodingKey { case url }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    url = try container.decode(Swift.String.self, forKey: .url)
                    try decoder.ensureNoAdditionalProperties(knownKeys: ["url"])
                }
            }
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            public typealias referencesPayload = [Components.Schemas
                .dependabot_alert_security_advisory.referencesPayloadPayload]
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            public var references:
                Components.Schemas.dependabot_alert_security_advisory.referencesPayload
            /// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/published_at`.
            public var published_at: Foundation.Date
            /// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/updated_at`.
            public var updated_at: Foundation.Date
            /// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/withdrawn_at`.
            public var withdrawn_at: Foundation.Date
            /// Creates a new `dependabot_alert_security_advisory`.
            ///
            /// - Parameters:
            ///   - ghsa_id: The unique GitHub Security Advisory ID assigned to the advisory.
            ///   - cve_id: The unique CVE ID assigned to the advisory.
            ///   - summary: A short, plain text summary of the advisory.
            ///   - description: A long-form Markdown-supported description of the advisory.
            ///   - vulnerabilities: Vulnerable version range information for the advisory.
            ///   - severity: The severity of the advisory.
            ///   - cvss: Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///   - cwes: Details for the advisory pertaining to Common Weakness Enumeration.
            ///   - identifiers: Values that identify this advisory among security information sources.
            ///   - references: Links to additional advisory information.
            ///   - published_at: The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - updated_at: The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - withdrawn_at: The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            public init(
                ghsa_id: Swift.String,
                cve_id: Swift.String,
                summary: Swift.String,
                description: Swift.String,
                vulnerabilities: [Components.Schemas.dependabot_alert_security_vulnerability],
                severity: Components.Schemas.dependabot_alert_security_advisory.severityPayload,
                cvss: Components.Schemas.dependabot_alert_security_advisory.cvssPayload,
                cwes: Components.Schemas.dependabot_alert_security_advisory.cwesPayload,
                identifiers: Components.Schemas.dependabot_alert_security_advisory
                    .identifiersPayload,
                references: Components.Schemas.dependabot_alert_security_advisory.referencesPayload,
                published_at: Foundation.Date,
                updated_at: Foundation.Date,
                withdrawn_at: Foundation.Date
            ) {
                self.ghsa_id = ghsa_id
                self.cve_id = cve_id
                self.summary = summary
                self.description = description
                self.vulnerabilities = vulnerabilities
                self.severity = severity
                self.cvss = cvss
                self.cwes = cwes
                self.identifiers = identifiers
                self.references = references
                self.published_at = published_at
                self.updated_at = updated_at
                self.withdrawn_at = withdrawn_at
            }
            public enum CodingKeys: String, CodingKey {
                case ghsa_id
                case cve_id
                case summary
                case description
                case vulnerabilities
                case severity
                case cvss
                case cwes
                case identifiers
                case references
                case published_at
                case updated_at
                case withdrawn_at
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ghsa_id = try container.decode(Swift.String.self, forKey: .ghsa_id)
                cve_id = try container.decode(Swift.String.self, forKey: .cve_id)
                summary = try container.decode(Swift.String.self, forKey: .summary)
                description = try container.decode(Swift.String.self, forKey: .description)
                vulnerabilities = try container.decode(
                    [Components.Schemas.dependabot_alert_security_vulnerability].self,
                    forKey: .vulnerabilities
                )
                severity = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.severityPayload.self,
                    forKey: .severity
                )
                cvss = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.cvssPayload.self,
                    forKey: .cvss
                )
                cwes = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.cwesPayload.self,
                    forKey: .cwes
                )
                identifiers = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.identifiersPayload.self,
                    forKey: .identifiers
                )
                references = try container.decode(
                    Components.Schemas.dependabot_alert_security_advisory.referencesPayload.self,
                    forKey: .references
                )
                published_at = try container.decode(Foundation.Date.self, forKey: .published_at)
                updated_at = try container.decode(Foundation.Date.self, forKey: .updated_at)
                withdrawn_at = try container.decode(Foundation.Date.self, forKey: .withdrawn_at)
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id", "cve_id", "summary", "description", "vulnerabilities", "severity",
                    "cvss", "cwes", "identifiers", "references", "published_at", "updated_at",
                    "withdrawn_at",
                ])
            }
        }
        /// The REST API URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-url`.
        public typealias alert_url = Swift.String
        /// The GitHub URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-html-url`.
        public typealias alert_html_url = Swift.String
        /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-created-at`.
        public typealias alert_created_at = Foundation.Date
        /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-updated-at`.
        public typealias alert_updated_at = Foundation.Date
        /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-dismissed-at`.
        public typealias alert_dismissed_at = Foundation.Date
        /// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-fixed-at`.
        public typealias alert_fixed_at = Foundation.Date
        /// The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-auto-dismissed-at`.
        public typealias alert_auto_dismissed_at = Foundation.Date
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        public struct simple_repository: Codable, Equatable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            public var id: Swift.Int
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            public var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            public var owner: Components.Schemas.simple_user
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            public var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            public var html_url: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            public var description: Swift.String
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            public var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            public var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            public var archive_url: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            public var branches_url: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            public var comments_url: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            public var commits_url: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            public var compare_url: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            public var contents_url: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            public var events_url: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            public var forks_url: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            public var issues_url: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            public var keys_url: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            public var labels_url: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            public var languages_url: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            public var merges_url: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            public var releases_url: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            public var tags_url: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            public var teams_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            public var trees_url: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// Creates a new `simple_repository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - node_id: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - full_name: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - html_url: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archive_url: A template for the API URL to download the repository as an archive.
            ///   - assignees_url: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobs_url: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branches_url: A template for the API URL to get information about branches in the repository.
            ///   - collaborators_url: A template for the API URL to get information about collaborators of the repository.
            ///   - comments_url: A template for the API URL to get information about comments on the repository.
            ///   - commits_url: A template for the API URL to get information about commits on the repository.
            ///   - compare_url: A template for the API URL to compare two commits or refs.
            ///   - contents_url: A template for the API URL to get the contents of the repository.
            ///   - contributors_url: A template for the API URL to list the contributors to the repository.
            ///   - deployments_url: The API URL to list the deployments of the repository.
            ///   - downloads_url: The API URL to list the downloads on the repository.
            ///   - events_url: The API URL to list the events of the repository.
            ///   - forks_url: The API URL to list the forks of the repository.
            ///   - git_commits_url: A template for the API URL to get information about Git commits of the repository.
            ///   - git_refs_url: A template for the API URL to get information about Git refs of the repository.
            ///   - git_tags_url: A template for the API URL to get information about Git tags of the repository.
            ///   - issue_comment_url: A template for the API URL to get information about issue comments on the repository.
            ///   - issue_events_url: A template for the API URL to get information about issue events on the repository.
            ///   - issues_url: A template for the API URL to get information about issues on the repository.
            ///   - keys_url: A template for the API URL to get information about deploy keys on the repository.
            ///   - labels_url: A template for the API URL to get information about labels of the repository.
            ///   - languages_url: The API URL to get information about the languages of the repository.
            ///   - merges_url: The API URL to merge branches in the repository.
            ///   - milestones_url: A template for the API URL to get information about milestones of the repository.
            ///   - notifications_url: A template for the API URL to get information about notifications on the repository.
            ///   - pulls_url: A template for the API URL to get information about pull requests on the repository.
            ///   - releases_url: A template for the API URL to get information about releases on the repository.
            ///   - stargazers_url: The API URL to list the stargazers on the repository.
            ///   - statuses_url: A template for the API URL to get information about statuses of a commit.
            ///   - subscribers_url: The API URL to list the subscribers on the repository.
            ///   - subscription_url: The API URL to subscribe to notifications for this repository.
            ///   - tags_url: The API URL to get information about tags on the repository.
            ///   - teams_url: The API URL to list the teams on the repository.
            ///   - trees_url: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooks_url: The API URL to list the hooks on the repository.
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                hooks_url: Swift.String
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.hooks_url = hooks_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case hooks_url
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_milestone: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen
            public enum statePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case open
                case closed
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "open": self = .open
                    case "closed": self = .closed
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .open: return "open"
                    case .closed: return "closed"
                    }
                }
                public static var allCases: [statePayload] { [.open, .closed] }
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date
            /// Creates a new `nullable_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_milestone.statePayload,
                title: Swift.String,
                description: Swift.String,
                creator: Components.Schemas.nullable_simple_user,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date,
                due_on: Foundation.Date
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_integration: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_simple_user
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(Swift.String.self, forKey: .issues)
                    checks = try container.decodeIfPresent(Swift.String.self, forKey: .checks)
                    metadata = try container.decodeIfPresent(Swift.String.self, forKey: .metadata)
                    contents = try container.decodeIfPresent(Swift.String.self, forKey: .contents)
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues", "checks", "metadata", "contents", "deployments",
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(issues, forKey: .issues)
                    try container.encodeIfPresent(checks, forKey: .checks)
                    try container.encodeIfPresent(metadata, forKey: .metadata)
                    try container.encodeIfPresent(contents, forKey: .contents)
                    try container.encodeIfPresent(deployments, forKey: .deployments)
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_simple_user,
                name: Swift.String,
                description: Swift.String,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen
        public enum author_association: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case COLLABORATOR
            case CONTRIBUTOR
            case FIRST_TIMER
            case FIRST_TIME_CONTRIBUTOR
            case MANNEQUIN
            case MEMBER
            case NONE
            case OWNER
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "COLLABORATOR": self = .COLLABORATOR
                case "CONTRIBUTOR": self = .CONTRIBUTOR
                case "FIRST_TIMER": self = .FIRST_TIMER
                case "FIRST_TIME_CONTRIBUTOR": self = .FIRST_TIME_CONTRIBUTOR
                case "MANNEQUIN": self = .MANNEQUIN
                case "MEMBER": self = .MEMBER
                case "NONE": self = .NONE
                case "OWNER": self = .OWNER
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .COLLABORATOR: return "COLLABORATOR"
                case .CONTRIBUTOR: return "CONTRIBUTOR"
                case .FIRST_TIMER: return "FIRST_TIMER"
                case .FIRST_TIME_CONTRIBUTOR: return "FIRST_TIME_CONTRIBUTOR"
                case .MANNEQUIN: return "MANNEQUIN"
                case .MEMBER: return "MEMBER"
                case .NONE: return "NONE"
                case .OWNER: return "OWNER"
                }
            }
            public static var allCases: [author_association] {
                [
                    .COLLABORATOR, .CONTRIBUTOR, .FIRST_TIMER, .FIRST_TIME_CONTRIBUTOR, .MANNEQUIN,
                    .MEMBER, .NONE, .OWNER,
                ]
            }
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_rollup: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        public struct issue: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            public var node_id: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            public var html_url: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            public var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            public var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen
            public enum state_reasonPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case completed
                case reopened
                case not_planned
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "completed": self = .completed
                    case "reopened": self = .reopened
                    case "not_planned": self = .not_planned
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .completed: return "completed"
                    case .reopened: return "reopened"
                    case .not_planned: return "not_planned"
                    }
                }
                public static var allCases: [state_reasonPayload] {
                    [.completed, .reopened, .not_planned]
                }
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            public var state_reason: Components.Schemas.issue.state_reasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            public var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            public var user: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/issue/labelsPayload`.
            @frozen public enum labelsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                public struct Case2Payload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/id`.
                    public var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/color`.
                    public var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/default`.
                    public var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    public init(
                        id: Swift.Int64? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                case case2(Components.Schemas.issue.labelsPayloadPayload.Case2Payload)
                /// Parsed a case that was not defined in the OpenAPI document.
                case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {}
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {}
                    let container = try decoder.singleValueContainer()
                    let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                    self = .undocumented(value)
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value): try value.encode(to: encoder)
                    case let .case2(value): try value.encode(to: encoder)
                    case let .undocumented(value): try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public typealias labelsPayload = [Components.Schemas.issue.labelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public var labels: Components.Schemas.issue.labelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            public var assignee: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            public var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            public var milestone: Components.Schemas.nullable_milestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public struct pull_requestPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                public var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                public var diff_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                public var html_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                public var patch_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                public var url: Swift.String
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                public init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String,
                    html_url: Swift.String,
                    patch_url: Swift.String,
                    url: Swift.String
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public var pull_request: Components.Schemas.issue.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            public var closed_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            public var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            public var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            public var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            public var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the issue
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - state_reason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - comments:
            ///   - pull_request:
            ///   - closed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - draft:
            ///   - closed_by:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - repository:
            ///   - performed_via_github_app:
            ///   - author_association:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                state_reason: Components.Schemas.issue.state_reasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.nullable_simple_user,
                labels: Components.Schemas.issue.labelsPayload,
                assignee: Components.Schemas.nullable_simple_user? = nil,
                assignees: [Components.Schemas.simple_user]? = nil,
                milestone: Components.Schemas.nullable_milestone? = nil,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                comments: Swift.Int,
                pull_request: Components.Schemas.issue.pull_requestPayload? = nil,
                closed_at: Foundation.Date? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                draft: Swift.Bool? = nil,
                closed_by: Components.Schemas.nullable_simple_user? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                repository: Components.Schemas.repository? = nil,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                author_association: Components.Schemas.author_association,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.number = number
                self.state = state
                self.state_reason = state_reason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.comments = comments
                self.pull_request = pull_request
                self.closed_at = closed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.draft = draft
                self.closed_by = closed_by
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.repository = repository
                self.performed_via_github_app = performed_via_github_app
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case number
                case state
                case state_reason
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case active_lock_reason
                case comments
                case pull_request
                case closed_at
                case created_at
                case updated_at
                case draft
                case closed_by
                case body_html
                case body_text
                case timeline_url
                case repository
                case performed_via_github_app
                case author_association
                case reactions
            }
        }
        /// Comments provide a way for people to collaborate on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/issue-comment`.
        public struct issue_comment: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-comment/node_id`.
            public var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/url`.
            public var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/user`.
            public var user: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/issue-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/author_association`.
            public var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/issue-comment/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_integration?
            /// - Remark: Generated from `#/components/schemas/issue-comment/reactions`.
            public var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `issue_comment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.nullable_simple_user,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_association,
                performed_via_github_app: Components.Schemas.nullable_integration? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_and_analysis: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen
                public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case enabled
                    case disabled
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "enabled": self = .enabled
                        case "disabled": self = .disabled
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .enabled: return "enabled"
                        case .disabled: return "disabled"
                        }
                    }
                    public static var allCases: [statusPayload] { [.enabled, .disabled] }
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status:
                    Components.Schemas.security_and_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(
                    status: Components.Schemas.security_and_analysis.advanced_securityPayload
                        .statusPayload? = nil
                ) { self.status = status }
                public enum CodingKeys: String, CodingKey { case status }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security:
                Components.Schemas.security_and_analysis.advanced_securityPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen
                public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case enabled
                    case disabled
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "enabled": self = .enabled
                        case "disabled": self = .disabled
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .enabled: return "enabled"
                        case .disabled: return "disabled"
                        }
                    }
                    public static var allCases: [statusPayload] { [.enabled, .disabled] }
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status:
                    Components.Schemas.security_and_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(
                    status: Components.Schemas.security_and_analysis.secret_scanningPayload
                        .statusPayload? = nil
                ) { self.status = status }
                public enum CodingKeys: String, CodingKey { case status }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning:
                Components.Schemas.security_and_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Equatable, Hashable,
                Sendable
            {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen
                public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case enabled
                    case disabled
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "enabled": self = .enabled
                        case "disabled": self = .disabled
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .enabled: return "enabled"
                        case .disabled: return "disabled"
                        }
                    }
                    public static var allCases: [statusPayload] { [.enabled, .disabled] }
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status:
                    Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload
                        .statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(
                    status: Components.Schemas.security_and_analysis
                        .secret_scanning_push_protectionPayload.statusPayload? = nil
                ) { self.status = status }
                public enum CodingKeys: String, CodingKey { case status }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection:
                Components.Schemas.security_and_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_and_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_and_analysis
                    .advanced_securityPayload? = nil,
                secret_scanning: Components.Schemas.security_and_analysis.secret_scanningPayload? =
                    nil,
                secret_scanning_push_protection: Components.Schemas.security_and_analysis
                    .secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// A GitHub organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct organization_simple: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String
            /// Creates a new `organization_simple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
            }
        }
        /// Organization Full
        ///
        /// - Remark: Generated from `#/components/schemas/organization-full`.
        public struct organization_full: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-full/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/is_verified`.
            public var is_verified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/has_organization_projects`.
            public var has_organization_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/has_repository_projects`.
            public var has_repository_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-full/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/total_private_repos`.
            public var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/owned_private_repos`.
            public var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/private_gists`.
            public var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/disk_usage`.
            public var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/collaborators`.
            public var collaborators: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/billing_email`.
            public var billing_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            public struct planPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/private_repos`.
                public var private_repos: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/filled_seats`.
                public var filled_seats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/seats`.
                public var seats: Swift.Int?
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                ///   - filled_seats:
                ///   - seats:
                public init(
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int,
                    filled_seats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                    self.filled_seats = filled_seats
                    self.seats = seats
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case private_repos
                    case filled_seats
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            public var plan: Components.Schemas.organization_full.planPayload?
            /// - Remark: Generated from `#/components/schemas/organization-full/default_repository_permission`.
            public var default_repository_permission: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_repositories`.
            public var members_can_create_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/two_factor_requirement_enabled`.
            public var two_factor_requirement_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_allowed_repository_creation_type`.
            public var members_allowed_repository_creation_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_repositories`.
            public var members_can_create_public_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_repositories`.
            public var members_can_create_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_internal_repositories`.
            public var members_can_create_internal_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_pages`.
            public var members_can_create_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_pages`.
            public var members_can_create_public_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_pages`.
            public var members_can_create_private_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_fork_private_repositories`.
            public var members_can_fork_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/updated_at`.
            public var updated_at: Foundation.Date
            /// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/advanced_security_enabled_for_new_repositories`.
            public var advanced_security_enabled_for_new_repositories: Swift.Bool?
            /// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            /// this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_alerts_enabled_for_new_repositories`.
            public var dependabot_alerts_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            /// to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_security_updates_enabled_for_new_repositories`.
            public var dependabot_security_updates_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependency_graph_enabled_for_new_repositories`.
            public var dependency_graph_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_enabled_for_new_repositories`.
            public var secret_scanning_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning push protection is automatically enabled for new repositories and repositories
            /// transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_enabled_for_new_repositories`.
            public var secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool?
            /// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link_enabled`.
            public var secret_scanning_push_protection_custom_link_enabled: Swift.Bool?
            /// An optional URL string to display to contributors who are blocked from pushing a secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link`.
            public var secret_scanning_push_protection_custom_link: Swift.String?
            /// Creates a new `organization_full`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - twitter_username:
            ///   - is_verified:
            ///   - has_organization_projects:
            ///   - has_repository_projects:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - html_url:
            ///   - created_at:
            ///   - _type:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - private_gists:
            ///   - disk_usage:
            ///   - collaborators:
            ///   - billing_email:
            ///   - plan:
            ///   - default_repository_permission:
            ///   - members_can_create_repositories:
            ///   - two_factor_requirement_enabled:
            ///   - members_allowed_repository_creation_type:
            ///   - members_can_create_public_repositories:
            ///   - members_can_create_private_repositories:
            ///   - members_can_create_internal_repositories:
            ///   - members_can_create_pages:
            ///   - members_can_create_public_pages:
            ///   - members_can_create_private_pages:
            ///   - members_can_fork_private_repositories:
            ///   - web_commit_signoff_required:
            ///   - updated_at:
            ///   - advanced_security_enabled_for_new_repositories: Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///   - dependabot_alerts_enabled_for_new_repositories: Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            ///   - dependabot_security_updates_enabled_for_new_repositories: Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            ///   - dependency_graph_enabled_for_new_repositories: Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_enabled_for_new_repositories: Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_push_protection_enabled_for_new_repositories: Whether secret scanning push protection is automatically enabled for new repositories and repositories
            ///   - secret_scanning_push_protection_custom_link_enabled: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///   - secret_scanning_push_protection_custom_link: An optional URL string to display to contributors who are blocked from pushing a secret.
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                is_verified: Swift.Bool? = nil,
                has_organization_projects: Swift.Bool,
                has_repository_projects: Swift.Bool,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                html_url: Swift.String,
                created_at: Foundation.Date,
                _type: Swift.String,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                private_gists: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil,
                billing_email: Swift.String? = nil,
                plan: Components.Schemas.organization_full.planPayload? = nil,
                default_repository_permission: Swift.String? = nil,
                members_can_create_repositories: Swift.Bool? = nil,
                two_factor_requirement_enabled: Swift.Bool? = nil,
                members_allowed_repository_creation_type: Swift.String? = nil,
                members_can_create_public_repositories: Swift.Bool? = nil,
                members_can_create_private_repositories: Swift.Bool? = nil,
                members_can_create_internal_repositories: Swift.Bool? = nil,
                members_can_create_pages: Swift.Bool? = nil,
                members_can_create_public_pages: Swift.Bool? = nil,
                members_can_create_private_pages: Swift.Bool? = nil,
                members_can_fork_private_repositories: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                updated_at: Foundation.Date,
                advanced_security_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_alerts_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_security_updates_enabled_for_new_repositories: Swift.Bool? = nil,
                dependency_graph_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link_enabled: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.twitter_username = twitter_username
                self.is_verified = is_verified
                self.has_organization_projects = has_organization_projects
                self.has_repository_projects = has_repository_projects
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.html_url = html_url
                self.created_at = created_at
                self._type = _type
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.private_gists = private_gists
                self.disk_usage = disk_usage
                self.collaborators = collaborators
                self.billing_email = billing_email
                self.plan = plan
                self.default_repository_permission = default_repository_permission
                self.members_can_create_repositories = members_can_create_repositories
                self.two_factor_requirement_enabled = two_factor_requirement_enabled
                self.members_allowed_repository_creation_type =
                    members_allowed_repository_creation_type
                self.members_can_create_public_repositories = members_can_create_public_repositories
                self.members_can_create_private_repositories =
                    members_can_create_private_repositories
                self.members_can_create_internal_repositories =
                    members_can_create_internal_repositories
                self.members_can_create_pages = members_can_create_pages
                self.members_can_create_public_pages = members_can_create_public_pages
                self.members_can_create_private_pages = members_can_create_private_pages
                self.members_can_fork_private_repositories = members_can_fork_private_repositories
                self.web_commit_signoff_required = web_commit_signoff_required
                self.updated_at = updated_at
                self.advanced_security_enabled_for_new_repositories =
                    advanced_security_enabled_for_new_repositories
                self.dependabot_alerts_enabled_for_new_repositories =
                    dependabot_alerts_enabled_for_new_repositories
                self.dependabot_security_updates_enabled_for_new_repositories =
                    dependabot_security_updates_enabled_for_new_repositories
                self.dependency_graph_enabled_for_new_repositories =
                    dependency_graph_enabled_for_new_repositories
                self.secret_scanning_enabled_for_new_repositories =
                    secret_scanning_enabled_for_new_repositories
                self.secret_scanning_push_protection_enabled_for_new_repositories =
                    secret_scanning_push_protection_enabled_for_new_repositories
                self.secret_scanning_push_protection_custom_link_enabled =
                    secret_scanning_push_protection_custom_link_enabled
                self.secret_scanning_push_protection_custom_link =
                    secret_scanning_push_protection_custom_link
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
                case name
                case company
                case blog
                case location
                case email
                case twitter_username
                case is_verified
                case has_organization_projects
                case has_repository_projects
                case public_repos
                case public_gists
                case followers
                case following
                case html_url
                case created_at
                case _type = "type"
                case total_private_repos
                case owned_private_repos
                case private_gists
                case disk_usage
                case collaborators
                case billing_email
                case plan
                case default_repository_permission
                case members_can_create_repositories
                case two_factor_requirement_enabled
                case members_allowed_repository_creation_type
                case members_can_create_public_repositories
                case members_can_create_private_repositories
                case members_can_create_internal_repositories
                case members_can_create_pages
                case members_can_create_public_pages
                case members_can_create_private_pages
                case members_can_fork_private_repositories
                case web_commit_signoff_required
                case updated_at
                case advanced_security_enabled_for_new_repositories
                case dependabot_alerts_enabled_for_new_repositories
                case dependabot_security_updates_enabled_for_new_repositories
                case dependency_graph_enabled_for_new_repositories
                case secret_scanning_enabled_for_new_repositories
                case secret_scanning_push_protection_enabled_for_new_repositories
                case secret_scanning_push_protection_custom_link_enabled
                case secret_scanning_push_protection_custom_link
            }
        }
        /// A label for a self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner-label`.
        public struct runner_label: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/id`.
            public var id: Swift.Int?
            /// Name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/name`.
            public var name: Swift.String
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            @frozen
            public enum _typePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case read_only
                case custom
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "read-only": self = .read_only
                    case "custom": self = .custom
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .read_only: return "read-only"
                    case .custom: return "custom"
                    }
                }
                public static var allCases: [_typePayload] { [.read_only, .custom] }
            }
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            public var _type: Components.Schemas.runner_label._typePayload?
            /// Creates a new `runner_label`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the label.
            ///   - name: Name of the label.
            ///   - _type: The type of label. Read-only labels are applied automatically when the runner is configured.
            public init(
                id: Swift.Int? = nil,
                name: Swift.String,
                _type: Components.Schemas.runner_label._typePayload? = nil
            ) {
                self.id = id
                self.name = name
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case _type = "type"
            }
        }
        /// A self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner`.
        public struct runner: Codable, Equatable, Hashable, Sendable {
            /// The id of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/id`.
            public var id: Swift.Int
            /// The id of the runner group.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/runner_group_id`.
            public var runner_group_id: Swift.Int?
            /// The name of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/name`.
            public var name: Swift.String
            /// The Operating System of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/os`.
            public var os: Swift.String
            /// The status of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner/busy`.
            public var busy: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/runner/labels`.
            public var labels: [Components.Schemas.runner_label]
            /// Creates a new `runner`.
            ///
            /// - Parameters:
            ///   - id: The id of the runner.
            ///   - runner_group_id: The id of the runner group.
            ///   - name: The name of the runner.
            ///   - os: The Operating System of the runner.
            ///   - status: The status of the runner.
            ///   - busy:
            ///   - labels:
            public init(
                id: Swift.Int,
                runner_group_id: Swift.Int? = nil,
                name: Swift.String,
                os: Swift.String,
                status: Swift.String,
                busy: Swift.Bool,
                labels: [Components.Schemas.runner_label]
            ) {
                self.id = id
                self.runner_group_id = runner_group_id
                self.name = name
                self.os = os
                self.status = status
                self.busy = busy
                self.labels = labels
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case runner_group_id
                case name
                case os
                case status
                case busy
                case labels
            }
        }
        /// The name of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-name`.
        public typealias code_scanning_analysis_tool_name = Swift.String
        /// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-guid`.
        public typealias code_scanning_analysis_tool_guid = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state-query`.
        @frozen
        public enum code_scanning_alert_state_query: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case open
            case closed
            case dismissed
            case fixed
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "open": self = .open
                case "closed": self = .closed
                case "dismissed": self = .dismissed
                case "fixed": self = .fixed
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .open: return "open"
                case .closed: return "closed"
                case .dismissed: return "dismissed"
                case .fixed: return "fixed"
                }
            }
            public static var allCases: [code_scanning_alert_state_query] {
                [.open, .closed, .dismissed, .fixed]
            }
        }
        /// Severity of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-severity`.
        @frozen
        public enum code_scanning_alert_severity: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case critical
            case high
            case medium
            case low
            case warning
            case note
            case error
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "critical": self = .critical
                case "high": self = .high
                case "medium": self = .medium
                case "low": self = .low
                case "warning": self = .warning
                case "note": self = .note
                case "error": self = .error
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .critical: return "critical"
                case .high: return "high"
                case .medium: return "medium"
                case .low: return "low"
                case .warning: return "warning"
                case .note: return "note"
                case .error: return "error"
                }
            }
            public static var allCases: [code_scanning_alert_severity] {
                [.critical, .high, .medium, .low, .warning, .note, .error]
            }
        }
        /// The REST API URL for fetching the list of instances for an alert.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-instances-url`.
        public typealias alert_instances_url = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state`.
        @frozen
        public enum code_scanning_alert_state: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case open
            case dismissed
            case fixed
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "open": self = .open
                case "dismissed": self = .dismissed
                case "fixed": self = .fixed
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .open: return "open"
                case .dismissed: return "dismissed"
                case .fixed: return "fixed"
                }
            }
            public static var allCases: [code_scanning_alert_state] { [.open, .dismissed, .fixed] }
        }
        /// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-reason`.
        @frozen
        public enum code_scanning_alert_dismissed_reason: RawRepresentable, Codable, Equatable,
            Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case false_positive
            case won_t_fix
            case used_in_tests
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "false positive": self = .false_positive
                case "won't fix": self = .won_t_fix
                case "used in tests": self = .used_in_tests
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .false_positive: return "false positive"
                case .won_t_fix: return "won't fix"
                case .used_in_tests: return "used in tests"
                }
            }
            public static var allCases: [code_scanning_alert_dismissed_reason] {
                [.false_positive, .won_t_fix, .used_in_tests]
            }
        }
        /// The dismissal comment associated with the dismissal of the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-comment`.
        public typealias code_scanning_alert_dismissed_comment = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule`.
        public struct code_scanning_alert_rule: Codable, Equatable, Hashable, Sendable {
            /// A unique identifier for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/id`.
            public var id: Swift.String?
            /// The name of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/name`.
            public var name: Swift.String?
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            @frozen
            public enum severityPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case none
                case note
                case warning
                case error
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "none": self = .none
                    case "note": self = .note
                    case "warning": self = .warning
                    case "error": self = .error
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .none: return "none"
                    case .note: return "note"
                    case .warning: return "warning"
                    case .error: return "error"
                    }
                }
                public static var allCases: [severityPayload] { [.none, .note, .warning, .error] }
            }
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            public var severity: Components.Schemas.code_scanning_alert_rule.severityPayload?
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            @frozen
            public enum security_severity_levelPayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case low
                case medium
                case high
                case critical
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "low": self = .low
                    case "medium": self = .medium
                    case "high": self = .high
                    case "critical": self = .critical
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .low: return "low"
                    case .medium: return "medium"
                    case .high: return "high"
                    case .critical: return "critical"
                    }
                }
                public static var allCases: [security_severity_levelPayload] {
                    [.low, .medium, .high, .critical]
                }
            }
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            public var security_severity_level:
                Components.Schemas.code_scanning_alert_rule.security_severity_levelPayload?
            /// A short description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/description`.
            public var description: Swift.String?
            /// description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/full_description`.
            public var full_description: Swift.String?
            /// A set of tags applicable for the rule.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/tags`.
            public var tags: [Swift.String]?
            /// Detailed documentation for the rule as GitHub Flavored Markdown.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help`.
            public var help: Swift.String?
            /// A link to the documentation for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help_uri`.
            public var help_uri: Swift.String?
            /// Creates a new `code_scanning_alert_rule`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the rule used to detect the alert.
            ///   - name: The name of the rule used to detect the alert.
            ///   - severity: The severity of the alert.
            ///   - security_severity_level: The security severity of the alert.
            ///   - description: A short description of the rule used to detect the alert.
            ///   - full_description: description of the rule used to detect the alert.
            ///   - tags: A set of tags applicable for the rule.
            ///   - help: Detailed documentation for the rule as GitHub Flavored Markdown.
            ///   - help_uri: A link to the documentation for the rule used to detect the alert.
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                severity: Components.Schemas.code_scanning_alert_rule.severityPayload? = nil,
                security_severity_level: Components.Schemas.code_scanning_alert_rule
                    .security_severity_levelPayload? = nil,
                description: Swift.String? = nil,
                full_description: Swift.String? = nil,
                tags: [Swift.String]? = nil,
                help: Swift.String? = nil,
                help_uri: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.severity = severity
                self.security_severity_level = security_severity_level
                self.description = description
                self.full_description = full_description
                self.tags = tags
                self.help = help
                self.help_uri = help_uri
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case severity
                case security_severity_level
                case description
                case full_description
                case tags
                case help
                case help_uri
            }
        }
        /// The version of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-version`.
        public typealias code_scanning_analysis_tool_version = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool`.
        public struct code_scanning_analysis_tool: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/name`.
            public var name: Components.Schemas.code_scanning_analysis_tool_name?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/version`.
            public var version: Components.Schemas.code_scanning_analysis_tool_version?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/guid`.
            public var guid: Components.Schemas.code_scanning_analysis_tool_guid?
            /// Creates a new `code_scanning_analysis_tool`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - version:
            ///   - guid:
            public init(
                name: Components.Schemas.code_scanning_analysis_tool_name? = nil,
                version: Components.Schemas.code_scanning_analysis_tool_version? = nil,
                guid: Components.Schemas.code_scanning_analysis_tool_guid? = nil
            ) {
                self.name = name
                self.version = version
                self.guid = guid
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case version
                case guid
            }
        }
        /// The full Git reference, formatted as `refs/heads/<branch name>`,
        /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-ref`.
        public typealias code_scanning_ref = Swift.String
        /// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-analysis-key`.
        public typealias code_scanning_analysis_analysis_key = Swift.String
        /// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-environment`.
        public typealias code_scanning_alert_environment = Swift.String
        /// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-category`.
        public typealias code_scanning_analysis_category = Swift.String
        /// Describe a region within a file for the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location`.
        public struct code_scanning_alert_location: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/path`.
            public var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_line`.
            public var start_line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_line`.
            public var end_line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_column`.
            public var start_column: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_column`.
            public var end_column: Swift.Int?
            /// Creates a new `code_scanning_alert_location`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - start_line:
            ///   - end_line:
            ///   - start_column:
            ///   - end_column:
            public init(
                path: Swift.String? = nil,
                start_line: Swift.Int? = nil,
                end_line: Swift.Int? = nil,
                start_column: Swift.Int? = nil,
                end_column: Swift.Int? = nil
            ) {
                self.path = path
                self.start_line = start_line
                self.end_line = end_line
                self.start_column = start_column
                self.end_column = end_column
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case start_line
                case end_line
                case start_column
                case end_column
            }
        }
        /// A classification of the file. For example to identify it as generated.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-classification`.
        @frozen
        public enum code_scanning_alert_classification: RawRepresentable, Codable, Equatable,
            Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case source
            case generated
            case test
            case library
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "source": self = .source
                case "generated": self = .generated
                case "test": self = .test
                case "library": self = .library
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .source: return "source"
                case .generated: return "generated"
                case .test: return "test"
                case .library: return "library"
                }
            }
            public static var allCases: [code_scanning_alert_classification] {
                [.source, .generated, .test, .library]
            }
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance`.
        public struct code_scanning_alert_instance: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/ref`.
            public var ref: Components.Schemas.code_scanning_ref?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/analysis_key`.
            public var analysis_key: Components.Schemas.code_scanning_analysis_analysis_key?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/environment`.
            public var environment: Components.Schemas.code_scanning_alert_environment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/category`.
            public var category: Components.Schemas.code_scanning_analysis_category?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/state`.
            public var state: Components.Schemas.code_scanning_alert_state?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/commit_sha`.
            public var commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            public struct messagePayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message/text`.
                public var text: Swift.String?
                /// Creates a new `messagePayload`.
                ///
                /// - Parameters:
                ///   - text:
                public init(text: Swift.String? = nil) { self.text = text }
                public enum CodingKeys: String, CodingKey { case text }
            }
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            public var message: Components.Schemas.code_scanning_alert_instance.messagePayload?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/location`.
            public var location: Components.Schemas.code_scanning_alert_location?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/html_url`.
            public var html_url: Swift.String?
            /// Classifications that have been applied to the file that triggered the alert.
            /// For example identifying it as documentation, or a generated file.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/classifications`.
            public var classifications: [Components.Schemas.code_scanning_alert_classification]?
            /// Creates a new `code_scanning_alert_instance`.
            ///
            /// - Parameters:
            ///   - ref:
            ///   - analysis_key:
            ///   - environment:
            ///   - category:
            ///   - state:
            ///   - commit_sha:
            ///   - message:
            ///   - location:
            ///   - html_url:
            ///   - classifications: Classifications that have been applied to the file that triggered the alert.
            public init(
                ref: Components.Schemas.code_scanning_ref? = nil,
                analysis_key: Components.Schemas.code_scanning_analysis_analysis_key? = nil,
                environment: Components.Schemas.code_scanning_alert_environment? = nil,
                category: Components.Schemas.code_scanning_analysis_category? = nil,
                state: Components.Schemas.code_scanning_alert_state? = nil,
                commit_sha: Swift.String? = nil,
                message: Components.Schemas.code_scanning_alert_instance.messagePayload? = nil,
                location: Components.Schemas.code_scanning_alert_location? = nil,
                html_url: Swift.String? = nil,
                classifications: [Components.Schemas.code_scanning_alert_classification]? = nil
            ) {
                self.ref = ref
                self.analysis_key = analysis_key
                self.environment = environment
                self.category = category
                self.state = state
                self.commit_sha = commit_sha
                self.message = message
                self.location = location
                self.html_url = html_url
                self.classifications = classifications
            }
            public enum CodingKeys: String, CodingKey {
                case ref
                case analysis_key
                case environment
                case category
                case state
                case commit_sha
                case message
                case location
                case html_url
                case classifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items`.
        public struct code_scanning_organization_alert_items: Codable, Equatable, Hashable, Sendable
        {
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/number`.
            public var number: Components.Schemas.alert_number
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/created_at`.
            public var created_at: Components.Schemas.alert_created_at
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/updated_at`.
            public var updated_at: Components.Schemas.alert_updated_at?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/url`.
            public var url: Components.Schemas.alert_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/html_url`.
            public var html_url: Components.Schemas.alert_html_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/instances_url`.
            public var instances_url: Components.Schemas.alert_instances_url
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/state`.
            public var state: Components.Schemas.code_scanning_alert_state
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/fixed_at`.
            public var fixed_at: Components.Schemas.alert_fixed_at?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_by`.
            public var dismissed_by: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_at`.
            public var dismissed_at: Components.Schemas.alert_dismissed_at
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_reason`.
            public var dismissed_reason: Components.Schemas.code_scanning_alert_dismissed_reason
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_comment`.
            public var dismissed_comment: Components.Schemas.code_scanning_alert_dismissed_comment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/rule`.
            public var rule: Components.Schemas.code_scanning_alert_rule
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/tool`.
            public var tool: Components.Schemas.code_scanning_analysis_tool
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/most_recent_instance`.
            public var most_recent_instance: Components.Schemas.code_scanning_alert_instance
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/repository`.
            public var repository: Components.Schemas.simple_repository
            /// Creates a new `code_scanning_organization_alert_items`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - created_at:
            ///   - updated_at:
            ///   - url:
            ///   - html_url:
            ///   - instances_url:
            ///   - state:
            ///   - fixed_at:
            ///   - dismissed_by:
            ///   - dismissed_at:
            ///   - dismissed_reason:
            ///   - dismissed_comment:
            ///   - rule:
            ///   - tool:
            ///   - most_recent_instance:
            ///   - repository:
            public init(
                number: Components.Schemas.alert_number,
                created_at: Components.Schemas.alert_created_at,
                updated_at: Components.Schemas.alert_updated_at? = nil,
                url: Components.Schemas.alert_url,
                html_url: Components.Schemas.alert_html_url,
                instances_url: Components.Schemas.alert_instances_url,
                state: Components.Schemas.code_scanning_alert_state,
                fixed_at: Components.Schemas.alert_fixed_at? = nil,
                dismissed_by: Components.Schemas.nullable_simple_user,
                dismissed_at: Components.Schemas.alert_dismissed_at,
                dismissed_reason: Components.Schemas.code_scanning_alert_dismissed_reason,
                dismissed_comment: Components.Schemas.code_scanning_alert_dismissed_comment? = nil,
                rule: Components.Schemas.code_scanning_alert_rule,
                tool: Components.Schemas.code_scanning_analysis_tool,
                most_recent_instance: Components.Schemas.code_scanning_alert_instance,
                repository: Components.Schemas.simple_repository
            ) {
                self.number = number
                self.created_at = created_at
                self.updated_at = updated_at
                self.url = url
                self.html_url = html_url
                self.instances_url = instances_url
                self.state = state
                self.fixed_at = fixed_at
                self.dismissed_by = dismissed_by
                self.dismissed_at = dismissed_at
                self.dismissed_reason = dismissed_reason
                self.dismissed_comment = dismissed_comment
                self.rule = rule
                self.tool = tool
                self.most_recent_instance = most_recent_instance
                self.repository = repository
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case created_at
                case updated_at
                case url
                case html_url
                case instances_url
                case state
                case fixed_at
                case dismissed_by
                case dismissed_at
                case dismissed_reason
                case dismissed_comment
                case rule
                case tool
                case most_recent_instance
                case repository
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_team_simple: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_team_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_team_simple
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_team_simple
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        public struct team_simple: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            public var description: Swift.String
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `team_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        public struct nullable_repository: Codable, Equatable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            public var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/organization`.
            public var organization: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public var permissions: Components.Schemas.nullable_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            public var owner: Components.Schemas.simple_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            public var homepage: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            public var language: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            public struct template_repositoryPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/full_name`.
                public var full_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                public struct ownerPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/avatar_url`.
                    public var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gravatar_id`.
                    public var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/html_url`.
                    public var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/followers_url`.
                    public var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/following_url`.
                    public var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gists_url`.
                    public var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/starred_url`.
                    public var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/subscriptions_url`.
                    public var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/organizations_url`.
                    public var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/repos_url`.
                    public var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/events_url`.
                    public var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/received_events_url`.
                    public var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/site_admin`.
                    public var site_admin: Swift.Bool?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - avatar_url:
                    ///   - gravatar_id:
                    ///   - url:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.avatar_url = avatar_url
                        self.gravatar_id = gravatar_id
                        self.url = url
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case avatar_url
                        case gravatar_id
                        case url
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case repos_url
                        case events_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                public var owner:
                    Components.Schemas.nullable_repository.template_repositoryPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archive_url`.
                public var archive_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/assignees_url`.
                public var assignees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/blobs_url`.
                public var blobs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/branches_url`.
                public var branches_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/collaborators_url`.
                public var collaborators_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/comments_url`.
                public var comments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/commits_url`.
                public var commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/compare_url`.
                public var compare_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contents_url`.
                public var contents_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contributors_url`.
                public var contributors_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/deployments_url`.
                public var deployments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/downloads_url`.
                public var downloads_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/events_url`.
                public var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_url`.
                public var forks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_commits_url`.
                public var git_commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_refs_url`.
                public var git_refs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_tags_url`.
                public var git_tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_url`.
                public var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_comment_url`.
                public var issue_comment_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_events_url`.
                public var issue_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issues_url`.
                public var issues_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/keys_url`.
                public var keys_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/labels_url`.
                public var labels_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/languages_url`.
                public var languages_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merges_url`.
                public var merges_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/milestones_url`.
                public var milestones_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/notifications_url`.
                public var notifications_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pulls_url`.
                public var pulls_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/releases_url`.
                public var releases_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/ssh_url`.
                public var ssh_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_url`.
                public var stargazers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/statuses_url`.
                public var statuses_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_url`.
                public var subscribers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscription_url`.
                public var subscription_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/tags_url`.
                public var tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/teams_url`.
                public var teams_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/trees_url`.
                public var trees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/clone_url`.
                public var clone_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/mirror_url`.
                public var mirror_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/hooks_url`.
                public var hooks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/svn_url`.
                public var svn_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_count`.
                public var forks_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_count`.
                public var stargazers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/watchers_count`.
                public var watchers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/default_branch`.
                public var default_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/open_issues_count`.
                public var open_issues_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/is_template`.
                public var is_template: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_issues`.
                public var has_issues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_projects`.
                public var has_projects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_wiki`.
                public var has_wiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_pages`.
                public var has_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_downloads`.
                public var has_downloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pushed_at`.
                public var pushed_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/created_at`.
                public var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/updated_at`.
                public var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                public var permissions:
                    Components.Schemas.nullable_repository.template_repositoryPayload
                        .permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_rebase_merge`.
                public var allow_rebase_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/temp_clone_token`.
                public var temp_clone_token: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_squash_merge`.
                public var allow_squash_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_auto_merge`.
                public var allow_auto_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/delete_branch_on_merge`.
                public var delete_branch_on_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_update_branch`.
                public var allow_update_branch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/use_squash_pr_title_as_default`.
                public var use_squash_pr_title_as_default: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                @frozen
                public enum squash_merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_TITLE
                    case COMMIT_OR_PR_TITLE
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_TITLE": self = .PR_TITLE
                        case "COMMIT_OR_PR_TITLE": self = .COMMIT_OR_PR_TITLE
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_TITLE: return "PR_TITLE"
                        case .COMMIT_OR_PR_TITLE: return "COMMIT_OR_PR_TITLE"
                        }
                    }
                    public static var allCases: [squash_merge_commit_titlePayload] {
                        [.PR_TITLE, .COMMIT_OR_PR_TITLE]
                    }
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                public var squash_merge_commit_title:
                    Components.Schemas.nullable_repository.template_repositoryPayload
                        .squash_merge_commit_titlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                @frozen
                public enum squash_merge_commit_messagePayload: RawRepresentable, Codable,
                    Equatable, Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_BODY
                    case COMMIT_MESSAGES
                    case BLANK
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_BODY": self = .PR_BODY
                        case "COMMIT_MESSAGES": self = .COMMIT_MESSAGES
                        case "BLANK": self = .BLANK
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_BODY: return "PR_BODY"
                        case .COMMIT_MESSAGES: return "COMMIT_MESSAGES"
                        case .BLANK: return "BLANK"
                        }
                    }
                    public static var allCases: [squash_merge_commit_messagePayload] {
                        [.PR_BODY, .COMMIT_MESSAGES, .BLANK]
                    }
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                public var squash_merge_commit_message:
                    Components.Schemas.nullable_repository.template_repositoryPayload
                        .squash_merge_commit_messagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                @frozen
                public enum merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_TITLE
                    case MERGE_MESSAGE
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_TITLE": self = .PR_TITLE
                        case "MERGE_MESSAGE": self = .MERGE_MESSAGE
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_TITLE: return "PR_TITLE"
                        case .MERGE_MESSAGE: return "MERGE_MESSAGE"
                        }
                    }
                    public static var allCases: [merge_commit_titlePayload] {
                        [.PR_TITLE, .MERGE_MESSAGE]
                    }
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                public var merge_commit_title:
                    Components.Schemas.nullable_repository.template_repositoryPayload
                        .merge_commit_titlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                @frozen
                public enum merge_commit_messagePayload: RawRepresentable, Codable, Equatable,
                    Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case PR_BODY
                    case PR_TITLE
                    case BLANK
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "PR_BODY": self = .PR_BODY
                        case "PR_TITLE": self = .PR_TITLE
                        case "BLANK": self = .BLANK
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .PR_BODY: return "PR_BODY"
                        case .PR_TITLE: return "PR_TITLE"
                        case .BLANK: return "BLANK"
                        }
                    }
                    public static var allCases: [merge_commit_messagePayload] {
                        [.PR_BODY, .PR_TITLE, .BLANK]
                    }
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                public var merge_commit_message:
                    Components.Schemas.nullable_repository.template_repositoryPayload
                        .merge_commit_messagePayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_merge_commit`.
                public var allow_merge_commit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_count`.
                public var subscribers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/network_count`.
                public var network_count: Swift.Int?
                /// Creates a new `template_repositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - name:
                ///   - full_name:
                ///   - owner:
                ///   - _private:
                ///   - html_url:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archive_url:
                ///   - assignees_url:
                ///   - blobs_url:
                ///   - branches_url:
                ///   - collaborators_url:
                ///   - comments_url:
                ///   - commits_url:
                ///   - compare_url:
                ///   - contents_url:
                ///   - contributors_url:
                ///   - deployments_url:
                ///   - downloads_url:
                ///   - events_url:
                ///   - forks_url:
                ///   - git_commits_url:
                ///   - git_refs_url:
                ///   - git_tags_url:
                ///   - git_url:
                ///   - issue_comment_url:
                ///   - issue_events_url:
                ///   - issues_url:
                ///   - keys_url:
                ///   - labels_url:
                ///   - languages_url:
                ///   - merges_url:
                ///   - milestones_url:
                ///   - notifications_url:
                ///   - pulls_url:
                ///   - releases_url:
                ///   - ssh_url:
                ///   - stargazers_url:
                ///   - statuses_url:
                ///   - subscribers_url:
                ///   - subscription_url:
                ///   - tags_url:
                ///   - teams_url:
                ///   - trees_url:
                ///   - clone_url:
                ///   - mirror_url:
                ///   - hooks_url:
                ///   - svn_url:
                ///   - homepage:
                ///   - language:
                ///   - forks_count:
                ///   - stargazers_count:
                ///   - watchers_count:
                ///   - size:
                ///   - default_branch:
                ///   - open_issues_count:
                ///   - is_template:
                ///   - topics:
                ///   - has_issues:
                ///   - has_projects:
                ///   - has_wiki:
                ///   - has_pages:
                ///   - has_downloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushed_at:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - allow_rebase_merge:
                ///   - temp_clone_token:
                ///   - allow_squash_merge:
                ///   - allow_auto_merge:
                ///   - delete_branch_on_merge:
                ///   - allow_update_branch:
                ///   - use_squash_pr_title_as_default:
                ///   - squash_merge_commit_title: The default value for a squash merge commit title:
                ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                ///   - merge_commit_title: The default value for a merge commit title.
                ///   - merge_commit_message: The default value for a merge commit message.
                ///   - allow_merge_commit:
                ///   - subscribers_count:
                ///   - network_count:
                public init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    full_name: Swift.String? = nil,
                    owner: Components.Schemas.nullable_repository.template_repositoryPayload
                        .ownerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    html_url: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archive_url: Swift.String? = nil,
                    assignees_url: Swift.String? = nil,
                    blobs_url: Swift.String? = nil,
                    branches_url: Swift.String? = nil,
                    collaborators_url: Swift.String? = nil,
                    comments_url: Swift.String? = nil,
                    commits_url: Swift.String? = nil,
                    compare_url: Swift.String? = nil,
                    contents_url: Swift.String? = nil,
                    contributors_url: Swift.String? = nil,
                    deployments_url: Swift.String? = nil,
                    downloads_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    forks_url: Swift.String? = nil,
                    git_commits_url: Swift.String? = nil,
                    git_refs_url: Swift.String? = nil,
                    git_tags_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    issue_comment_url: Swift.String? = nil,
                    issue_events_url: Swift.String? = nil,
                    issues_url: Swift.String? = nil,
                    keys_url: Swift.String? = nil,
                    labels_url: Swift.String? = nil,
                    languages_url: Swift.String? = nil,
                    merges_url: Swift.String? = nil,
                    milestones_url: Swift.String? = nil,
                    notifications_url: Swift.String? = nil,
                    pulls_url: Swift.String? = nil,
                    releases_url: Swift.String? = nil,
                    ssh_url: Swift.String? = nil,
                    stargazers_url: Swift.String? = nil,
                    statuses_url: Swift.String? = nil,
                    subscribers_url: Swift.String? = nil,
                    subscription_url: Swift.String? = nil,
                    tags_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil,
                    trees_url: Swift.String? = nil,
                    clone_url: Swift.String? = nil,
                    mirror_url: Swift.String? = nil,
                    hooks_url: Swift.String? = nil,
                    svn_url: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forks_count: Swift.Int? = nil,
                    stargazers_count: Swift.Int? = nil,
                    watchers_count: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    default_branch: Swift.String? = nil,
                    open_issues_count: Swift.Int? = nil,
                    is_template: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    has_issues: Swift.Bool? = nil,
                    has_projects: Swift.Bool? = nil,
                    has_wiki: Swift.Bool? = nil,
                    has_pages: Swift.Bool? = nil,
                    has_downloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushed_at: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.nullable_repository.template_repositoryPayload
                        .permissionsPayload? = nil,
                    allow_rebase_merge: Swift.Bool? = nil,
                    temp_clone_token: Swift.String? = nil,
                    allow_squash_merge: Swift.Bool? = nil,
                    allow_auto_merge: Swift.Bool? = nil,
                    delete_branch_on_merge: Swift.Bool? = nil,
                    allow_update_branch: Swift.Bool? = nil,
                    use_squash_pr_title_as_default: Swift.Bool? = nil,
                    squash_merge_commit_title: Components.Schemas.nullable_repository
                        .template_repositoryPayload.squash_merge_commit_titlePayload? = nil,
                    squash_merge_commit_message: Components.Schemas.nullable_repository
                        .template_repositoryPayload.squash_merge_commit_messagePayload? = nil,
                    merge_commit_title: Components.Schemas.nullable_repository
                        .template_repositoryPayload.merge_commit_titlePayload? = nil,
                    merge_commit_message: Components.Schemas.nullable_repository
                        .template_repositoryPayload.merge_commit_messagePayload? = nil,
                    allow_merge_commit: Swift.Bool? = nil,
                    subscribers_count: Swift.Int? = nil,
                    network_count: Swift.Int? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.full_name = full_name
                    self.owner = owner
                    self._private = _private
                    self.html_url = html_url
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archive_url = archive_url
                    self.assignees_url = assignees_url
                    self.blobs_url = blobs_url
                    self.branches_url = branches_url
                    self.collaborators_url = collaborators_url
                    self.comments_url = comments_url
                    self.commits_url = commits_url
                    self.compare_url = compare_url
                    self.contents_url = contents_url
                    self.contributors_url = contributors_url
                    self.deployments_url = deployments_url
                    self.downloads_url = downloads_url
                    self.events_url = events_url
                    self.forks_url = forks_url
                    self.git_commits_url = git_commits_url
                    self.git_refs_url = git_refs_url
                    self.git_tags_url = git_tags_url
                    self.git_url = git_url
                    self.issue_comment_url = issue_comment_url
                    self.issue_events_url = issue_events_url
                    self.issues_url = issues_url
                    self.keys_url = keys_url
                    self.labels_url = labels_url
                    self.languages_url = languages_url
                    self.merges_url = merges_url
                    self.milestones_url = milestones_url
                    self.notifications_url = notifications_url
                    self.pulls_url = pulls_url
                    self.releases_url = releases_url
                    self.ssh_url = ssh_url
                    self.stargazers_url = stargazers_url
                    self.statuses_url = statuses_url
                    self.subscribers_url = subscribers_url
                    self.subscription_url = subscription_url
                    self.tags_url = tags_url
                    self.teams_url = teams_url
                    self.trees_url = trees_url
                    self.clone_url = clone_url
                    self.mirror_url = mirror_url
                    self.hooks_url = hooks_url
                    self.svn_url = svn_url
                    self.homepage = homepage
                    self.language = language
                    self.forks_count = forks_count
                    self.stargazers_count = stargazers_count
                    self.watchers_count = watchers_count
                    self.size = size
                    self.default_branch = default_branch
                    self.open_issues_count = open_issues_count
                    self.is_template = is_template
                    self.topics = topics
                    self.has_issues = has_issues
                    self.has_projects = has_projects
                    self.has_wiki = has_wiki
                    self.has_pages = has_pages
                    self.has_downloads = has_downloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushed_at = pushed_at
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.allow_rebase_merge = allow_rebase_merge
                    self.temp_clone_token = temp_clone_token
                    self.allow_squash_merge = allow_squash_merge
                    self.allow_auto_merge = allow_auto_merge
                    self.delete_branch_on_merge = delete_branch_on_merge
                    self.allow_update_branch = allow_update_branch
                    self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                    self.squash_merge_commit_title = squash_merge_commit_title
                    self.squash_merge_commit_message = squash_merge_commit_message
                    self.merge_commit_title = merge_commit_title
                    self.merge_commit_message = merge_commit_message
                    self.allow_merge_commit = allow_merge_commit
                    self.subscribers_count = subscribers_count
                    self.network_count = network_count
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case full_name
                    case owner
                    case _private = "private"
                    case html_url
                    case description
                    case fork
                    case url
                    case archive_url
                    case assignees_url
                    case blobs_url
                    case branches_url
                    case collaborators_url
                    case comments_url
                    case commits_url
                    case compare_url
                    case contents_url
                    case contributors_url
                    case deployments_url
                    case downloads_url
                    case events_url
                    case forks_url
                    case git_commits_url
                    case git_refs_url
                    case git_tags_url
                    case git_url
                    case issue_comment_url
                    case issue_events_url
                    case issues_url
                    case keys_url
                    case labels_url
                    case languages_url
                    case merges_url
                    case milestones_url
                    case notifications_url
                    case pulls_url
                    case releases_url
                    case ssh_url
                    case stargazers_url
                    case statuses_url
                    case subscribers_url
                    case subscription_url
                    case tags_url
                    case teams_url
                    case trees_url
                    case clone_url
                    case mirror_url
                    case hooks_url
                    case svn_url
                    case homepage
                    case language
                    case forks_count
                    case stargazers_count
                    case watchers_count
                    case size
                    case default_branch
                    case open_issues_count
                    case is_template
                    case topics
                    case has_issues
                    case has_projects
                    case has_wiki
                    case has_pages
                    case has_downloads
                    case archived
                    case disabled
                    case visibility
                    case pushed_at
                    case created_at
                    case updated_at
                    case permissions
                    case allow_rebase_merge
                    case temp_clone_token
                    case allow_squash_merge
                    case allow_auto_merge
                    case delete_branch_on_merge
                    case allow_update_branch
                    case use_squash_pr_title_as_default
                    case squash_merge_commit_title
                    case squash_merge_commit_message
                    case merge_commit_title
                    case merge_commit_message
                    case allow_merge_commit
                    case subscribers_count
                    case network_count
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            public var template_repository:
                Components.Schemas.nullable_repository.template_repositoryPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated) public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen
            public enum squash_merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case COMMIT_OR_PR_TITLE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "COMMIT_OR_PR_TITLE": self = .COMMIT_OR_PR_TITLE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .COMMIT_OR_PR_TITLE: return "COMMIT_OR_PR_TITLE"
                    }
                }
                public static var allCases: [squash_merge_commit_titlePayload] {
                    [.PR_TITLE, .COMMIT_OR_PR_TITLE]
                }
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title:
                Components.Schemas.nullable_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen
            public enum squash_merge_commit_messagePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case COMMIT_MESSAGES
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "COMMIT_MESSAGES": self = .COMMIT_MESSAGES
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .COMMIT_MESSAGES: return "COMMIT_MESSAGES"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [squash_merge_commit_messagePayload] {
                    [.PR_BODY, .COMMIT_MESSAGES, .BLANK]
                }
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message:
                Components.Schemas.nullable_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen
            public enum merge_commit_titlePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case MERGE_MESSAGE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "MERGE_MESSAGE": self = .MERGE_MESSAGE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .MERGE_MESSAGE: return "MERGE_MESSAGE"
                    }
                }
                public static var allCases: [merge_commit_titlePayload] {
                    [.PR_TITLE, .MERGE_MESSAGE]
                }
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            public var merge_commit_title:
                Components.Schemas.nullable_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen
            public enum merge_commit_messagePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case PR_TITLE
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "PR_TITLE": self = .PR_TITLE
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .PR_TITLE: return "PR_TITLE"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [merge_commit_messagePayload] {
                    [.PR_BODY, .PR_TITLE, .BLANK]
                }
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            public var merge_commit_message:
                Components.Schemas.nullable_repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `nullable_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.nullable_simple_user? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.nullable_repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String,
                language: Swift.String,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_repository
                    .template_repositoryPayload? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.nullable_repository
                    .squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.nullable_repository
                    .squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.nullable_repository
                    .merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.nullable_repository
                    .merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        public struct code_of_conduct_simple: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            public var html_url: Swift.String
            /// Creates a new `code_of_conduct_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            public init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        public struct full_repository: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            public var owner: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            public var homepage: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            public var language: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            public var has_downloads: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            public var has_discussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public var permissions: Components.Schemas.full_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            public var template_repository: Components.Schemas.nullable_repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen
            public enum squash_merge_commit_titlePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case COMMIT_OR_PR_TITLE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "COMMIT_OR_PR_TITLE": self = .COMMIT_OR_PR_TITLE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .COMMIT_OR_PR_TITLE: return "COMMIT_OR_PR_TITLE"
                    }
                }
                public static var allCases: [squash_merge_commit_titlePayload] {
                    [.PR_TITLE, .COMMIT_OR_PR_TITLE]
                }
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title:
                Components.Schemas.full_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen
            public enum squash_merge_commit_messagePayload: RawRepresentable, Codable, Equatable,
                Hashable, Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case COMMIT_MESSAGES
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "COMMIT_MESSAGES": self = .COMMIT_MESSAGES
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .COMMIT_MESSAGES: return "COMMIT_MESSAGES"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [squash_merge_commit_messagePayload] {
                    [.PR_BODY, .COMMIT_MESSAGES, .BLANK]
                }
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message:
                Components.Schemas.full_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen
            public enum merge_commit_titlePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_TITLE
                case MERGE_MESSAGE
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_TITLE": self = .PR_TITLE
                    case "MERGE_MESSAGE": self = .MERGE_MESSAGE
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_TITLE: return "PR_TITLE"
                    case .MERGE_MESSAGE: return "MERGE_MESSAGE"
                    }
                }
                public static var allCases: [merge_commit_titlePayload] {
                    [.PR_TITLE, .MERGE_MESSAGE]
                }
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            public var merge_commit_title:
                Components.Schemas.full_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen
            public enum merge_commit_messagePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case PR_BODY
                case PR_TITLE
                case BLANK
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "PR_BODY": self = .PR_BODY
                    case "PR_TITLE": self = .PR_TITLE
                    case "BLANK": self = .BLANK
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .PR_BODY: return "PR_BODY"
                    case .PR_TITLE: return "PR_TITLE"
                    case .BLANK: return "BLANK"
                    }
                }
                public static var allCases: [merge_commit_messagePayload] {
                    [.PR_BODY, .PR_TITLE, .BLANK]
                }
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            public var merge_commit_message:
                Components.Schemas.full_repository.merge_commit_messagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            public var subscribers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            public var network_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            public var license: Components.Schemas.nullable_license_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            public var organization: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            public var parent: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            public var source: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            public var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_of_conduct_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_and_analysis?
            /// Creates a new `full_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - allow_rebase_merge:
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_merge_commit:
            ///   - allow_update_branch:
            ///   - use_squash_pr_title_as_default:
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - master_branch:
            ///   - open_issues:
            ///   - watchers:
            ///   - anonymous_access_enabled: Whether anonymous git access is allowed.
            ///   - code_of_conduct:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String,
                language: Swift.String,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.full_repository.permissionsPayload? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_repository? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.full_repository
                    .squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.full_repository
                    .squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.full_repository.merge_commit_titlePayload? =
                    nil,
                merge_commit_message: Components.Schemas.full_repository
                    .merge_commit_messagePayload? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int,
                network_count: Swift.Int,
                license: Components.Schemas.nullable_license_simple? = nil,
                organization: Components.Schemas.nullable_simple_user? = nil,
                parent: Components.Schemas.repository? = nil,
                source: Components.Schemas.repository? = nil,
                forks: Swift.Int,
                master_branch: Swift.String? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                anonymous_access_enabled: Swift.Bool? = nil,
                code_of_conduct: Components.Schemas.code_of_conduct_simple? = nil,
                security_and_analysis: Components.Schemas.security_and_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.master_branch = master_branch
                self.open_issues = open_issues
                self.watchers = watchers
                self.anonymous_access_enabled = anonymous_access_enabled
                self.code_of_conduct = code_of_conduct
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case license
                case organization
                case parent
                case source
                case forks
                case master_branch
                case open_issues
                case watchers
                case anonymous_access_enabled
                case code_of_conduct
                case security_and_analysis
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        public struct diff_entry: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            public var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case added
                case removed
                case modified
                case renamed
                case copied
                case changed
                case unchanged
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "added": self = .added
                    case "removed": self = .removed
                    case "modified": self = .modified
                    case "renamed": self = .renamed
                    case "copied": self = .copied
                    case "changed": self = .changed
                    case "unchanged": self = .unchanged
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .added: return "added"
                    case .removed: return "removed"
                    case .modified: return "modified"
                    case .renamed: return "renamed"
                    case .copied: return "copied"
                    case .changed: return "changed"
                    case .unchanged: return "unchanged"
                    }
                }
                public static var allCases: [statusPayload] {
                    [.added, .removed, .modified, .renamed, .copied, .changed, .unchanged]
                }
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            public var status: Components.Schemas.diff_entry.statusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            public var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            public var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            public var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            public var blob_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            public var raw_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            public var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            public var previous_filename: Swift.String?
            /// Creates a new `diff_entry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blob_url:
            ///   - raw_url:
            ///   - contents_url:
            ///   - patch:
            ///   - previous_filename:
            public init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.diff_entry.statusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blob_url: Swift.String,
                raw_url: Swift.String,
                contents_url: Swift.String,
                patch: Swift.String? = nil,
                previous_filename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blob_url = blob_url
                self.raw_url = raw_url
                self.contents_url = contents_url
                self.patch = patch
                self.previous_filename = previous_filename
            }
            public enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blob_url
                case raw_url
                case contents_url
                case patch
                case previous_filename
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-commit`.
        public struct simple_commit: Codable, Equatable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/id`.
            public var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/tree_id`.
            public var tree_id: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/message`.
            public var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/timestamp`.
            public var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            public struct authorPayload: Codable, Equatable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/name`.
                public var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/email`.
                public var email: Swift.String
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                public init(name: Swift.String, email: Swift.String) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            public var author: Components.Schemas.simple_commit.authorPayload
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            public struct committerPayload: Codable, Equatable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/name`.
                public var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/email`.
                public var email: Swift.String
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                public init(name: Swift.String, email: Swift.String) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            public var committer: Components.Schemas.simple_commit.committerPayload
            /// Creates a new `simple_commit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - tree_id: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            public init(
                id: Swift.String,
                tree_id: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.simple_commit.authorPayload,
                committer: Components.Schemas.simple_commit.committerPayload
            ) {
                self.id = id
                self.tree_id = tree_id
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case tree_id
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        public struct link: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            public var href: Swift.String
            /// Creates a new `link`.
            ///
            /// - Parameters:
            ///   - href:
            public init(href: Swift.String) { self.href = href }
            public enum CodingKeys: String, CodingKey { case href }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        public struct auto_merge: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            public var enabled_by: Components.Schemas.simple_user
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen
            public enum merge_methodPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case merge
                case squash
                case rebase
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "merge": self = .merge
                    case "squash": self = .squash
                    case "rebase": self = .rebase
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .merge: return "merge"
                    case .squash: return "squash"
                    case .rebase: return "rebase"
                    }
                }
                public static var allCases: [merge_methodPayload] { [.merge, .squash, .rebase] }
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            public var merge_method: Components.Schemas.auto_merge.merge_methodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            public var commit_title: Swift.String?
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            public var commit_message: Swift.String?
            /// Creates a new `auto_merge`.
            ///
            /// - Parameters:
            ///   - enabled_by:
            ///   - merge_method: The merge method to use.
            ///   - commit_title: Title for the merge commit message.
            ///   - commit_message: Commit message for the merge commit.
            public init(
                enabled_by: Components.Schemas.simple_user,
                merge_method: Components.Schemas.auto_merge.merge_methodPayload,
                commit_title: Swift.String? = nil,
                commit_message: Swift.String? = nil
            ) {
                self.enabled_by = enabled_by
                self.merge_method = merge_method
                self.commit_title = commit_title
                self.commit_message = commit_message
            }
            public enum CodingKeys: String, CodingKey {
                case enabled_by
                case merge_method
                case commit_title
                case commit_message
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        public struct pull_request_simple: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            public var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            public var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            public var user: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/description`.
                public var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/default`.
                public var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                public init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public typealias labelsPayload = [Components.Schemas.pull_request_simple
                .labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public var labels: Components.Schemas.pull_request_simple.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            public var milestone: Components.Schemas.nullable_milestone
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            public var closed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            public var merged_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            public var merge_commit_sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            public var assignee: Components.Schemas.nullable_simple_user
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            public var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            public var requested_reviewers: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            public var requested_teams: [Components.Schemas.team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public struct headPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                public var user: Components.Schemas.nullable_simple_user
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_simple_user
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public var head: Components.Schemas.pull_request_simple.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public struct basePayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                public var user: Components.Schemas.nullable_simple_user
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_simple_user
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public var base: Components.Schemas.pull_request_simple.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public struct _linksPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                public var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                public var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                public var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                public var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                public var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                public var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                public var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                public init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public var _links: Components.Schemas.pull_request_simple._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            public var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            public var auto_merge: Components.Schemas.auto_merge
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            public var draft: Swift.Bool?
            /// Creates a new `pull_request_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            public init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.nullable_simple_user,
                body: Swift.String,
                labels: Components.Schemas.pull_request_simple.labelsPayload,
                milestone: Components.Schemas.nullable_milestone,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date,
                merged_at: Foundation.Date,
                merge_commit_sha: Swift.String,
                assignee: Components.Schemas.nullable_simple_user,
                assignees: [Components.Schemas.simple_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_user]? = nil,
                requested_teams: [Components.Schemas.team]? = nil,
                head: Components.Schemas.pull_request_simple.headPayload,
                base: Components.Schemas.pull_request_simple.basePayload,
                _links: Components.Schemas.pull_request_simple._linksPayload,
                author_association: Components.Schemas.author_association,
                auto_merge: Components.Schemas.auto_merge,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
            }
        }
        /// Contributor
        ///
        /// - Remark: Generated from `#/components/schemas/contributor`.
        public struct contributor: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor/login`.
            public var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/contributor/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/avatar_url`.
            public var avatar_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/followers_url`.
            public var followers_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/following_url`.
            public var following_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gists_url`.
            public var gists_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/starred_url`.
            public var starred_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/subscriptions_url`.
            public var subscriptions_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/organizations_url`.
            public var organizations_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/repos_url`.
            public var repos_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/events_url`.
            public var events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/received_events_url`.
            public var received_events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/contributor/site_admin`.
            public var site_admin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/contributor/contributions`.
            public var contributions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/name`.
            public var name: Swift.String?
            /// Creates a new `contributor`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - contributions:
            ///   - email:
            ///   - name:
            public init(
                login: Swift.String? = nil,
                id: Swift.Int? = nil,
                node_id: Swift.String? = nil,
                avatar_url: Swift.String? = nil,
                gravatar_id: Swift.String? = nil,
                url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                followers_url: Swift.String? = nil,
                following_url: Swift.String? = nil,
                gists_url: Swift.String? = nil,
                starred_url: Swift.String? = nil,
                subscriptions_url: Swift.String? = nil,
                organizations_url: Swift.String? = nil,
                repos_url: Swift.String? = nil,
                events_url: Swift.String? = nil,
                received_events_url: Swift.String? = nil,
                _type: Swift.String,
                site_admin: Swift.Bool? = nil,
                contributions: Swift.Int,
                email: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.contributions = contributions
                self.email = email
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case contributions
                case email
                case name
            }
        }
        /// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
        ///
        /// - Remark: Generated from `#/components/schemas/label`.
        public struct label: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/label/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/label/node_id`.
            public var node_id: Swift.String
            /// URL for the label
            ///
            /// - Remark: Generated from `#/components/schemas/label/url`.
            public var url: Swift.String
            /// The name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/description`.
            public var description: Swift.String?
            /// 6-character hex code, without the leading #, identifying the color
            ///
            /// - Remark: Generated from `#/components/schemas/label/color`.
            public var color: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/default`.
            public var _default: Swift.Bool
            /// Creates a new `label`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the label
            ///   - name: The name of the label.
            ///   - description:
            ///   - color: 6-character hex code, without the leading #, identifying the color
            ///   - _default:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                color: Swift.String,
                _default: Swift.Bool
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self._default = _default
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case name
                case description
                case color
                case _default = "default"
            }
        }
        /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-comment`.
        public struct pull_request_review_comment: Codable, Equatable, Hashable, Sendable {
            /// URL for the pull request review comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/url`.
            public var url: Swift.String
            /// The ID of the pull request review to which the comment belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_review_id`.
            public var pull_request_review_id: Swift.Int
            /// The ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/id`.
            public var id: Swift.Int
            /// The node ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/node_id`.
            public var node_id: Swift.String
            /// The diff of the line that the comment refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/diff_hunk`.
            public var diff_hunk: Swift.String
            /// The relative path of the file to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/path`.
            public var path: Swift.String
            /// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/position`.
            public var position: Swift.Int?
            /// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_position`.
            public var original_position: Swift.Int?
            /// The SHA of the commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/commit_id`.
            public var commit_id: Swift.String
            /// The SHA of the original commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_commit_id`.
            public var original_commit_id: Swift.String
            /// The comment ID to reply to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/in_reply_to_id`.
            public var in_reply_to_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/user`.
            public var user: Components.Schemas.simple_user
            /// The text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// HTML URL for the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/html_url`.
            public var html_url: Swift.String
            /// URL for the pull request that the review comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/author_association`.
            public var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public struct _linksPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public struct _selfPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self/href`.
                    public var href: Swift.String
                    /// Creates a new `_selfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) { self.href = href }
                    public enum CodingKeys: String, CodingKey { case href }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public var _self:
                    Components.Schemas.pull_request_review_comment._linksPayload._selfPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public struct htmlPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html/href`.
                    public var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) { self.href = href }
                    public enum CodingKeys: String, CodingKey { case href }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public var html:
                    Components.Schemas.pull_request_review_comment._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public struct pull_requestPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request/href`.
                    public var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) { self.href = href }
                    public enum CodingKeys: String, CodingKey { case href }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public var pull_request:
                    Components.Schemas.pull_request_review_comment._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pull_request:
                public init(
                    _self: Components.Schemas.pull_request_review_comment._linksPayload
                        ._selfPayload,
                    html: Components.Schemas.pull_request_review_comment._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.pull_request_review_comment._linksPayload
                        .pull_requestPayload
                ) {
                    self._self = _self
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public var _links: Components.Schemas.pull_request_review_comment._linksPayload
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_line`.
            public var start_line: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_start_line`.
            public var original_start_line: Swift.Int?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            @frozen
            public enum start_sidePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case LEFT
                case RIGHT
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "LEFT": self = .LEFT
                    case "RIGHT": self = .RIGHT
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .LEFT: return "LEFT"
                    case .RIGHT: return "RIGHT"
                    }
                }
                public static var allCases: [start_sidePayload] { [.LEFT, .RIGHT] }
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            public var start_side: Components.Schemas.pull_request_review_comment.start_sidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/line`.
            public var line: Swift.Int?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_line`.
            public var original_line: Swift.Int?
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            @frozen
            public enum sidePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case LEFT
                case RIGHT
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "LEFT": self = .LEFT
                    case "RIGHT": self = .RIGHT
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .LEFT: return "LEFT"
                    case .RIGHT: return "RIGHT"
                    }
                }
                public static var allCases: [sidePayload] { [.LEFT, .RIGHT] }
            }
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            public var side: Components.Schemas.pull_request_review_comment.sidePayload?
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            @frozen
            public enum subject_typePayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case line
                case file
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "line": self = .line
                    case "file": self = .file
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .line: return "line"
                    case .file: return "file"
                    }
                }
                public static var allCases: [subject_typePayload] { [.line, .file] }
            }
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            public var subject_type:
                Components.Schemas.pull_request_review_comment.subject_typePayload?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/reactions`.
            public var reactions: Components.Schemas.reaction_rollup?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_text`.
            public var body_text: Swift.String?
            /// Creates a new `pull_request_review_comment`.
            ///
            /// - Parameters:
            ///   - url: URL for the pull request review comment
            ///   - pull_request_review_id: The ID of the pull request review to which the comment belongs.
            ///   - id: The ID of the pull request review comment.
            ///   - node_id: The node ID of the pull request review comment.
            ///   - diff_hunk: The diff of the line that the comment refers to.
            ///   - path: The relative path of the file to which the comment applies.
            ///   - position: The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///   - original_position: The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///   - commit_id: The SHA of the commit to which the comment applies.
            ///   - original_commit_id: The SHA of the original commit to which the comment applies.
            ///   - in_reply_to_id: The comment ID to reply to.
            ///   - user:
            ///   - body: The text of the comment.
            ///   - created_at:
            ///   - updated_at:
            ///   - html_url: HTML URL for the pull request review comment.
            ///   - pull_request_url: URL for the pull request that the review comment belongs to.
            ///   - author_association:
            ///   - _links:
            ///   - start_line: The first line of the range for a multi-line comment.
            ///   - original_start_line: The first line of the range for a multi-line comment.
            ///   - start_side: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - original_line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - side: The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///   - subject_type: The level at which the comment is targeted, can be a diff line or a file.
            ///   - reactions:
            ///   - body_html:
            ///   - body_text:
            public init(
                url: Swift.String,
                pull_request_review_id: Swift.Int,
                id: Swift.Int,
                node_id: Swift.String,
                diff_hunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                original_position: Swift.Int? = nil,
                commit_id: Swift.String,
                original_commit_id: Swift.String,
                in_reply_to_id: Swift.Int? = nil,
                user: Components.Schemas.simple_user,
                body: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                author_association: Components.Schemas.author_association,
                _links: Components.Schemas.pull_request_review_comment._linksPayload,
                start_line: Swift.Int? = nil,
                original_start_line: Swift.Int? = nil,
                start_side: Components.Schemas.pull_request_review_comment.start_sidePayload? = nil,
                line: Swift.Int? = nil,
                original_line: Swift.Int? = nil,
                side: Components.Schemas.pull_request_review_comment.sidePayload? = nil,
                subject_type: Components.Schemas.pull_request_review_comment.subject_typePayload? =
                    nil,
                reactions: Components.Schemas.reaction_rollup? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil
            ) {
                self.url = url
                self.pull_request_review_id = pull_request_review_id
                self.id = id
                self.node_id = node_id
                self.diff_hunk = diff_hunk
                self.path = path
                self.position = position
                self.original_position = original_position
                self.commit_id = commit_id
                self.original_commit_id = original_commit_id
                self.in_reply_to_id = in_reply_to_id
                self.user = user
                self.body = body
                self.created_at = created_at
                self.updated_at = updated_at
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self.author_association = author_association
                self._links = _links
                self.start_line = start_line
                self.original_start_line = original_start_line
                self.start_side = start_side
                self.line = line
                self.original_line = original_line
                self.side = side
                self.subject_type = subject_type
                self.reactions = reactions
                self.body_html = body_html
                self.body_text = body_text
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case pull_request_review_id
                case id
                case node_id
                case diff_hunk
                case path
                case position
                case original_position
                case commit_id
                case original_commit_id
                case in_reply_to_id
                case user
                case body
                case created_at
                case updated_at
                case html_url
                case pull_request_url
                case author_association
                case _links
                case start_line
                case original_start_line
                case start_side
                case line
                case original_line
                case side
                case subject_type
                case reactions
                case body_html
                case body_text
            }
        }
        /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request`.
        public struct pull_request: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments_url`.
            public var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comment_url`.
            public var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/statuses_url`.
            public var statuses_url: Swift.String
            /// Number uniquely identifying the pull request within its repository.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/number`.
            public var number: Swift.Int
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            @frozen
            public enum statePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case open
                case closed
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "open": self = .open
                    case "closed": self = .closed
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .open: return "open"
                    case .closed: return "closed"
                    }
                }
                public static var allCases: [statePayload] { [.open, .closed] }
            }
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            public var state: Components.Schemas.pull_request.statePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/locked`.
            public var locked: Swift.Bool
            /// The title of the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/user`.
            public var user: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/pull-request/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/default`.
                public var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                public init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            public typealias labelsPayload = [Components.Schemas.pull_request.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            public var labels: Components.Schemas.pull_request.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/milestone`.
            public var milestone: Components.Schemas.nullable_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_at`.
            public var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merge_commit_sha`.
            public var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignee`.
            public var assignee: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignees`.
            public var assignees: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_reviewers`.
            public var requested_reviewers: [Components.Schemas.simple_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_teams`.
            public var requested_teams: [Components.Schemas.team_simple]?
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            public struct headPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/head/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                public struct repoPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archive_url`.
                    public var archive_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/assignees_url`.
                    public var assignees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/blobs_url`.
                    public var blobs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/branches_url`.
                    public var branches_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/collaborators_url`.
                    public var collaborators_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/comments_url`.
                    public var comments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/commits_url`.
                    public var commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/compare_url`.
                    public var compare_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contents_url`.
                    public var contents_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contributors_url`.
                    public var contributors_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/deployments_url`.
                    public var deployments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/downloads_url`.
                    public var downloads_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/events_url`.
                    public var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_url`.
                    public var forks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/full_name`.
                    public var full_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_commits_url`.
                    public var git_commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_refs_url`.
                    public var git_refs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_tags_url`.
                    public var git_tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/hooks_url`.
                    public var hooks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/html_url`.
                    public var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_comment_url`.
                    public var issue_comment_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_events_url`.
                    public var issue_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issues_url`.
                    public var issues_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/keys_url`.
                    public var keys_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/labels_url`.
                    public var labels_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/languages_url`.
                    public var languages_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/merges_url`.
                    public var merges_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/milestones_url`.
                    public var milestones_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/notifications_url`.
                    public var notifications_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    public struct ownerPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/avatar_url`.
                        public var avatar_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/events_url`.
                        public var events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/followers_url`.
                        public var followers_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/following_url`.
                        public var following_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gists_url`.
                        public var gists_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gravatar_id`.
                        public var gravatar_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/html_url`.
                        public var html_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/node_id`.
                        public var node_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/organizations_url`.
                        public var organizations_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/received_events_url`.
                        public var received_events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/repos_url`.
                        public var repos_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/site_admin`.
                        public var site_admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/starred_url`.
                        public var starred_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/subscriptions_url`.
                        public var subscriptions_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/type`.
                        public var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/url`.
                        public var url: Swift.String
                        /// Creates a new `ownerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatar_url:
                        ///   - events_url:
                        ///   - followers_url:
                        ///   - following_url:
                        ///   - gists_url:
                        ///   - gravatar_id:
                        ///   - html_url:
                        ///   - id:
                        ///   - node_id:
                        ///   - login:
                        ///   - organizations_url:
                        ///   - received_events_url:
                        ///   - repos_url:
                        ///   - site_admin:
                        ///   - starred_url:
                        ///   - subscriptions_url:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatar_url: Swift.String,
                            events_url: Swift.String,
                            followers_url: Swift.String,
                            following_url: Swift.String,
                            gists_url: Swift.String,
                            gravatar_id: Swift.String,
                            html_url: Swift.String,
                            id: Swift.Int,
                            node_id: Swift.String,
                            login: Swift.String,
                            organizations_url: Swift.String,
                            received_events_url: Swift.String,
                            repos_url: Swift.String,
                            site_admin: Swift.Bool,
                            starred_url: Swift.String,
                            subscriptions_url: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatar_url = avatar_url
                            self.events_url = events_url
                            self.followers_url = followers_url
                            self.following_url = following_url
                            self.gists_url = gists_url
                            self.gravatar_id = gravatar_id
                            self.html_url = html_url
                            self.id = id
                            self.node_id = node_id
                            self.login = login
                            self.organizations_url = organizations_url
                            self.received_events_url = received_events_url
                            self.repos_url = repos_url
                            self.site_admin = site_admin
                            self.starred_url = starred_url
                            self.subscriptions_url = subscriptions_url
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatar_url
                            case events_url
                            case followers_url
                            case following_url
                            case gists_url
                            case gravatar_id
                            case html_url
                            case id
                            case node_id
                            case login
                            case organizations_url
                            case received_events_url
                            case repos_url
                            case site_admin
                            case starred_url
                            case subscriptions_url
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    public var owner:
                        Components.Schemas.pull_request.headPayload.repoPayload.ownerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pulls_url`.
                    public var pulls_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/releases_url`.
                    public var releases_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_url`.
                    public var stargazers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/statuses_url`.
                    public var statuses_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscribers_url`.
                    public var subscribers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscription_url`.
                    public var subscription_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/tags_url`.
                    public var tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/teams_url`.
                    public var teams_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/trees_url`.
                    public var trees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/clone_url`.
                    public var clone_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/default_branch`.
                    public var default_branch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks`.
                    public var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_count`.
                    public var forks_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_url`.
                    public var git_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_downloads`.
                    public var has_downloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_issues`.
                    public var has_issues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_projects`.
                    public var has_projects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_wiki`.
                    public var has_wiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_pages`.
                    public var has_pages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_discussions`.
                    public var has_discussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/homepage`.
                    public var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/master_branch`.
                    public var master_branch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archived`.
                    public var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/disabled`.
                    public var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/visibility`.
                    public var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/mirror_url`.
                    public var mirror_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues`.
                    public var open_issues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues_count`.
                    public var open_issues_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/admin`.
                        public var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/maintain`.
                        public var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/push`.
                        public var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/triage`.
                        public var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/pull`.
                        public var pull: Swift.Bool
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        public init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        public enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    public var permissions:
                        Components.Schemas.pull_request.headPayload.repoPayload.permissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/temp_clone_token`.
                    public var temp_clone_token: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_merge_commit`.
                    public var allow_merge_commit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_squash_merge`.
                    public var allow_squash_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_rebase_merge`.
                    public var allow_rebase_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    public struct licensePayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/key`.
                        public var key: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/url`.
                        public var url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/spdx_id`.
                        public var spdx_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/node_id`.
                        public var node_id: Swift.String
                        /// Creates a new `licensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - url:
                        ///   - spdx_id:
                        ///   - node_id:
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            url: Swift.String,
                            spdx_id: Swift.String,
                            node_id: Swift.String
                        ) {
                            self.key = key
                            self.name = name
                            self.url = url
                            self.spdx_id = spdx_id
                            self.node_id = node_id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case url
                            case spdx_id
                            case node_id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    public var license:
                        Components.Schemas.pull_request.headPayload.repoPayload.licensePayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pushed_at`.
                    public var pushed_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/size`.
                    public var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/ssh_url`.
                    public var ssh_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_count`.
                    public var stargazers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/svn_url`.
                    public var svn_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/topics`.
                    public var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers`.
                    public var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers_count`.
                    public var watchers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/created_at`.
                    public var created_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/updated_at`.
                    public var updated_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_forking`.
                    public var allow_forking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/is_template`.
                    public var is_template: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/web_commit_signoff_required`.
                    public var web_commit_signoff_required: Swift.Bool?
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archive_url:
                    ///   - assignees_url:
                    ///   - blobs_url:
                    ///   - branches_url:
                    ///   - collaborators_url:
                    ///   - comments_url:
                    ///   - commits_url:
                    ///   - compare_url:
                    ///   - contents_url:
                    ///   - contributors_url:
                    ///   - deployments_url:
                    ///   - description:
                    ///   - downloads_url:
                    ///   - events_url:
                    ///   - fork:
                    ///   - forks_url:
                    ///   - full_name:
                    ///   - git_commits_url:
                    ///   - git_refs_url:
                    ///   - git_tags_url:
                    ///   - hooks_url:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - issue_comment_url:
                    ///   - issue_events_url:
                    ///   - issues_url:
                    ///   - keys_url:
                    ///   - labels_url:
                    ///   - languages_url:
                    ///   - merges_url:
                    ///   - milestones_url:
                    ///   - name:
                    ///   - notifications_url:
                    ///   - owner:
                    ///   - _private:
                    ///   - pulls_url:
                    ///   - releases_url:
                    ///   - stargazers_url:
                    ///   - statuses_url:
                    ///   - subscribers_url:
                    ///   - subscription_url:
                    ///   - tags_url:
                    ///   - teams_url:
                    ///   - trees_url:
                    ///   - url:
                    ///   - clone_url:
                    ///   - default_branch:
                    ///   - forks:
                    ///   - forks_count:
                    ///   - git_url:
                    ///   - has_downloads:
                    ///   - has_issues:
                    ///   - has_projects:
                    ///   - has_wiki:
                    ///   - has_pages:
                    ///   - has_discussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - master_branch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirror_url:
                    ///   - open_issues:
                    ///   - open_issues_count:
                    ///   - permissions:
                    ///   - temp_clone_token:
                    ///   - allow_merge_commit:
                    ///   - allow_squash_merge:
                    ///   - allow_rebase_merge:
                    ///   - license:
                    ///   - pushed_at:
                    ///   - size:
                    ///   - ssh_url:
                    ///   - stargazers_count:
                    ///   - svn_url:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchers_count:
                    ///   - created_at:
                    ///   - updated_at:
                    ///   - allow_forking:
                    ///   - is_template:
                    ///   - web_commit_signoff_required:
                    public init(
                        archive_url: Swift.String,
                        assignees_url: Swift.String,
                        blobs_url: Swift.String,
                        branches_url: Swift.String,
                        collaborators_url: Swift.String,
                        comments_url: Swift.String,
                        commits_url: Swift.String,
                        compare_url: Swift.String,
                        contents_url: Swift.String,
                        contributors_url: Swift.String,
                        deployments_url: Swift.String,
                        description: Swift.String? = nil,
                        downloads_url: Swift.String,
                        events_url: Swift.String,
                        fork: Swift.Bool,
                        forks_url: Swift.String,
                        full_name: Swift.String,
                        git_commits_url: Swift.String,
                        git_refs_url: Swift.String,
                        git_tags_url: Swift.String,
                        hooks_url: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        issue_comment_url: Swift.String,
                        issue_events_url: Swift.String,
                        issues_url: Swift.String,
                        keys_url: Swift.String,
                        labels_url: Swift.String,
                        languages_url: Swift.String,
                        merges_url: Swift.String,
                        milestones_url: Swift.String,
                        name: Swift.String,
                        notifications_url: Swift.String,
                        owner: Components.Schemas.pull_request.headPayload.repoPayload.ownerPayload,
                        _private: Swift.Bool,
                        pulls_url: Swift.String,
                        releases_url: Swift.String,
                        stargazers_url: Swift.String,
                        statuses_url: Swift.String,
                        subscribers_url: Swift.String,
                        subscription_url: Swift.String,
                        tags_url: Swift.String,
                        teams_url: Swift.String,
                        trees_url: Swift.String,
                        url: Swift.String,
                        clone_url: Swift.String,
                        default_branch: Swift.String,
                        forks: Swift.Int,
                        forks_count: Swift.Int,
                        git_url: Swift.String,
                        has_downloads: Swift.Bool,
                        has_issues: Swift.Bool,
                        has_projects: Swift.Bool,
                        has_wiki: Swift.Bool,
                        has_pages: Swift.Bool,
                        has_discussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        master_branch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirror_url: Swift.String? = nil,
                        open_issues: Swift.Int,
                        open_issues_count: Swift.Int,
                        permissions: Components.Schemas.pull_request.headPayload.repoPayload
                            .permissionsPayload? = nil,
                        temp_clone_token: Swift.String? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        license: Components.Schemas.pull_request.headPayload.repoPayload
                            .licensePayload? = nil,
                        pushed_at: Foundation.Date,
                        size: Swift.Int,
                        ssh_url: Swift.String,
                        stargazers_count: Swift.Int,
                        svn_url: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchers_count: Swift.Int,
                        created_at: Foundation.Date,
                        updated_at: Foundation.Date,
                        allow_forking: Swift.Bool? = nil,
                        is_template: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil
                    ) {
                        self.archive_url = archive_url
                        self.assignees_url = assignees_url
                        self.blobs_url = blobs_url
                        self.branches_url = branches_url
                        self.collaborators_url = collaborators_url
                        self.comments_url = comments_url
                        self.commits_url = commits_url
                        self.compare_url = compare_url
                        self.contents_url = contents_url
                        self.contributors_url = contributors_url
                        self.deployments_url = deployments_url
                        self.description = description
                        self.downloads_url = downloads_url
                        self.events_url = events_url
                        self.fork = fork
                        self.forks_url = forks_url
                        self.full_name = full_name
                        self.git_commits_url = git_commits_url
                        self.git_refs_url = git_refs_url
                        self.git_tags_url = git_tags_url
                        self.hooks_url = hooks_url
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.issue_comment_url = issue_comment_url
                        self.issue_events_url = issue_events_url
                        self.issues_url = issues_url
                        self.keys_url = keys_url
                        self.labels_url = labels_url
                        self.languages_url = languages_url
                        self.merges_url = merges_url
                        self.milestones_url = milestones_url
                        self.name = name
                        self.notifications_url = notifications_url
                        self.owner = owner
                        self._private = _private
                        self.pulls_url = pulls_url
                        self.releases_url = releases_url
                        self.stargazers_url = stargazers_url
                        self.statuses_url = statuses_url
                        self.subscribers_url = subscribers_url
                        self.subscription_url = subscription_url
                        self.tags_url = tags_url
                        self.teams_url = teams_url
                        self.trees_url = trees_url
                        self.url = url
                        self.clone_url = clone_url
                        self.default_branch = default_branch
                        self.forks = forks
                        self.forks_count = forks_count
                        self.git_url = git_url
                        self.has_downloads = has_downloads
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_pages = has_pages
                        self.has_discussions = has_discussions
                        self.homepage = homepage
                        self.language = language
                        self.master_branch = master_branch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirror_url = mirror_url
                        self.open_issues = open_issues
                        self.open_issues_count = open_issues_count
                        self.permissions = permissions
                        self.temp_clone_token = temp_clone_token
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_rebase_merge = allow_rebase_merge
                        self.license = license
                        self.pushed_at = pushed_at
                        self.size = size
                        self.ssh_url = ssh_url
                        self.stargazers_count = stargazers_count
                        self.svn_url = svn_url
                        self.topics = topics
                        self.watchers = watchers
                        self.watchers_count = watchers_count
                        self.created_at = created_at
                        self.updated_at = updated_at
                        self.allow_forking = allow_forking
                        self.is_template = is_template
                        self.web_commit_signoff_required = web_commit_signoff_required
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archive_url
                        case assignees_url
                        case blobs_url
                        case branches_url
                        case collaborators_url
                        case comments_url
                        case commits_url
                        case compare_url
                        case contents_url
                        case contributors_url
                        case deployments_url
                        case description
                        case downloads_url
                        case events_url
                        case fork
                        case forks_url
                        case full_name
                        case git_commits_url
                        case git_refs_url
                        case git_tags_url
                        case hooks_url
                        case html_url
                        case id
                        case node_id
                        case issue_comment_url
                        case issue_events_url
                        case issues_url
                        case keys_url
                        case labels_url
                        case languages_url
                        case merges_url
                        case milestones_url
                        case name
                        case notifications_url
                        case owner
                        case _private = "private"
                        case pulls_url
                        case releases_url
                        case stargazers_url
                        case statuses_url
                        case subscribers_url
                        case subscription_url
                        case tags_url
                        case teams_url
                        case trees_url
                        case url
                        case clone_url
                        case default_branch
                        case forks
                        case forks_count
                        case git_url
                        case has_downloads
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_pages
                        case has_discussions
                        case homepage
                        case language
                        case master_branch
                        case archived
                        case disabled
                        case visibility
                        case mirror_url
                        case open_issues
                        case open_issues_count
                        case permissions
                        case temp_clone_token
                        case allow_merge_commit
                        case allow_squash_merge
                        case allow_rebase_merge
                        case license
                        case pushed_at
                        case size
                        case ssh_url
                        case stargazers_count
                        case svn_url
                        case topics
                        case watchers
                        case watchers_count
                        case created_at
                        case updated_at
                        case allow_forking
                        case is_template
                        case web_commit_signoff_required
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                public var repo: Components.Schemas.pull_request.headPayload.repoPayload
                /// - Remark: Generated from `#/components/schemas/pull-request/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                public struct userPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/avatar_url`.
                    public var avatar_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/events_url`.
                    public var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/followers_url`.
                    public var followers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/following_url`.
                    public var following_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gists_url`.
                    public var gists_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gravatar_id`.
                    public var gravatar_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/html_url`.
                    public var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/organizations_url`.
                    public var organizations_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/received_events_url`.
                    public var received_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/repos_url`.
                    public var repos_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/site_admin`.
                    public var site_admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/starred_url`.
                    public var starred_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/subscriptions_url`.
                    public var subscriptions_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/type`.
                    public var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/url`.
                    public var url: Swift.String
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatar_url:
                    ///   - events_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - gravatar_id:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - login:
                    ///   - organizations_url:
                    ///   - received_events_url:
                    ///   - repos_url:
                    ///   - site_admin:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatar_url: Swift.String,
                        events_url: Swift.String,
                        followers_url: Swift.String,
                        following_url: Swift.String,
                        gists_url: Swift.String,
                        gravatar_id: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        login: Swift.String,
                        organizations_url: Swift.String,
                        received_events_url: Swift.String,
                        repos_url: Swift.String,
                        site_admin: Swift.Bool,
                        starred_url: Swift.String,
                        subscriptions_url: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatar_url = avatar_url
                        self.events_url = events_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.gravatar_id = gravatar_id
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.login = login
                        self.organizations_url = organizations_url
                        self.received_events_url = received_events_url
                        self.repos_url = repos_url
                        self.site_admin = site_admin
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatar_url
                        case events_url
                        case followers_url
                        case following_url
                        case gists_url
                        case gravatar_id
                        case html_url
                        case id
                        case node_id
                        case login
                        case organizations_url
                        case received_events_url
                        case repos_url
                        case site_admin
                        case starred_url
                        case subscriptions_url
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                public var user: Components.Schemas.pull_request.headPayload.userPayload
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.pull_request.headPayload.repoPayload,
                    sha: Swift.String,
                    user: Components.Schemas.pull_request.headPayload.userPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            public var head: Components.Schemas.pull_request.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            public struct basePayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/base/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                public struct repoPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archive_url`.
                    public var archive_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/assignees_url`.
                    public var assignees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/blobs_url`.
                    public var blobs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/branches_url`.
                    public var branches_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/collaborators_url`.
                    public var collaborators_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/comments_url`.
                    public var comments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/commits_url`.
                    public var commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/compare_url`.
                    public var compare_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contents_url`.
                    public var contents_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contributors_url`.
                    public var contributors_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/deployments_url`.
                    public var deployments_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/downloads_url`.
                    public var downloads_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/events_url`.
                    public var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_url`.
                    public var forks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/full_name`.
                    public var full_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_commits_url`.
                    public var git_commits_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_refs_url`.
                    public var git_refs_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_tags_url`.
                    public var git_tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/hooks_url`.
                    public var hooks_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/html_url`.
                    public var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/is_template`.
                    public var is_template: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_comment_url`.
                    public var issue_comment_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_events_url`.
                    public var issue_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issues_url`.
                    public var issues_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/keys_url`.
                    public var keys_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/labels_url`.
                    public var labels_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/languages_url`.
                    public var languages_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/merges_url`.
                    public var merges_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/milestones_url`.
                    public var milestones_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/notifications_url`.
                    public var notifications_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    public struct ownerPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/avatar_url`.
                        public var avatar_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/events_url`.
                        public var events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/followers_url`.
                        public var followers_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/following_url`.
                        public var following_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gists_url`.
                        public var gists_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gravatar_id`.
                        public var gravatar_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/html_url`.
                        public var html_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/node_id`.
                        public var node_id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/organizations_url`.
                        public var organizations_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/received_events_url`.
                        public var received_events_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/repos_url`.
                        public var repos_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/site_admin`.
                        public var site_admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/starred_url`.
                        public var starred_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/subscriptions_url`.
                        public var subscriptions_url: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/type`.
                        public var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/url`.
                        public var url: Swift.String
                        /// Creates a new `ownerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatar_url:
                        ///   - events_url:
                        ///   - followers_url:
                        ///   - following_url:
                        ///   - gists_url:
                        ///   - gravatar_id:
                        ///   - html_url:
                        ///   - id:
                        ///   - node_id:
                        ///   - login:
                        ///   - organizations_url:
                        ///   - received_events_url:
                        ///   - repos_url:
                        ///   - site_admin:
                        ///   - starred_url:
                        ///   - subscriptions_url:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatar_url: Swift.String,
                            events_url: Swift.String,
                            followers_url: Swift.String,
                            following_url: Swift.String,
                            gists_url: Swift.String,
                            gravatar_id: Swift.String,
                            html_url: Swift.String,
                            id: Swift.Int,
                            node_id: Swift.String,
                            login: Swift.String,
                            organizations_url: Swift.String,
                            received_events_url: Swift.String,
                            repos_url: Swift.String,
                            site_admin: Swift.Bool,
                            starred_url: Swift.String,
                            subscriptions_url: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatar_url = avatar_url
                            self.events_url = events_url
                            self.followers_url = followers_url
                            self.following_url = following_url
                            self.gists_url = gists_url
                            self.gravatar_id = gravatar_id
                            self.html_url = html_url
                            self.id = id
                            self.node_id = node_id
                            self.login = login
                            self.organizations_url = organizations_url
                            self.received_events_url = received_events_url
                            self.repos_url = repos_url
                            self.site_admin = site_admin
                            self.starred_url = starred_url
                            self.subscriptions_url = subscriptions_url
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatar_url
                            case events_url
                            case followers_url
                            case following_url
                            case gists_url
                            case gravatar_id
                            case html_url
                            case id
                            case node_id
                            case login
                            case organizations_url
                            case received_events_url
                            case repos_url
                            case site_admin
                            case starred_url
                            case subscriptions_url
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    public var owner:
                        Components.Schemas.pull_request.basePayload.repoPayload.ownerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pulls_url`.
                    public var pulls_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/releases_url`.
                    public var releases_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_url`.
                    public var stargazers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/statuses_url`.
                    public var statuses_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscribers_url`.
                    public var subscribers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscription_url`.
                    public var subscription_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/tags_url`.
                    public var tags_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/teams_url`.
                    public var teams_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/trees_url`.
                    public var trees_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/clone_url`.
                    public var clone_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/default_branch`.
                    public var default_branch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks`.
                    public var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_count`.
                    public var forks_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_url`.
                    public var git_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_downloads`.
                    public var has_downloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_issues`.
                    public var has_issues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_projects`.
                    public var has_projects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_wiki`.
                    public var has_wiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_pages`.
                    public var has_pages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_discussions`.
                    public var has_discussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/homepage`.
                    public var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/master_branch`.
                    public var master_branch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archived`.
                    public var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/disabled`.
                    public var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/visibility`.
                    public var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/mirror_url`.
                    public var mirror_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues`.
                    public var open_issues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues_count`.
                    public var open_issues_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    public struct permissionsPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/admin`.
                        public var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/maintain`.
                        public var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/push`.
                        public var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/triage`.
                        public var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/pull`.
                        public var pull: Swift.Bool
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        public init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        public enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    public var permissions:
                        Components.Schemas.pull_request.basePayload.repoPayload.permissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/temp_clone_token`.
                    public var temp_clone_token: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_merge_commit`.
                    public var allow_merge_commit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_squash_merge`.
                    public var allow_squash_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_rebase_merge`.
                    public var allow_rebase_merge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/license`.
                    public var license: Components.Schemas.nullable_license_simple?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pushed_at`.
                    public var pushed_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/size`.
                    public var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/ssh_url`.
                    public var ssh_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_count`.
                    public var stargazers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/svn_url`.
                    public var svn_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/topics`.
                    public var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers`.
                    public var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers_count`.
                    public var watchers_count: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/created_at`.
                    public var created_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/updated_at`.
                    public var updated_at: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_forking`.
                    public var allow_forking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/web_commit_signoff_required`.
                    public var web_commit_signoff_required: Swift.Bool?
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archive_url:
                    ///   - assignees_url:
                    ///   - blobs_url:
                    ///   - branches_url:
                    ///   - collaborators_url:
                    ///   - comments_url:
                    ///   - commits_url:
                    ///   - compare_url:
                    ///   - contents_url:
                    ///   - contributors_url:
                    ///   - deployments_url:
                    ///   - description:
                    ///   - downloads_url:
                    ///   - events_url:
                    ///   - fork:
                    ///   - forks_url:
                    ///   - full_name:
                    ///   - git_commits_url:
                    ///   - git_refs_url:
                    ///   - git_tags_url:
                    ///   - hooks_url:
                    ///   - html_url:
                    ///   - id:
                    ///   - is_template:
                    ///   - node_id:
                    ///   - issue_comment_url:
                    ///   - issue_events_url:
                    ///   - issues_url:
                    ///   - keys_url:
                    ///   - labels_url:
                    ///   - languages_url:
                    ///   - merges_url:
                    ///   - milestones_url:
                    ///   - name:
                    ///   - notifications_url:
                    ///   - owner:
                    ///   - _private:
                    ///   - pulls_url:
                    ///   - releases_url:
                    ///   - stargazers_url:
                    ///   - statuses_url:
                    ///   - subscribers_url:
                    ///   - subscription_url:
                    ///   - tags_url:
                    ///   - teams_url:
                    ///   - trees_url:
                    ///   - url:
                    ///   - clone_url:
                    ///   - default_branch:
                    ///   - forks:
                    ///   - forks_count:
                    ///   - git_url:
                    ///   - has_downloads:
                    ///   - has_issues:
                    ///   - has_projects:
                    ///   - has_wiki:
                    ///   - has_pages:
                    ///   - has_discussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - master_branch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirror_url:
                    ///   - open_issues:
                    ///   - open_issues_count:
                    ///   - permissions:
                    ///   - temp_clone_token:
                    ///   - allow_merge_commit:
                    ///   - allow_squash_merge:
                    ///   - allow_rebase_merge:
                    ///   - license:
                    ///   - pushed_at:
                    ///   - size:
                    ///   - ssh_url:
                    ///   - stargazers_count:
                    ///   - svn_url:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchers_count:
                    ///   - created_at:
                    ///   - updated_at:
                    ///   - allow_forking:
                    ///   - web_commit_signoff_required:
                    public init(
                        archive_url: Swift.String,
                        assignees_url: Swift.String,
                        blobs_url: Swift.String,
                        branches_url: Swift.String,
                        collaborators_url: Swift.String,
                        comments_url: Swift.String,
                        commits_url: Swift.String,
                        compare_url: Swift.String,
                        contents_url: Swift.String,
                        contributors_url: Swift.String,
                        deployments_url: Swift.String,
                        description: Swift.String? = nil,
                        downloads_url: Swift.String,
                        events_url: Swift.String,
                        fork: Swift.Bool,
                        forks_url: Swift.String,
                        full_name: Swift.String,
                        git_commits_url: Swift.String,
                        git_refs_url: Swift.String,
                        git_tags_url: Swift.String,
                        hooks_url: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        is_template: Swift.Bool? = nil,
                        node_id: Swift.String,
                        issue_comment_url: Swift.String,
                        issue_events_url: Swift.String,
                        issues_url: Swift.String,
                        keys_url: Swift.String,
                        labels_url: Swift.String,
                        languages_url: Swift.String,
                        merges_url: Swift.String,
                        milestones_url: Swift.String,
                        name: Swift.String,
                        notifications_url: Swift.String,
                        owner: Components.Schemas.pull_request.basePayload.repoPayload.ownerPayload,
                        _private: Swift.Bool,
                        pulls_url: Swift.String,
                        releases_url: Swift.String,
                        stargazers_url: Swift.String,
                        statuses_url: Swift.String,
                        subscribers_url: Swift.String,
                        subscription_url: Swift.String,
                        tags_url: Swift.String,
                        teams_url: Swift.String,
                        trees_url: Swift.String,
                        url: Swift.String,
                        clone_url: Swift.String,
                        default_branch: Swift.String,
                        forks: Swift.Int,
                        forks_count: Swift.Int,
                        git_url: Swift.String,
                        has_downloads: Swift.Bool,
                        has_issues: Swift.Bool,
                        has_projects: Swift.Bool,
                        has_wiki: Swift.Bool,
                        has_pages: Swift.Bool,
                        has_discussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        master_branch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirror_url: Swift.String? = nil,
                        open_issues: Swift.Int,
                        open_issues_count: Swift.Int,
                        permissions: Components.Schemas.pull_request.basePayload.repoPayload
                            .permissionsPayload? = nil,
                        temp_clone_token: Swift.String? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        license: Components.Schemas.nullable_license_simple? = nil,
                        pushed_at: Foundation.Date,
                        size: Swift.Int,
                        ssh_url: Swift.String,
                        stargazers_count: Swift.Int,
                        svn_url: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchers_count: Swift.Int,
                        created_at: Foundation.Date,
                        updated_at: Foundation.Date,
                        allow_forking: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil
                    ) {
                        self.archive_url = archive_url
                        self.assignees_url = assignees_url
                        self.blobs_url = blobs_url
                        self.branches_url = branches_url
                        self.collaborators_url = collaborators_url
                        self.comments_url = comments_url
                        self.commits_url = commits_url
                        self.compare_url = compare_url
                        self.contents_url = contents_url
                        self.contributors_url = contributors_url
                        self.deployments_url = deployments_url
                        self.description = description
                        self.downloads_url = downloads_url
                        self.events_url = events_url
                        self.fork = fork
                        self.forks_url = forks_url
                        self.full_name = full_name
                        self.git_commits_url = git_commits_url
                        self.git_refs_url = git_refs_url
                        self.git_tags_url = git_tags_url
                        self.hooks_url = hooks_url
                        self.html_url = html_url
                        self.id = id
                        self.is_template = is_template
                        self.node_id = node_id
                        self.issue_comment_url = issue_comment_url
                        self.issue_events_url = issue_events_url
                        self.issues_url = issues_url
                        self.keys_url = keys_url
                        self.labels_url = labels_url
                        self.languages_url = languages_url
                        self.merges_url = merges_url
                        self.milestones_url = milestones_url
                        self.name = name
                        self.notifications_url = notifications_url
                        self.owner = owner
                        self._private = _private
                        self.pulls_url = pulls_url
                        self.releases_url = releases_url
                        self.stargazers_url = stargazers_url
                        self.statuses_url = statuses_url
                        self.subscribers_url = subscribers_url
                        self.subscription_url = subscription_url
                        self.tags_url = tags_url
                        self.teams_url = teams_url
                        self.trees_url = trees_url
                        self.url = url
                        self.clone_url = clone_url
                        self.default_branch = default_branch
                        self.forks = forks
                        self.forks_count = forks_count
                        self.git_url = git_url
                        self.has_downloads = has_downloads
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_pages = has_pages
                        self.has_discussions = has_discussions
                        self.homepage = homepage
                        self.language = language
                        self.master_branch = master_branch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirror_url = mirror_url
                        self.open_issues = open_issues
                        self.open_issues_count = open_issues_count
                        self.permissions = permissions
                        self.temp_clone_token = temp_clone_token
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_rebase_merge = allow_rebase_merge
                        self.license = license
                        self.pushed_at = pushed_at
                        self.size = size
                        self.ssh_url = ssh_url
                        self.stargazers_count = stargazers_count
                        self.svn_url = svn_url
                        self.topics = topics
                        self.watchers = watchers
                        self.watchers_count = watchers_count
                        self.created_at = created_at
                        self.updated_at = updated_at
                        self.allow_forking = allow_forking
                        self.web_commit_signoff_required = web_commit_signoff_required
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archive_url
                        case assignees_url
                        case blobs_url
                        case branches_url
                        case collaborators_url
                        case comments_url
                        case commits_url
                        case compare_url
                        case contents_url
                        case contributors_url
                        case deployments_url
                        case description
                        case downloads_url
                        case events_url
                        case fork
                        case forks_url
                        case full_name
                        case git_commits_url
                        case git_refs_url
                        case git_tags_url
                        case hooks_url
                        case html_url
                        case id
                        case is_template
                        case node_id
                        case issue_comment_url
                        case issue_events_url
                        case issues_url
                        case keys_url
                        case labels_url
                        case languages_url
                        case merges_url
                        case milestones_url
                        case name
                        case notifications_url
                        case owner
                        case _private = "private"
                        case pulls_url
                        case releases_url
                        case stargazers_url
                        case statuses_url
                        case subscribers_url
                        case subscription_url
                        case tags_url
                        case teams_url
                        case trees_url
                        case url
                        case clone_url
                        case default_branch
                        case forks
                        case forks_count
                        case git_url
                        case has_downloads
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_pages
                        case has_discussions
                        case homepage
                        case language
                        case master_branch
                        case archived
                        case disabled
                        case visibility
                        case mirror_url
                        case open_issues
                        case open_issues_count
                        case permissions
                        case temp_clone_token
                        case allow_merge_commit
                        case allow_squash_merge
                        case allow_rebase_merge
                        case license
                        case pushed_at
                        case size
                        case ssh_url
                        case stargazers_count
                        case svn_url
                        case topics
                        case watchers
                        case watchers_count
                        case created_at
                        case updated_at
                        case allow_forking
                        case web_commit_signoff_required
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                public var repo: Components.Schemas.pull_request.basePayload.repoPayload
                /// - Remark: Generated from `#/components/schemas/pull-request/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                public struct userPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/avatar_url`.
                    public var avatar_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/events_url`.
                    public var events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/followers_url`.
                    public var followers_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/following_url`.
                    public var following_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gists_url`.
                    public var gists_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gravatar_id`.
                    public var gravatar_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/html_url`.
                    public var html_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/organizations_url`.
                    public var organizations_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/received_events_url`.
                    public var received_events_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/repos_url`.
                    public var repos_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/site_admin`.
                    public var site_admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/starred_url`.
                    public var starred_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/subscriptions_url`.
                    public var subscriptions_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/type`.
                    public var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/url`.
                    public var url: Swift.String
                    /// Creates a new `userPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatar_url:
                    ///   - events_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - gravatar_id:
                    ///   - html_url:
                    ///   - id:
                    ///   - node_id:
                    ///   - login:
                    ///   - organizations_url:
                    ///   - received_events_url:
                    ///   - repos_url:
                    ///   - site_admin:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatar_url: Swift.String,
                        events_url: Swift.String,
                        followers_url: Swift.String,
                        following_url: Swift.String,
                        gists_url: Swift.String,
                        gravatar_id: Swift.String,
                        html_url: Swift.String,
                        id: Swift.Int,
                        node_id: Swift.String,
                        login: Swift.String,
                        organizations_url: Swift.String,
                        received_events_url: Swift.String,
                        repos_url: Swift.String,
                        site_admin: Swift.Bool,
                        starred_url: Swift.String,
                        subscriptions_url: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatar_url = avatar_url
                        self.events_url = events_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.gravatar_id = gravatar_id
                        self.html_url = html_url
                        self.id = id
                        self.node_id = node_id
                        self.login = login
                        self.organizations_url = organizations_url
                        self.received_events_url = received_events_url
                        self.repos_url = repos_url
                        self.site_admin = site_admin
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatar_url
                        case events_url
                        case followers_url
                        case following_url
                        case gists_url
                        case gravatar_id
                        case html_url
                        case id
                        case node_id
                        case login
                        case organizations_url
                        case received_events_url
                        case repos_url
                        case site_admin
                        case starred_url
                        case subscriptions_url
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                public var user: Components.Schemas.pull_request.basePayload.userPayload
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.pull_request.basePayload.repoPayload,
                    sha: Swift.String,
                    user: Components.Schemas.pull_request.basePayload.userPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            public var base: Components.Schemas.pull_request.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            public struct _linksPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/comments`.
                public var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/commits`.
                public var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/statuses`.
                public var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/issue`.
                public var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comments`.
                public var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comment`.
                public var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/self`.
                public var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                public init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            public var _links: Components.Schemas.pull_request._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/author_association`.
            public var author_association: Components.Schemas.author_association
            /// - Remark: Generated from `#/components/schemas/pull-request/auto_merge`.
            public var auto_merge: Components.Schemas.auto_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged`.
            public var merged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable`.
            public var mergeable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/rebaseable`.
            public var rebaseable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable_state`.
            public var mergeable_state: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_by`.
            public var merged_by: Components.Schemas.nullable_simple_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/comments`.
            public var comments: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments`.
            public var review_comments: Swift.Int?
            /// Indicates whether maintainers can modify the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/maintainer_can_modify`.
            public var maintainer_can_modify: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/commits`.
            public var commits: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/additions`.
            public var additions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/deletions`.
            public var deletions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/changed_files`.
            public var changed_files: Swift.Int?
            /// Creates a new `pull_request`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number: Number uniquely identifying the pull request within its repository.
            ///   - state: State of this Pull Request. Either `open` or `closed`.
            ///   - locked:
            ///   - title: The title of the pull request.
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            ///   - merged:
            ///   - mergeable:
            ///   - rebaseable:
            ///   - mergeable_state:
            ///   - merged_by:
            ///   - comments:
            ///   - review_comments:
            ///   - maintainer_can_modify: Indicates whether maintainers can modify the pull request.
            ///   - commits:
            ///   - additions:
            ///   - deletions:
            ///   - changed_files:
            public init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.pull_request.statePayload,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.simple_user,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_request.labelsPayload,
                milestone: Components.Schemas.nullable_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_simple_user? = nil,
                assignees: [Components.Schemas.simple_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_user]? = nil,
                requested_teams: [Components.Schemas.team_simple]? = nil,
                head: Components.Schemas.pull_request.headPayload,
                base: Components.Schemas.pull_request.basePayload,
                _links: Components.Schemas.pull_request._linksPayload,
                author_association: Components.Schemas.author_association,
                auto_merge: Components.Schemas.auto_merge? = nil,
                draft: Swift.Bool? = nil,
                merged: Swift.Bool? = nil,
                mergeable: Swift.Bool? = nil,
                rebaseable: Swift.Bool? = nil,
                mergeable_state: Swift.String? = nil,
                merged_by: Components.Schemas.nullable_simple_user? = nil,
                comments: Swift.Int? = nil,
                review_comments: Swift.Int? = nil,
                maintainer_can_modify: Swift.Bool? = nil,
                commits: Swift.Int? = nil,
                additions: Swift.Int? = nil,
                deletions: Swift.Int? = nil,
                changed_files: Swift.Int? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
                self.merged = merged
                self.mergeable = mergeable
                self.rebaseable = rebaseable
                self.mergeable_state = mergeable_state
                self.merged_by = merged_by
                self.comments = comments
                self.review_comments = review_comments
                self.maintainer_can_modify = maintainer_can_modify
                self.commits = commits
                self.additions = additions
                self.deletions = deletions
                self.changed_files = changed_files
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
                case merged
                case mergeable
                case rebaseable
                case mergeable_state
                case merged_by
                case comments
                case review_comments
                case maintainer_can_modify
                case commits
                case additions
                case deletions
                case changed_files
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        public struct release_asset: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            public var browser_download_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            public var node_id: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            public var label: Swift.String
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen
            public enum statePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case uploaded
                case open
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "uploaded": self = .uploaded
                    case "open": self = .open
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .uploaded: return "uploaded"
                    case .open: return "open"
                    }
                }
                public static var allCases: [statePayload] { [.uploaded, .open] }
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            public var state: Components.Schemas.release_asset.statePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            public var content_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            public var download_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            public var uploader: Components.Schemas.nullable_simple_user
            /// Creates a new `release_asset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browser_download_url:
            ///   - id:
            ///   - node_id:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - content_type:
            ///   - size:
            ///   - download_count:
            ///   - created_at:
            ///   - updated_at:
            ///   - uploader:
            public init(
                url: Swift.String,
                browser_download_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                label: Swift.String,
                state: Components.Schemas.release_asset.statePayload,
                content_type: Swift.String,
                size: Swift.Int,
                download_count: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                uploader: Components.Schemas.nullable_simple_user
            ) {
                self.url = url
                self.browser_download_url = browser_download_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.label = label
                self.state = state
                self.content_type = content_type
                self.size = size
                self.download_count = download_count
                self.created_at = created_at
                self.updated_at = updated_at
                self.uploader = uploader
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case browser_download_url
                case id
                case node_id
                case name
                case label
                case state
                case content_type
                case size
                case download_count
                case created_at
                case updated_at
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        public struct release: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            public var assets_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            public var upload_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            public var tarball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            public var zipball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            public var node_id: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            public var tag_name: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            public var target_commitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/body`.
            public var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            public var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            public var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            public var published_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/author`.
            public var author: Components.Schemas.simple_user
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            public var assets: [Components.Schemas.release_asset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            public var mentions_count: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            public var discussion_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            public var reactions: Components.Schemas.reaction_rollup?
            /// Creates a new `release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - assets_url:
            ///   - upload_url:
            ///   - tarball_url:
            ///   - zipball_url:
            ///   - id:
            ///   - node_id:
            ///   - tag_name: The name of the tag.
            ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - created_at:
            ///   - published_at:
            ///   - author:
            ///   - assets:
            ///   - body_html:
            ///   - body_text:
            ///   - mentions_count:
            ///   - discussion_url: The URL of the release discussion.
            ///   - reactions:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                assets_url: Swift.String,
                upload_url: Swift.String,
                tarball_url: Swift.String,
                zipball_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                tag_name: Swift.String,
                target_commitish: Swift.String,
                name: Swift.String,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                created_at: Foundation.Date,
                published_at: Foundation.Date,
                author: Components.Schemas.simple_user,
                assets: [Components.Schemas.release_asset],
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                mentions_count: Swift.Int? = nil,
                discussion_url: Swift.String? = nil,
                reactions: Components.Schemas.reaction_rollup? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.assets_url = assets_url
                self.upload_url = upload_url
                self.tarball_url = tarball_url
                self.zipball_url = zipball_url
                self.id = id
                self.node_id = node_id
                self.tag_name = tag_name
                self.target_commitish = target_commitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.created_at = created_at
                self.published_at = published_at
                self.author = author
                self.assets = assets
                self.body_html = body_html
                self.body_text = body_text
                self.mentions_count = mentions_count
                self.discussion_url = discussion_url
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case assets_url
                case upload_url
                case tarball_url
                case zipball_url
                case id
                case node_id
                case tag_name
                case target_commitish
                case name
                case body
                case draft
                case prerelease
                case created_at
                case published_at
                case author
                case assets
                case body_html
                case body_text
                case mentions_count
                case discussion_url
                case reactions
            }
        }
        /// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct simple_installation: Codable, Equatable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var node_id: Swift.String?
            /// Creates a new `simple_installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - node_id: The global node ID of the installation.
            public init(id: Swift.Int, node_id: Swift.String? = nil) {
                self.id = id
                self.node_id = node_id
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100).
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_page = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        public typealias cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        public typealias delivery_id = Swift.Int
        /// Page number of the results to fetch.
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The unique identifier of the installation.
        ///
        /// - Remark: Generated from `#/components/parameters/installation-id`.
        public typealias installation_id = Swift.Int
        /// The client ID of the GitHub app.
        ///
        /// - Remark: Generated from `#/components/parameters/client-id`.
        public typealias client_id = Swift.String
        /// - Remark: Generated from `#/components/parameters/app-slug`.
        public typealias app_slug = Swift.String
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        public typealias enterprise = Swift.String
        /// A comma-separated list of states. If specified, only alerts with these states will be returned.
        ///
        /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-states`.
        public typealias dependabot_alert_comma_separated_states = Swift.String
        /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
        ///
        /// Can be: `low`, `medium`, `high`, `critical`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-severities`.
        public typealias dependabot_alert_comma_separated_severities = Swift.String
        /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
        ///
        /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-ecosystems`.
        public typealias dependabot_alert_comma_separated_ecosystems = Swift.String
        /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-packages`.
        public typealias dependabot_alert_comma_separated_packages = Swift.String
        /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
        @frozen
        public enum dependabot_alert_scope: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case development
            case runtime
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "development": self = .development
                case "runtime": self = .runtime
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .development: return "development"
                case .runtime: return "runtime"
                }
            }
            public static var allCases: [dependabot_alert_scope] { [.development, .runtime] }
        }
        /// The property by which to sort the results.
        /// `created` means when the alert was created.
        /// `updated` means when the alert's state last changed.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
        @frozen
        public enum dependabot_alert_sort: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case created
            case updated
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created": self = .created
                case "updated": self = .updated
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created: return "created"
                case .updated: return "updated"
                }
            }
            public static var allCases: [dependabot_alert_sort] { [.created, .updated] }
        }
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen
        public enum direction: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case asc
            case desc
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "asc": self = .asc
                case "desc": self = .desc
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .asc: return "asc"
                case .desc: return "desc"
                }
            }
            public static var allCases: [direction] { [.asc, .desc] }
        }
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_after = Swift.String
        /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
        /// This parameter must not be used in combination with `last`.
        /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-first`.
        public typealias pagination_first = Swift.Int
        /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
        /// This parameter must not be used in combination with `first`.
        /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-last`.
        public typealias pagination_last = Swift.Int
        /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
        @frozen
        public enum secret_scanning_alert_state: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case open
            case resolved
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "open": self = .open
                case "resolved": self = .resolved
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .open: return "open"
                case .resolved: return "resolved"
                }
            }
            public static var allCases: [secret_scanning_alert_state] { [.open, .resolved] }
        }
        /// A comma-separated list of secret types to return. By default all secret types are returned.
        /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
        /// for a complete list of secret types.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-secret-type`.
        public typealias secret_scanning_alert_secret_type = Swift.String
        /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-resolution`.
        public typealias secret_scanning_alert_resolution = Swift.String
        /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
        @frozen
        public enum secret_scanning_alert_sort: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case created
            case updated
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created": self = .created
                case "updated": self = .updated
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created: return "created"
                case .updated: return "updated"
                }
            }
            public static var allCases: [secret_scanning_alert_sort] { [.created, .updated] }
        }
        /// The unique identifier of the gist.
        ///
        /// - Remark: Generated from `#/components/parameters/gist-id`.
        public typealias gist_id = Swift.String
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        public typealias comment_id = Swift.Int
        /// A list of comma separated label names. Example: `bug,ui,@high`
        ///
        /// - Remark: Generated from `#/components/parameters/labels`.
        public typealias labels = Swift.String
        /// account_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/account-id`.
        public typealias account_id = Swift.Int
        /// The unique identifier of the plan.
        ///
        /// - Remark: Generated from `#/components/parameters/plan-id`.
        public typealias plan_id = Swift.Int
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen
        public enum sort: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case created
            case updated
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created": self = .created
                case "updated": self = .updated
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created: return "created"
                case .updated: return "updated"
                }
            }
            public static var allCases: [sort] { [.created, .updated] }
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// If `true`, show notifications marked as read.
        ///
        /// - Remark: Generated from `#/components/parameters/all`.
        public typealias all = Swift.Bool
        /// If `true`, only shows notifications in which the user is directly participating or mentioned.
        ///
        /// - Remark: Generated from `#/components/parameters/participating`.
        public typealias participating = Swift.Bool
        /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before`.
        public typealias before = Foundation.Date
        /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
        ///
        /// - Remark: Generated from `#/components/parameters/thread-id`.
        public typealias thread_id = Swift.Int
        /// An organization ID. Only return organizations with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-org`.
        public typealias since_org = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The unique identifier of the repository.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id`.
        public typealias repository_id = Swift.Int
        /// Unique identifier of the self-hosted runner.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-id`.
        public typealias runner_id = Swift.Int
        /// The name of a self-hosted runner's custom label.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-label-name`.
        public typealias runner_label_name = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        public typealias secret_name = Swift.String
        /// The number of results per page (max 30).
        ///
        /// - Remark: Generated from `#/components/parameters/variables-per-page`.
        public typealias variables_per_page = Swift.Int
        /// The name of the variable.
        ///
        /// - Remark: Generated from `#/components/parameters/variable-name`.
        public typealias variable_name = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-name`.
        public typealias tool_name = Components.Schemas.code_scanning_analysis_tool_name
        /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-guid`.
        public typealias tool_guid = Components.Schemas.code_scanning_analysis_tool_guid
        /// The unique identifier of the hook.
        ///
        /// - Remark: Generated from `#/components/parameters/hook-id`.
        public typealias hook_id = Swift.Int
        /// The unique identifier of the invitation.
        ///
        /// - Remark: Generated from `#/components/parameters/invitation-id`.
        public typealias invitation_id = Swift.Int
        /// The name of the codespace.
        ///
        /// - Remark: Generated from `#/components/parameters/codespace-name`.
        public typealias codespace_name = Swift.String
        /// The unique identifier of the migration.
        ///
        /// - Remark: Generated from `#/components/parameters/migration-id`.
        public typealias migration_id = Swift.Int
        /// repo_name parameter
        ///
        /// - Remark: Generated from `#/components/parameters/repo-name`.
        public typealias repo_name = Swift.String
        /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
        ///
        /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
        /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        ///
        /// - Remark: Generated from `#/components/parameters/package-visibility`.
        @frozen
        public enum package_visibility: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case _public
            case _private
            case _internal
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "public": self = ._public
                case "private": self = ._private
                case "internal": self = ._internal
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case ._public: return "public"
                case ._private: return "private"
                case ._internal: return "internal"
                }
            }
            public static var allCases: [package_visibility] { [._public, ._private, ._internal] }
        }
        /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        ///
        /// - Remark: Generated from `#/components/parameters/package-type`.
        @frozen
        public enum package_type: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case npm
            case maven
            case rubygems
            case docker
            case nuget
            case container
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "npm": self = .npm
                case "maven": self = .maven
                case "rubygems": self = .rubygems
                case "docker": self = .docker
                case "nuget": self = .nuget
                case "container": self = .container
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .npm: return "npm"
                case .maven: return "maven"
                case .rubygems: return "rubygems"
                case .docker: return "docker"
                case .nuget: return "nuget"
                case .container: return "container"
                }
            }
            public static var allCases: [package_type] {
                [.npm, .maven, .rubygems, .docker, .nuget, .container]
            }
        }
        /// The name of the package.
        ///
        /// - Remark: Generated from `#/components/parameters/package-name`.
        public typealias package_name = Swift.String
        /// Unique identifier of the package version.
        ///
        /// - Remark: Generated from `#/components/parameters/package-version-id`.
        public typealias package_version_id = Swift.Int
        /// The property by which to sort the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
        @frozen
        public enum personal_access_token_sort: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case created_at
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created_at": self = .created_at
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created_at: return "created_at"
                }
            }
            public static var allCases: [personal_access_token_sort] { [.created_at] }
        }
        /// A list of owner usernames to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-owner`.
        public typealias personal_access_token_owner = [Swift.String]
        /// The name of the repository to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-repository`.
        public typealias personal_access_token_repository = Swift.String
        /// The permission to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-permission`.
        public typealias personal_access_token_permission = Swift.String
        /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-before`.
        public typealias personal_access_token_before = Foundation.Date
        /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-after`.
        public typealias personal_access_token_after = Foundation.Date
        /// The unique identifier of the fine-grained personal access token.
        ///
        /// - Remark: Generated from `#/components/parameters/fine-grained-personal-access-token-id`.
        public typealias fine_grained_personal_access_token_id = Swift.Int
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-before-org-repo`.
        public typealias secret_scanning_pagination_before_org_repo = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-after-org-repo`.
        public typealias secret_scanning_pagination_after_org_repo = Swift.String
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        public typealias team_slug = Swift.String
        /// The number that identifies the discussion.
        ///
        /// - Remark: Generated from `#/components/parameters/discussion-number`.
        public typealias discussion_number = Swift.Int
        /// The number that identifies the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-number`.
        public typealias comment_number = Swift.Int
        /// The unique identifier of the reaction.
        ///
        /// - Remark: Generated from `#/components/parameters/reaction-id`.
        public typealias reaction_id = Swift.Int
        /// The unique identifier of the project.
        ///
        /// - Remark: Generated from `#/components/parameters/project-id`.
        public typealias project_id = Swift.Int
        /// The security feature to enable or disable.
        ///
        /// - Remark: Generated from `#/components/parameters/security-product`.
        @frozen
        public enum security_product: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case dependency_graph
            case dependabot_alerts
            case dependabot_security_updates
            case advanced_security
            case code_scanning_default_setup
            case secret_scanning
            case secret_scanning_push_protection
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "dependency_graph": self = .dependency_graph
                case "dependabot_alerts": self = .dependabot_alerts
                case "dependabot_security_updates": self = .dependabot_security_updates
                case "advanced_security": self = .advanced_security
                case "code_scanning_default_setup": self = .code_scanning_default_setup
                case "secret_scanning": self = .secret_scanning
                case "secret_scanning_push_protection": self = .secret_scanning_push_protection
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .dependency_graph: return "dependency_graph"
                case .dependabot_alerts: return "dependabot_alerts"
                case .dependabot_security_updates: return "dependabot_security_updates"
                case .advanced_security: return "advanced_security"
                case .code_scanning_default_setup: return "code_scanning_default_setup"
                case .secret_scanning: return "secret_scanning"
                case .secret_scanning_push_protection: return "secret_scanning_push_protection"
                }
            }
            public static var allCases: [security_product] {
                [
                    .dependency_graph, .dependabot_alerts, .dependabot_security_updates,
                    .advanced_security, .code_scanning_default_setup, .secret_scanning,
                    .secret_scanning_push_protection,
                ]
            }
        }
        /// The action to take.
        ///
        /// `enable_all` means to enable the specified security feature for all repositories in the organization.
        /// `disable_all` means to disable the specified security feature for all repositories in the organization.
        ///
        /// - Remark: Generated from `#/components/parameters/org-security-product-enablement`.
        @frozen
        public enum org_security_product_enablement: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case enable_all
            case disable_all
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "enable_all": self = .enable_all
                case "disable_all": self = .disable_all
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .enable_all: return "enable_all"
                case .disable_all: return "disable_all"
                }
            }
            public static var allCases: [org_security_product_enablement] {
                [.enable_all, .disable_all]
            }
        }
        /// The unique identifier of the card.
        ///
        /// - Remark: Generated from `#/components/parameters/card-id`.
        public typealias card_id = Swift.Int
        /// The unique identifier of the column.
        ///
        /// - Remark: Generated from `#/components/parameters/column-id`.
        public typealias column_id = Swift.Int
        /// The unique identifier of the artifact.
        ///
        /// - Remark: Generated from `#/components/parameters/artifact-id`.
        public typealias artifact_id = Swift.Int
        /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-git-ref-full`.
        public typealias actions_cache_git_ref_full = Swift.String
        /// An explicit key or prefix for identifying the cache
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key`.
        public typealias actions_cache_key = Swift.String
        /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-list-sort`.
        @frozen
        public enum actions_cache_list_sort: RawRepresentable, Codable, Equatable, Hashable,
            Sendable, _AutoLosslessStringConvertible, CaseIterable
        {
            case created_at
            case last_accessed_at
            case size_in_bytes
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created_at": self = .created_at
                case "last_accessed_at": self = .last_accessed_at
                case "size_in_bytes": self = .size_in_bytes
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created_at: return "created_at"
                case .last_accessed_at: return "last_accessed_at"
                case .size_in_bytes: return "size_in_bytes"
                }
            }
            public static var allCases: [actions_cache_list_sort] {
                [.created_at, .last_accessed_at, .size_in_bytes]
            }
        }
        /// A key for identifying the cache.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key-required`.
        public typealias actions_cache_key_required = Swift.String
        /// The unique identifier of the GitHub Actions cache.
        ///
        /// - Remark: Generated from `#/components/parameters/cache-id`.
        public typealias cache_id = Swift.Int
        /// The unique identifier of the job.
        ///
        /// - Remark: Generated from `#/components/parameters/job-id`.
        public typealias job_id = Swift.Int
        /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/actor`.
        public typealias actor = Swift.String
        /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-branch`.
        public typealias workflow_run_branch = Swift.String
        /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        ///
        /// - Remark: Generated from `#/components/parameters/event`.
        public typealias event = Swift.String
        /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
        @frozen
        public enum workflow_run_status: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case completed
            case action_required
            case cancelled
            case failure
            case neutral
            case skipped
            case stale
            case success
            case timed_out
            case in_progress
            case queued
            case requested
            case waiting
            case pending
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "completed": self = .completed
                case "action_required": self = .action_required
                case "cancelled": self = .cancelled
                case "failure": self = .failure
                case "neutral": self = .neutral
                case "skipped": self = .skipped
                case "stale": self = .stale
                case "success": self = .success
                case "timed_out": self = .timed_out
                case "in_progress": self = .in_progress
                case "queued": self = .queued
                case "requested": self = .requested
                case "waiting": self = .waiting
                case "pending": self = .pending
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .completed: return "completed"
                case .action_required: return "action_required"
                case .cancelled: return "cancelled"
                case .failure: return "failure"
                case .neutral: return "neutral"
                case .skipped: return "skipped"
                case .stale: return "stale"
                case .success: return "success"
                case .timed_out: return "timed_out"
                case .in_progress: return "in_progress"
                case .queued: return "queued"
                case .requested: return "requested"
                case .waiting: return "waiting"
                case .pending: return "pending"
                }
            }
            public static var allCases: [workflow_run_status] {
                [
                    .completed, .action_required, .cancelled, .failure, .neutral, .skipped, .stale,
                    .success, .timed_out, .in_progress, .queued, .requested, .waiting, .pending,
                ]
            }
        }
        /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
        ///
        /// - Remark: Generated from `#/components/parameters/created`.
        public typealias created = Foundation.Date
        /// If `true` pull requests are omitted from the response (empty array).
        ///
        /// - Remark: Generated from `#/components/parameters/exclude-pull-requests`.
        public typealias exclude_pull_requests = Swift.Bool
        /// Returns workflow runs with the `check_suite_id` that you specify.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-check-suite-id`.
        public typealias workflow_run_check_suite_id = Swift.Int
        /// Only returns workflow runs that are associated with the specified `head_sha`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-head-sha`.
        public typealias workflow_run_head_sha = Swift.String
        /// The unique identifier of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/run-id`.
        public typealias run_id = Swift.Int
        /// The attempt number of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/attempt-number`.
        public typealias attempt_number = Swift.Int
        /// The ID of the workflow. You can also pass the workflow file name as a string.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-id`.
        @frozen public enum workflow_id: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
            case case1(Swift.Int)
            /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
            case case2(Swift.String)
            /// Parsed a case that was not defined in the OpenAPI document.
            case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
            public init(from decoder: any Decoder) throws {
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {}
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {}
                let container = try decoder.singleValueContainer()
                let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                self = .undocumented(value)
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value): try value.encode(to: encoder)
                case let .case2(value): try value.encode(to: encoder)
                case let .undocumented(value): try value.encode(to: encoder)
                }
            }
        }
        /// The unique identifier of the autolink.
        ///
        /// - Remark: Generated from `#/components/parameters/autolink-id`.
        public typealias autolink_id = Swift.Int
        /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
        ///
        /// - Remark: Generated from `#/components/parameters/branch`.
        public typealias branch = Swift.String
        /// The unique identifier of the check run.
        ///
        /// - Remark: Generated from `#/components/parameters/check-run-id`.
        public typealias check_run_id = Swift.Int
        /// The unique identifier of the check suite.
        ///
        /// - Remark: Generated from `#/components/parameters/check-suite-id`.
        public typealias check_suite_id = Swift.Int
        /// Returns check runs with the specified `name`.
        ///
        /// - Remark: Generated from `#/components/parameters/check-name`.
        public typealias check_name = Swift.String
        /// Returns check runs with the specified `status`.
        ///
        /// - Remark: Generated from `#/components/parameters/status`.
        @frozen
        public enum status: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case queued
            case in_progress
            case completed
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "queued": self = .queued
                case "in_progress": self = .in_progress
                case "completed": self = .completed
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .queued: return "queued"
                case .in_progress: return "in_progress"
                case .completed: return "completed"
                }
            }
            public static var allCases: [status] { [.queued, .in_progress, .completed] }
        }
        /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/git-ref`.
        public typealias git_ref = Components.Schemas.code_scanning_ref
        /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/alert-number`.
        public typealias alert_number = Components.Schemas.alert_number
        /// The SHA of the commit.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-sha`.
        public typealias commit_sha = Swift.String
        /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-ref`.
        public typealias commit_ref = Swift.String
        /// A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-manifests`.
        public typealias dependabot_alert_comma_separated_manifests = Swift.String
        /// The number that identifies a Dependabot alert in its repository.
        /// You can find this at the end of the URL for a Dependabot alert within GitHub,
        /// or in `number` fields in the response from the
        /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-number`.
        public typealias dependabot_alert_number = Components.Schemas.alert_number
        /// The full path, relative to the repository root, of the dependency manifest file.
        ///
        /// - Remark: Generated from `#/components/parameters/manifest-path`.
        public typealias manifest_path = Swift.String
        /// deployment_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/deployment-id`.
        public typealias deployment_id = Swift.Int
        /// The name of the environment.
        ///
        /// - Remark: Generated from `#/components/parameters/environment-name`.
        public typealias environment_name = Swift.String
        /// The unique identifier of the branch policy.
        ///
        /// - Remark: Generated from `#/components/parameters/branch-policy-id`.
        public typealias branch_policy_id = Swift.Int
        /// The unique identifier of the protection rule.
        ///
        /// - Remark: Generated from `#/components/parameters/protection-rule-id`.
        public typealias protection_rule_id = Swift.Int
        /// A user ID. Only return users with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-user`.
        public typealias since_user = Swift.Int
        /// The number that identifies the issue.
        ///
        /// - Remark: Generated from `#/components/parameters/issue-number`.
        public typealias issue_number = Swift.Int
        /// The unique identifier of the key.
        ///
        /// - Remark: Generated from `#/components/parameters/key-id`.
        public typealias key_id = Swift.Int
        /// The number that identifies the milestone.
        ///
        /// - Remark: Generated from `#/components/parameters/milestone-number`.
        public typealias milestone_number = Swift.Int
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        public typealias pull_number = Swift.Int
        /// The unique identifier of the review.
        ///
        /// - Remark: Generated from `#/components/parameters/review-id`.
        public typealias review_id = Swift.Int
        /// The unique identifier of the asset.
        ///
        /// - Remark: Generated from `#/components/parameters/asset-id`.
        public typealias asset_id = Swift.Int
        /// The unique identifier of the release.
        ///
        /// - Remark: Generated from `#/components/parameters/release-id`.
        public typealias release_id = Swift.Int
        /// The GHSA (GitHub Security Advisory) identifier of the advisory.
        ///
        /// - Remark: Generated from `#/components/parameters/ghsa_id`.
        public typealias ghsa_id = Swift.String
        /// The unique identifier of the tag protection.
        ///
        /// - Remark: Generated from `#/components/parameters/tag-protection-id`.
        public typealias tag_protection_id = Swift.Int
        /// The time frame to display results for.
        ///
        /// - Remark: Generated from `#/components/parameters/per`.
        @frozen
        public enum per: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case day
            case week
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "day": self = .day
                case "week": self = .week
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .day: return "day"
                case .week: return "week"
                }
            }
            public static var allCases: [per] { [.day, .week] }
        }
        /// A repository ID. Only return repositories with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo`.
        public typealias since_repo = Swift.Int
        /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        ///
        /// - Remark: Generated from `#/components/parameters/order`.
        @frozen
        public enum order: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case desc
            case asc
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "desc": self = .desc
                case "asc": self = .asc
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .desc: return "desc"
                case .asc: return "asc"
                }
            }
            public static var allCases: [order] { [.desc, .asc] }
        }
        /// The unique identifier of the team.
        ///
        /// - Remark: Generated from `#/components/parameters/team-id`.
        public typealias team_id = Swift.Int
        /// ID of the Repository to filter on
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id-in-query`.
        public typealias repository_id_in_query = Swift.Int
        /// The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
        ///
        /// - Remark: Generated from `#/components/parameters/export-id`.
        public typealias export_id = Swift.String
        /// The unique identifier of the GPG key.
        ///
        /// - Remark: Generated from `#/components/parameters/gpg-key-id`.
        public typealias gpg_key_id = Swift.Int
        /// Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo-date`.
        public typealias since_repo_date = Foundation.Date
        /// Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before-repo-date`.
        public typealias before_repo_date = Foundation.Date
        /// The unique identifier of the SSH signing key.
        ///
        /// - Remark: Generated from `#/components/parameters/ssh-signing-key-id`.
        public typealias ssh_signing_key_id = Swift.Int
        /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
        ///
        /// - Remark: Generated from `#/components/parameters/sort-starred`.
        @frozen
        public enum sort_starred: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case created
            case updated
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "created": self = .created
                case "updated": self = .updated
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .created: return "created"
                case .updated: return "updated"
                }
            }
            public static var allCases: [sort_starred] { [.created, .updated] }
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.not_found.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.not_found.Headers = .init(),
                body: Components.Responses.not_found.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct validation_failed_simple: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.validation_failed_simple.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.validation_error_simple)
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.validation_failed_simple.Headers = .init(),
                body: Components.Responses.validation_failed_simple.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct bad_request: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.bad_request.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.bad_request.Headers = .init(),
                body: Components.Responses.bad_request.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.validation_failed.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.validation_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.validation_failed.Headers = .init(),
                body: Components.Responses.validation_failed.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct accepted: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.accepted.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.accepted.Headers = .init(),
                body: Components.Responses.accepted.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct not_modified: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.not_modified.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            /// Received HTTP response body
            public var body: Components.Responses.not_modified.Body?
            /// Creates a new `not_modified`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.not_modified.Headers = .init(),
                body: Components.Responses.not_modified.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct requires_authentication: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.requires_authentication.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.requires_authentication.Headers = .init(),
                body: Components.Responses.requires_authentication.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct forbidden: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.forbidden.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.forbidden.Headers = .init(),
                body: Components.Responses.forbidden.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.service_unavailable.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.service_unavailable.Headers = .init(),
                body: Components.Responses.service_unavailable.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct forbidden_gist: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.forbidden_gist.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden_gist/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/json/block`.
                    public struct blockPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/json/block/reason`.
                        public var reason: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/json/block/created_at`.
                        public var created_at: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/json/block/html_url`.
                        public var html_url: Swift.String?
                        /// Creates a new `blockPayload`.
                        ///
                        /// - Parameters:
                        ///   - reason:
                        ///   - created_at:
                        ///   - html_url:
                        public init(
                            reason: Swift.String? = nil,
                            created_at: Swift.String? = nil,
                            html_url: Swift.String? = nil
                        ) {
                            self.reason = reason
                            self.created_at = created_at
                            self.html_url = html_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case reason
                            case created_at
                            case html_url
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/json/block`.
                    public var block:
                        Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - block:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        block: Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload? =
                            nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.block = block
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block
                        case message
                        case documentation_url
                    }
                }
                case json(Components.Responses.forbidden_gist.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden_gist.Body
            /// Creates a new `forbidden_gist`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.forbidden_gist.Headers = .init(),
                body: Components.Responses.forbidden_gist.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct moved_permanently: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.moved_permanently.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.moved_permanently.Headers = .init(),
                body: Components.Responses.moved_permanently.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct conflict: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.conflict.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.conflict.Headers = .init(),
                body: Components.Responses.conflict.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct actions_runner_jitconfig: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.actions_runner_jitconfig.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/json/runner`.
                    public var runner: Components.Schemas.runner
                    /// The base64 encoded runner configuration.
                    ///
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/json/encoded_jit_config`.
                    public var encoded_jit_config: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - runner:
                    ///   - encoded_jit_config: The base64 encoded runner configuration.
                    public init(runner: Components.Schemas.runner, encoded_jit_config: Swift.String)
                    {
                        self.runner = runner
                        self.encoded_jit_config = encoded_jit_config
                    }
                    public enum CodingKeys: String, CodingKey {
                        case runner
                        case encoded_jit_config
                    }
                }
                case json(Components.Responses.actions_runner_jitconfig.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_jitconfig.Body
            /// Creates a new `actions_runner_jitconfig`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.actions_runner_jitconfig.Headers = .init(),
                body: Components.Responses.actions_runner_jitconfig.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct actions_runner_labels: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.actions_runner_labels.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/json/total_count`.
                    public var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/json/labels`.
                    public var labels: [Components.Schemas.runner_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    public init(total_count: Swift.Int, labels: [Components.Schemas.runner_label]) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                case json(Components.Responses.actions_runner_labels.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_labels.Body
            /// Creates a new `actions_runner_labels`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.actions_runner_labels.Headers = .init(),
                body: Components.Responses.actions_runner_labels.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct actions_runner_labels_readonly: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.actions_runner_labels_readonly.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/json/total_count`.
                    public var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/json/labels`.
                    public var labels: [Components.Schemas.runner_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    public init(total_count: Swift.Int, labels: [Components.Schemas.runner_label]) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                case json(Components.Responses.actions_runner_labels_readonly.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_labels_readonly.Body
            /// Creates a new `actions_runner_labels_readonly`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.actions_runner_labels_readonly.Headers = .init(),
                body: Components.Responses.actions_runner_labels_readonly.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct internal_error: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.internal_error.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.internal_error.Headers = .init(),
                body: Components.Responses.internal_error.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct package_es_list_error: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.package_es_list_error.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            /// Received HTTP response body
            public var body: Components.Responses.package_es_list_error.Body?
            /// Creates a new `package_es_list_error`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.package_es_list_error.Headers = .init(),
                body: Components.Responses.package_es_list_error.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct no_content: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.no_content.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            /// Received HTTP response body
            public var body: Components.Responses.no_content.Body?
            /// Creates a new `no_content`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.no_content.Headers = .init(),
                body: Components.Responses.no_content.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct gone: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.gone.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.gone.Body
            /// Creates a new `gone`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.gone.Headers = .init(),
                body: Components.Responses.gone.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct temporary_redirect: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.temporary_redirect.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.temporary_redirect.Body
            /// Creates a new `temporary_redirect`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.temporary_redirect.Headers = .init(),
                body: Components.Responses.temporary_redirect.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct code_scanning_forbidden_read: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.code_scanning_forbidden_read.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.code_scanning_forbidden_read.Body
            /// Creates a new `code_scanning_forbidden_read`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.code_scanning_forbidden_read.Headers = .init(),
                body: Components.Responses.code_scanning_forbidden_read.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct code_scanning_forbidden_write: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.code_scanning_forbidden_write.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.code_scanning_forbidden_write.Body
            /// Creates a new `code_scanning_forbidden_write`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.code_scanning_forbidden_write.Headers = .init(),
                body: Components.Responses.code_scanning_forbidden_write.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct found: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.found.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            /// Received HTTP response body
            public var body: Components.Responses.found.Body?
            /// Creates a new `found`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.found.Headers = .init(),
                body: Components.Responses.found.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct code_scanning_conflict: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.code_scanning_conflict.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.code_scanning_conflict.Body
            /// Creates a new `code_scanning_conflict`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.code_scanning_conflict.Headers = .init(),
                body: Components.Responses.code_scanning_conflict.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct porter_maintenance: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.porter_maintenance.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.basic_error)
            }
            /// Received HTTP response body
            public var body: Components.Responses.porter_maintenance.Body
            /// Creates a new `porter_maintenance`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.porter_maintenance.Headers = .init(),
                body: Components.Responses.porter_maintenance.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
        /// - Remark: Generated from `#/components/headers/content-type`.
        public typealias content_type = Swift.String
        /// - Remark: Generated from `#/components/headers/x-common-marker-version`.
        public typealias x_common_marker_version = Swift.String
        /// - Remark: Generated from `#/components/headers/x-rate-limit-limit`.
        public typealias x_rate_limit_limit = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-remaining`.
        public typealias x_rate_limit_remaining = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-reset`.
        public typealias x_rate_limit_reset = Swift.Int
        /// - Remark: Generated from `#/components/headers/location`.
        public typealias location = Swift.String
    }
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    public enum apps_create_installation_access_token {
        public static let id: String = "apps/create-installation-access-token"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var installation_id: Components.Parameters.installation_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id:
                public init(installation_id: Components.Parameters.installation_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_create_installation_access_token.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.apps_create_installation_access_token.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.apps_create_installation_access_token.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.apps_create_installation_access_token.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// List of repository names that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/json/repositories`.
                    public var repositories: [Swift.String]?
                    /// List of repository IDs that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/json/repository_ids`.
                    public var repository_ids: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/json/permissions`.
                    public var permissions: Components.Schemas.app_permissions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repositories: List of repository names that the token should have access to
                    ///   - repository_ids: List of repository IDs that the token should have access to
                    ///   - permissions:
                    public init(
                        repositories: [Swift.String]? = nil,
                        repository_ids: [Swift.Int]? = nil,
                        permissions: Components.Schemas.app_permissions? = nil
                    ) {
                        self.repositories = repositories
                        self.repository_ids = repository_ids
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case repositories
                        case repository_ids
                        case permissions
                    }
                }
                case json(Operations.apps_create_installation_access_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_create_installation_access_token.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.apps_create_installation_access_token.Input.Path,
                query: Operations.apps_create_installation_access_token.Input.Query = .init(),
                headers: Operations.apps_create_installation_access_token.Input.Headers = .init(),
                cookies: Operations.apps_create_installation_access_token.Input.Cookies = .init(),
                body: Operations.apps_create_installation_access_token.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.apps_create_installation_access_token.Output.Created.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.installation_token)
                }
                /// Received HTTP response body
                public var body:
                    Operations.apps_create_installation_access_token.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_create_installation_access_token.Output.Created
                        .Headers = .init(),
                    body: Operations.apps_create_installation_access_token.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.apps_create_installation_access_token.Output.Created)
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    public enum orgs_get {
        public static let id: String = "orgs/get"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org:
                public init(org: Components.Parameters.org) { self.org = org }
            }
            public var path: Operations.orgs_get.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.orgs_get.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.orgs_get.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.orgs_get.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.orgs_get.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.orgs_get.Input.Path,
                query: Operations.orgs_get.Input.Query = .init(),
                headers: Operations.orgs_get.Input.Headers = .init(),
                cookies: Operations.orgs_get.Input.Cookies = .init(),
                body: Operations.orgs_get.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_get.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.organization_full)
                }
                /// Received HTTP response body
                public var body: Operations.orgs_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_get.Output.Ok.Headers = .init(),
                    body: Operations.orgs_get.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_get.Output.Ok)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    public enum repos_get {
        public static let id: String = "repos/get"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_get.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.repos_get.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.repos_get.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.repos_get.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.repos_get.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_get.Input.Path,
                query: Operations.repos_get.Input.Query = .init(),
                headers: Operations.repos_get.Input.Headers = .init(),
                cookies: Operations.repos_get.Input.Cookies = .init(),
                body: Operations.repos_get.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_get.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.full_repository)
                }
                /// Received HTTP response body
                public var body: Operations.repos_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_get.Output.Ok.Headers = .init(),
                    body: Operations.repos_get.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_get.Output.Ok)
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    public enum repos_list_pull_requests_associated_with_commit {
        public static let id: String = "repos/list-pull-requests-associated-with-commit"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                public var commit_sha: Components.Parameters.commit_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - commit_sha:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            public var path: Operations.repos_list_pull_requests_associated_with_commit.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page:
                ///   - page:
                public init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_list_pull_requests_associated_with_commit.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers:
                Operations.repos_list_pull_requests_associated_with_commit.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies:
                Operations.repos_list_pull_requests_associated_with_commit.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.repos_list_pull_requests_associated_with_commit.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_list_pull_requests_associated_with_commit.Input.Path,
                query: Operations.repos_list_pull_requests_associated_with_commit.Input.Query =
                    .init(),
                headers: Operations.repos_list_pull_requests_associated_with_commit.Input.Headers =
                    .init(),
                cookies: Operations.repos_list_pull_requests_associated_with_commit.Input.Cookies =
                    .init(),
                body: Operations.repos_list_pull_requests_associated_with_commit.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.pull_request_simple])
                }
                /// Received HTTP response body
                public var body:
                    Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok
                        .Headers,
                    body: Operations.repos_list_pull_requests_associated_with_commit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_pull_requests_associated_with_commit.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    public enum repos_list_contributors {
        public static let id: String = "repos/list-contributors"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_list_contributors.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var anon: Swift.String?
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - anon:
                ///   - per_page:
                ///   - page:
                public init(
                    anon: Swift.String? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.anon = anon
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_list_contributors.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.repos_list_contributors.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.repos_list_contributors.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.repos_list_contributors.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_list_contributors.Input.Path,
                query: Operations.repos_list_contributors.Input.Query = .init(),
                headers: Operations.repos_list_contributors.Input.Headers = .init(),
                cookies: Operations.repos_list_contributors.Input.Cookies = .init(),
                body: Operations.repos_list_contributors.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_list_contributors.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.contributor])
                }
                /// Received HTTP response body
                public var body: Operations.repos_list_contributors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_list_contributors.Output.Ok.Headers,
                    body: Operations.repos_list_contributors.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// if repository contains content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_contributors.Output.Ok)
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_list_contributors.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.repos_list_contributors.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_list_contributors.Output.NoContent.Headers = .init(),
                    body: Operations.repos_list_contributors.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_list_contributors.Output.NoContent)
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    public enum issues_list_for_repo {
        public static let id: String = "issues/list-for-repo"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_list_for_repo.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var milestone: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                @frozen
                public enum statePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case open
                    case closed
                    case all
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "open": self = .open
                        case "closed": self = .closed
                        case "all": self = .all
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .open: return "open"
                        case .closed: return "closed"
                        case .all: return "all"
                        }
                    }
                    public static var allCases: [statePayload] { [.open, .closed, .all] }
                }
                public var state: Operations.issues_list_for_repo.Input.Query.statePayload?
                public var assignee: Swift.String?
                public var creator: Swift.String?
                public var mentioned: Swift.String?
                public var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                @frozen
                public enum sortPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case created
                    case updated
                    case comments
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "created": self = .created
                        case "updated": self = .updated
                        case "comments": self = .comments
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .created: return "created"
                        case .updated: return "updated"
                        case .comments: return "comments"
                        }
                    }
                    public static var allCases: [sortPayload] { [.created, .updated, .comments] }
                }
                public var sort: Operations.issues_list_for_repo.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen
                public enum direction: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case asc
                    case desc
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "asc": self = .asc
                        case "desc": self = .desc
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .asc: return "asc"
                        case .desc: return "desc"
                        }
                    }
                    public static var allCases: [direction] { [.asc, .desc] }
                }
                public var direction: Components.Parameters.direction?
                public var since: Components.Parameters.since?
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - milestone:
                ///   - state:
                ///   - assignee:
                ///   - creator:
                ///   - mentioned:
                ///   - labels:
                ///   - sort:
                ///   - direction:
                ///   - since:
                ///   - per_page:
                ///   - page:
                public init(
                    milestone: Swift.String? = nil,
                    state: Operations.issues_list_for_repo.Input.Query.statePayload? = nil,
                    assignee: Swift.String? = nil,
                    creator: Swift.String? = nil,
                    mentioned: Swift.String? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_list_for_repo.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.milestone = milestone
                    self.state = state
                    self.assignee = assignee
                    self.creator = creator
                    self.mentioned = mentioned
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_list_for_repo.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.issues_list_for_repo.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.issues_list_for_repo.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.issues_list_for_repo.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.issues_list_for_repo.Input.Path,
                query: Operations.issues_list_for_repo.Input.Query = .init(),
                headers: Operations.issues_list_for_repo.Input.Headers = .init(),
                cookies: Operations.issues_list_for_repo.Input.Cookies = .init(),
                body: Operations.issues_list_for_repo.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_list_for_repo.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.issue])
                }
                /// Received HTTP response body
                public var body: Operations.issues_list_for_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_list_for_repo.Output.Ok.Headers,
                    body: Operations.issues_list_for_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_list_for_repo.Output.Ok)
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    public enum issues_create {
        public static let id: String = "issues/create"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_create.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.issues_create.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.issues_create.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.issues_create.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/title`.
                    @frozen public enum titlePayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/title/case2`.
                        case case2(Swift.Int)
                        /// Parsed a case that was not defined in the OpenAPI document.
                        case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                        public init(from decoder: any Decoder) throws {
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {}
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {}
                            let container = try decoder.singleValueContainer()
                            let value = try container.decode(
                                OpenAPIRuntime.OpenAPIValueContainer.self
                            )
                            self = .undocumented(value)
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value): try value.encode(to: encoder)
                            case let .case2(value): try value.encode(to: encoder)
                            case let .undocumented(value): try value.encode(to: encoder)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/title`.
                    public var title: Operations.issues_create.Input.Body.jsonPayload.titlePayload
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/body`.
                    public var body: Swift.String?
                    /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/assignee`.
                    public var assignee: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/milestone`.
                    @frozen public enum milestonePayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/milestone/case2`.
                        case case2(Swift.Int)
                        /// Parsed a case that was not defined in the OpenAPI document.
                        case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                        public init(from decoder: any Decoder) throws {
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {}
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {}
                            let container = try decoder.singleValueContainer()
                            let value = try container.decode(
                                OpenAPIRuntime.OpenAPIValueContainer.self
                            )
                            self = .undocumented(value)
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value): try value.encode(to: encoder)
                            case let .case2(value): try value.encode(to: encoder)
                            case let .undocumented(value): try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/milestone`.
                    public var milestone:
                        Operations.issues_create.Input.Body.jsonPayload.milestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload`.
                    @frozen public enum labelsPayloadPayload: Codable, Equatable, Hashable, Sendable
                    {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2`.
                        public struct Case2Payload: Codable, Equatable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2/description`.
                            public var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2/color`.
                            public var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            public init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labelsPayload/case2`.
                        case case2(
                            Operations.issues_create.Input.Body.jsonPayload.labelsPayloadPayload
                                .Case2Payload
                        )
                        /// Parsed a case that was not defined in the OpenAPI document.
                        case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
                        public init(from decoder: any Decoder) throws {
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {}
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {}
                            let container = try decoder.singleValueContainer()
                            let value = try container.decode(
                                OpenAPIRuntime.OpenAPIValueContainer.self
                            )
                            self = .undocumented(value)
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value): try value.encode(to: encoder)
                            case let .case2(value): try value.encode(to: encoder)
                            case let .undocumented(value): try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labels`.
                    public typealias labelsPayload = [Operations.issues_create.Input.Body
                        .jsonPayload.labelsPayloadPayload]
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/labels`.
                    public var labels:
                        Operations.issues_create.Input.Body.jsonPayload.labelsPayload?
                    /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/json/assignees`.
                    public var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///   - assignees: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    public init(
                        title: Operations.issues_create.Input.Body.jsonPayload.titlePayload,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        milestone: Operations.issues_create.Input.Body.jsonPayload
                            .milestonePayload? = nil,
                        labels: Operations.issues_create.Input.Body.jsonPayload.labelsPayload? =
                            nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case milestone
                        case labels
                        case assignees
                    }
                }
                case json(Operations.issues_create.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.issues_create.Input.Path,
                query: Operations.issues_create.Input.Query = .init(),
                headers: Operations.issues_create.Input.Headers = .init(),
                cookies: Operations.issues_create.Input.Cookies = .init(),
                body: Operations.issues_create.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) { self.Location = Location }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_create.Output.Created.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.issue)
                }
                /// Received HTTP response body
                public var body: Operations.issues_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_create.Output.Created.Headers,
                    body: Operations.issues_create.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_create.Output.Created)
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    public enum issues_create_comment {
        public static let id: String = "issues/create-comment"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                public var issue_number: Components.Parameters.issue_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - issue_number:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_create_comment.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.issues_create_comment.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.issues_create_comment.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.issues_create_comment.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    public init(body: Swift.String) { self.body = body }
                    public enum CodingKeys: String, CodingKey { case body }
                }
                case json(Operations.issues_create_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_create_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.issues_create_comment.Input.Path,
                query: Operations.issues_create_comment.Input.Query = .init(),
                headers: Operations.issues_create_comment.Input.Headers = .init(),
                cookies: Operations.issues_create_comment.Input.Cookies = .init(),
                body: Operations.issues_create_comment.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) { self.Location = Location }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_create_comment.Output.Created.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.issue_comment)
                }
                /// Received HTTP response body
                public var body: Operations.issues_create_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_create_comment.Output.Created.Headers,
                    body: Operations.issues_create_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_create_comment.Output.Created)
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    public enum pulls_list {
        public static let id: String = "pulls/list"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.pulls_list.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                @frozen
                public enum statePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case open
                    case closed
                    case all
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "open": self = .open
                        case "closed": self = .closed
                        case "all": self = .all
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .open: return "open"
                        case .closed: return "closed"
                        case .all: return "all"
                        }
                    }
                    public static var allCases: [statePayload] { [.open, .closed, .all] }
                }
                public var state: Operations.pulls_list.Input.Query.statePayload?
                public var head: Swift.String?
                public var base: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                @frozen
                public enum sortPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case created
                    case updated
                    case popularity
                    case long_running
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "created": self = .created
                        case "updated": self = .updated
                        case "popularity": self = .popularity
                        case "long-running": self = .long_running
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .created: return "created"
                        case .updated: return "updated"
                        case .popularity: return "popularity"
                        case .long_running: return "long-running"
                        }
                    }
                    public static var allCases: [sortPayload] {
                        [.created, .updated, .popularity, .long_running]
                    }
                }
                public var sort: Operations.pulls_list.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                @frozen
                public enum directionPayload: RawRepresentable, Codable, Equatable, Hashable,
                    Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case asc
                    case desc
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "asc": self = .asc
                        case "desc": self = .desc
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .asc: return "asc"
                        case .desc: return "desc"
                        }
                    }
                    public static var allCases: [directionPayload] { [.asc, .desc] }
                }
                public var direction: Operations.pulls_list.Input.Query.directionPayload?
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state:
                ///   - head:
                ///   - base:
                ///   - sort:
                ///   - direction:
                ///   - per_page:
                ///   - page:
                public init(
                    state: Operations.pulls_list.Input.Query.statePayload? = nil,
                    head: Swift.String? = nil,
                    base: Swift.String? = nil,
                    sort: Operations.pulls_list.Input.Query.sortPayload? = nil,
                    direction: Operations.pulls_list.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.state = state
                    self.head = head
                    self.base = base
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_list.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.pulls_list.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.pulls_list.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.pulls_list.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.pulls_list.Input.Path,
                query: Operations.pulls_list.Input.Query = .init(),
                headers: Operations.pulls_list.Input.Headers = .init(),
                cookies: Operations.pulls_list.Input.Cookies = .init(),
                body: Operations.pulls_list.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_list.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.pull_request_simple])
                }
                /// Received HTTP response body
                public var body: Operations.pulls_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_list.Output.Ok.Headers,
                    body: Operations.pulls_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list.Output.Ok)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    public enum pulls_list_review_comments {
        public static let id: String = "pulls/list-review-comments"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                public var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - pull_number:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_list_review_comments.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen
                public enum sort: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                    _AutoLosslessStringConvertible, CaseIterable
                {
                    case created
                    case updated
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "created": self = .created
                        case "updated": self = .updated
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .created: return "created"
                        case .updated: return "updated"
                        }
                    }
                    public static var allCases: [sort] { [.created, .updated] }
                }
                public var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                @frozen
                public enum directionPayload: RawRepresentable, Codable, Equatable, Hashable,
                    Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case asc
                    case desc
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "asc": self = .asc
                        case "desc": self = .desc
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .asc: return "asc"
                        case .desc: return "desc"
                        }
                    }
                    public static var allCases: [directionPayload] { [.asc, .desc] }
                }
                public var direction:
                    Operations.pulls_list_review_comments.Input.Query.directionPayload?
                public var since: Components.Parameters.since?
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort:
                ///   - direction:
                ///   - since:
                ///   - per_page:
                ///   - page:
                public init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.pulls_list_review_comments.Input.Query.directionPayload? =
                        nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_list_review_comments.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.pulls_list_review_comments.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.pulls_list_review_comments.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.pulls_list_review_comments.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.pulls_list_review_comments.Input.Path,
                query: Operations.pulls_list_review_comments.Input.Query = .init(),
                headers: Operations.pulls_list_review_comments.Input.Headers = .init(),
                cookies: Operations.pulls_list_review_comments.Input.Cookies = .init(),
                body: Operations.pulls_list_review_comments.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_list_review_comments.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.pull_request_review_comment])
                }
                /// Received HTTP response body
                public var body: Operations.pulls_list_review_comments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_list_review_comments.Output.Ok.Headers,
                    body: Operations.pulls_list_review_comments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list_review_comments.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    public enum pulls_list_files {
        public static let id: String = "pulls/list-files"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                public var pull_number: Components.Parameters.pull_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - pull_number:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_list_files.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page:
                ///   - page:
                public init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_list_files.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.pulls_list_files.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.pulls_list_files.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.pulls_list_files.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.pulls_list_files.Input.Path,
                query: Operations.pulls_list_files.Input.Query = .init(),
                headers: Operations.pulls_list_files.Input.Headers = .init(),
                cookies: Operations.pulls_list_files.Input.Cookies = .init(),
                body: Operations.pulls_list_files.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_list_files.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.diff_entry])
                }
                /// Received HTTP response body
                public var body: Operations.pulls_list_files.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_list_files.Output.Ok.Headers,
                    body: Operations.pulls_list_files.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_list_files.Output.Ok)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    public enum repos_list_releases {
        public static let id: String = "repos/list-releases"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_list_releases.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var per_page: Components.Parameters.per_page?
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page:
                ///   - page:
                public init(
                    per_page: Components.Parameters.per_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_list_releases.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.repos_list_releases.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.repos_list_releases.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.repos_list_releases.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_list_releases.Input.Path,
                query: Operations.repos_list_releases.Input.Query = .init(),
                headers: Operations.repos_list_releases.Input.Headers = .init(),
                cookies: Operations.repos_list_releases.Input.Cookies = .init(),
                body: Operations.repos_list_releases.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) { self.Link = Link }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_list_releases.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.release])
                }
                /// Received HTTP response body
                public var body: Operations.repos_list_releases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_list_releases.Output.Ok.Headers,
                    body: Operations.repos_list_releases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_list_releases.Output.Ok)
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    public enum repos_create_release {
        public static let id: String = "repos/create-release"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_create_release.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.repos_create_release.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.repos_create_release.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.repos_create_release.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/tag_name`.
                    public var tag_name: Swift.String
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/target_commitish`.
                    public var target_commitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/name`.
                    public var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/body`.
                    public var body: Swift.String?
                    /// `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/draft`.
                    public var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/prerelease`.
                    public var prerelease: Swift.Bool?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/discussion_category_name`.
                    public var discussion_category_name: Swift.String?
                    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/generate_release_notes`.
                    public var generate_release_notes: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/make_latest`.
                    @frozen
                    public enum make_latestPayload: RawRepresentable, Codable, Equatable, Hashable,
                        Sendable, _AutoLosslessStringConvertible, CaseIterable
                    {
                        case _true
                        case _false
                        case legacy
                        /// Parsed a raw value that was not defined in the OpenAPI document.
                        case undocumented(String)
                        public init?(rawValue: String) {
                            switch rawValue {
                            case "true": self = ._true
                            case "false": self = ._false
                            case "legacy": self = .legacy
                            default: self = .undocumented(rawValue)
                            }
                        }
                        public var rawValue: String {
                            switch self {
                            case let .undocumented(string): return string
                            case ._true: return "true"
                            case ._false: return "false"
                            case .legacy: return "legacy"
                            }
                        }
                        public static var allCases: [make_latestPayload] {
                            [._true, ._false, .legacy]
                        }
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/json/make_latest`.
                    public var make_latest:
                        Operations.repos_create_release.Input.Body.jsonPayload.make_latestPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag_name: The name of the tag.
                    ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///   - prerelease: `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///   - discussion_category_name: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///   - generate_release_notes: Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///   - make_latest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    public init(
                        tag_name: Swift.String,
                        target_commitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        discussion_category_name: Swift.String? = nil,
                        generate_release_notes: Swift.Bool? = nil,
                        make_latest: Operations.repos_create_release.Input.Body.jsonPayload
                            .make_latestPayload? = nil
                    ) {
                        self.tag_name = tag_name
                        self.target_commitish = target_commitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.discussion_category_name = discussion_category_name
                        self.generate_release_notes = generate_release_notes
                        self.make_latest = make_latest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tag_name
                        case target_commitish
                        case name
                        case body
                        case draft
                        case prerelease
                        case discussion_category_name
                        case generate_release_notes
                        case make_latest
                    }
                }
                case json(Operations.repos_create_release.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_create_release.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_create_release.Input.Path,
                query: Operations.repos_create_release.Input.Query = .init(),
                headers: Operations.repos_create_release.Input.Headers = .init(),
                cookies: Operations.repos_create_release.Input.Cookies = .init(),
                body: Operations.repos_create_release.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) { self.Location = Location }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_create_release.Output.Created.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.release)
                }
                /// Received HTTP response body
                public var body: Operations.repos_create_release.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_create_release.Output.Created.Headers,
                    body: Operations.repos_create_release.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_create_release.Output.Created)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_create_release.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.basic_error)
                }
                /// Received HTTP response body
                public var body: Operations.repos_create_release.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_create_release.Output.NotFound.Headers = .init(),
                    body: Operations.repos_create_release.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_create_release.Output.NotFound)
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableEntity`.
            case unprocessableEntity(Components.Responses.validation_failed)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    public enum repos_get_latest_release {
        public static let id: String = "repos/get-latest-release"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var owner: Components.Parameters.owner
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                public init(owner: Components.Parameters.owner, repo: Components.Parameters.repo) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_get_latest_release.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.repos_get_latest_release.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.repos_get_latest_release.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.repos_get_latest_release.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.repos_get_latest_release.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.repos_get_latest_release.Input.Path,
                query: Operations.repos_get_latest_release.Input.Query = .init(),
                headers: Operations.repos_get_latest_release.Input.Headers = .init(),
                cookies: Operations.repos_get_latest_release.Input.Cookies = .init(),
                body: Operations.repos_get_latest_release.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_get_latest_release.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.release)
                }
                /// Received HTTP response body
                public var body: Operations.repos_get_latest_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_get_latest_release.Output.Ok.Headers = .init(),
                    body: Operations.repos_get_latest_release.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_get_latest_release.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
