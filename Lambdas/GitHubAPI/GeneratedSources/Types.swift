// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    func appsCreateInstallationAccessToken(_ input: Operations.AppsCreateInstallationAccessToken.Input) async throws -> Operations.AppsCreateInstallationAccessToken.Output
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    func orgsGet(_ input: Operations.OrgsGet.Input) async throws -> Operations.OrgsGet.Output
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    func projectsGetCard(_ input: Operations.ProjectsGetCard.Input) async throws -> Operations.ProjectsGetCard.Output
    /// Update an existing project card
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    func projectsUpdateCard(_ input: Operations.ProjectsUpdateCard.Input) async throws -> Operations.ProjectsUpdateCard.Output
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    func projectsDeleteCard(_ input: Operations.ProjectsDeleteCard.Input) async throws -> Operations.ProjectsDeleteCard.Output
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    func projectsMoveCard(_ input: Operations.ProjectsMoveCard.Input) async throws -> Operations.ProjectsMoveCard.Output
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    func projectsGetColumn(_ input: Operations.ProjectsGetColumn.Input) async throws -> Operations.ProjectsGetColumn.Output
    /// Update an existing project column
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    func projectsUpdateColumn(_ input: Operations.ProjectsUpdateColumn.Input) async throws -> Operations.ProjectsUpdateColumn.Output
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    func projectsDeleteColumn(_ input: Operations.ProjectsDeleteColumn.Input) async throws -> Operations.ProjectsDeleteColumn.Output
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    func projectsListCards(_ input: Operations.ProjectsListCards.Input) async throws -> Operations.ProjectsListCards.Output
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    func projectsCreateCard(_ input: Operations.ProjectsCreateCard.Input) async throws -> Operations.ProjectsCreateCard.Output
    /// Move a project column
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    func projectsMoveColumn(_ input: Operations.ProjectsMoveColumn.Input) async throws -> Operations.ProjectsMoveColumn.Output
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    func projectsGet(_ input: Operations.ProjectsGet.Input) async throws -> Operations.ProjectsGet.Output
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    func projectsUpdate(_ input: Operations.ProjectsUpdate.Input) async throws -> Operations.ProjectsUpdate.Output
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    func projectsDelete(_ input: Operations.ProjectsDelete.Input) async throws -> Operations.ProjectsDelete.Output
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    func projectsListCollaborators(_ input: Operations.ProjectsListCollaborators.Input) async throws -> Operations.ProjectsListCollaborators.Output
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    func projectsAddCollaborator(_ input: Operations.ProjectsAddCollaborator.Input) async throws -> Operations.ProjectsAddCollaborator.Output
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    func projectsRemoveCollaborator(_ input: Operations.ProjectsRemoveCollaborator.Input) async throws -> Operations.ProjectsRemoveCollaborator.Output
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    func projectsGetPermissionForUser(_ input: Operations.ProjectsGetPermissionForUser.Input) async throws -> Operations.ProjectsGetPermissionForUser.Output
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    func projectsListColumns(_ input: Operations.ProjectsListColumns.Input) async throws -> Operations.ProjectsListColumns.Output
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    func projectsCreateColumn(_ input: Operations.ProjectsCreateColumn.Input) async throws -> Operations.ProjectsCreateColumn.Output
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    func rateLimitGet(_ input: Operations.RateLimitGet.Input) async throws -> Operations.RateLimitGet.Output
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    func reposGet(_ input: Operations.ReposGet.Input) async throws -> Operations.ReposGet.Output
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    func reposListCommits(_ input: Operations.ReposListCommits.Input) async throws -> Operations.ReposListCommits.Output
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    func reposListPullRequestsAssociatedWithCommit(_ input: Operations.ReposListPullRequestsAssociatedWithCommit.Input) async throws -> Operations.ReposListPullRequestsAssociatedWithCommit.Output
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    func reposCompareCommits(_ input: Operations.ReposCompareCommits.Input) async throws -> Operations.ReposCompareCommits.Output
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    func reposListContributors(_ input: Operations.ReposListContributors.Input) async throws -> Operations.ReposListContributors.Output
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    func issuesListForRepo(_ input: Operations.IssuesListForRepo.Input) async throws -> Operations.IssuesListForRepo.Output
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    func issuesCreate(_ input: Operations.IssuesCreate.Input) async throws -> Operations.IssuesCreate.Output
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    func issuesGet(_ input: Operations.IssuesGet.Input) async throws -> Operations.IssuesGet.Output
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    func issuesUpdate(_ input: Operations.IssuesUpdate.Input) async throws -> Operations.IssuesUpdate.Output
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    func issuesCreateComment(_ input: Operations.IssuesCreateComment.Input) async throws -> Operations.IssuesCreateComment.Output
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    func issuesListEventsForTimeline(_ input: Operations.IssuesListEventsForTimeline.Input) async throws -> Operations.IssuesListEventsForTimeline.Output
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    func pullsList(_ input: Operations.PullsList.Input) async throws -> Operations.PullsList.Output
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    func pullsGet(_ input: Operations.PullsGet.Input) async throws -> Operations.PullsGet.Output
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    func pullsUpdate(_ input: Operations.PullsUpdate.Input) async throws -> Operations.PullsUpdate.Output
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    func pullsListReviewComments(_ input: Operations.PullsListReviewComments.Input) async throws -> Operations.PullsListReviewComments.Output
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    func pullsListFiles(_ input: Operations.PullsListFiles.Input) async throws -> Operations.PullsListFiles.Output
    /// List reviews for a pull request
    ///
    /// The list of reviews returns in chronological order.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    func pullsListReviews(_ input: Operations.PullsListReviews.Input) async throws -> Operations.PullsListReviews.Output
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    func reposListReleases(_ input: Operations.ReposListReleases.Input) async throws -> Operations.ReposListReleases.Output
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    func reposCreateRelease(_ input: Operations.ReposCreateRelease.Input) async throws -> Operations.ReposCreateRelease.Output
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func reposGetLatestRelease(_ input: Operations.ReposGetLatestRelease.Input) async throws -> Operations.ReposGetLatestRelease.Output
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    func reposListTags(_ input: Operations.ReposListTags.Input) async throws -> Operations.ReposListTags.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package func appsCreateInstallationAccessToken(
        path: Operations.AppsCreateInstallationAccessToken.Input.Path,
        headers: Operations.AppsCreateInstallationAccessToken.Input.Headers = .init(),
        body: Operations.AppsCreateInstallationAccessToken.Input.Body? = nil
    ) async throws -> Operations.AppsCreateInstallationAccessToken.Output {
        try await appsCreateInstallationAccessToken(Operations.AppsCreateInstallationAccessToken.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    package func orgsGet(
        path: Operations.OrgsGet.Input.Path,
        headers: Operations.OrgsGet.Input.Headers = .init()
    ) async throws -> Operations.OrgsGet.Output {
        try await orgsGet(Operations.OrgsGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    package func projectsGetCard(
        path: Operations.ProjectsGetCard.Input.Path,
        headers: Operations.ProjectsGetCard.Input.Headers = .init()
    ) async throws -> Operations.ProjectsGetCard.Output {
        try await projectsGetCard(Operations.ProjectsGetCard.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an existing project card
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    package func projectsUpdateCard(
        path: Operations.ProjectsUpdateCard.Input.Path,
        headers: Operations.ProjectsUpdateCard.Input.Headers = .init(),
        body: Operations.ProjectsUpdateCard.Input.Body? = nil
    ) async throws -> Operations.ProjectsUpdateCard.Output {
        try await projectsUpdateCard(Operations.ProjectsUpdateCard.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package func projectsDeleteCard(
        path: Operations.ProjectsDeleteCard.Input.Path,
        headers: Operations.ProjectsDeleteCard.Input.Headers = .init()
    ) async throws -> Operations.ProjectsDeleteCard.Output {
        try await projectsDeleteCard(Operations.ProjectsDeleteCard.Input(
            path: path,
            headers: headers
        ))
    }
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package func projectsMoveCard(
        path: Operations.ProjectsMoveCard.Input.Path,
        headers: Operations.ProjectsMoveCard.Input.Headers = .init(),
        body: Operations.ProjectsMoveCard.Input.Body
    ) async throws -> Operations.ProjectsMoveCard.Output {
        try await projectsMoveCard(Operations.ProjectsMoveCard.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    package func projectsGetColumn(
        path: Operations.ProjectsGetColumn.Input.Path,
        headers: Operations.ProjectsGetColumn.Input.Headers = .init()
    ) async throws -> Operations.ProjectsGetColumn.Output {
        try await projectsGetColumn(Operations.ProjectsGetColumn.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an existing project column
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    package func projectsUpdateColumn(
        path: Operations.ProjectsUpdateColumn.Input.Path,
        headers: Operations.ProjectsUpdateColumn.Input.Headers = .init(),
        body: Operations.ProjectsUpdateColumn.Input.Body
    ) async throws -> Operations.ProjectsUpdateColumn.Output {
        try await projectsUpdateColumn(Operations.ProjectsUpdateColumn.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    package func projectsDeleteColumn(
        path: Operations.ProjectsDeleteColumn.Input.Path,
        headers: Operations.ProjectsDeleteColumn.Input.Headers = .init()
    ) async throws -> Operations.ProjectsDeleteColumn.Output {
        try await projectsDeleteColumn(Operations.ProjectsDeleteColumn.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package func projectsListCards(
        path: Operations.ProjectsListCards.Input.Path,
        query: Operations.ProjectsListCards.Input.Query = .init(),
        headers: Operations.ProjectsListCards.Input.Headers = .init()
    ) async throws -> Operations.ProjectsListCards.Output {
        try await projectsListCards(Operations.ProjectsListCards.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package func projectsCreateCard(
        path: Operations.ProjectsCreateCard.Input.Path,
        headers: Operations.ProjectsCreateCard.Input.Headers = .init(),
        body: Operations.ProjectsCreateCard.Input.Body
    ) async throws -> Operations.ProjectsCreateCard.Output {
        try await projectsCreateCard(Operations.ProjectsCreateCard.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Move a project column
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    package func projectsMoveColumn(
        path: Operations.ProjectsMoveColumn.Input.Path,
        headers: Operations.ProjectsMoveColumn.Input.Headers = .init(),
        body: Operations.ProjectsMoveColumn.Input.Body
    ) async throws -> Operations.ProjectsMoveColumn.Output {
        try await projectsMoveColumn(Operations.ProjectsMoveColumn.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    package func projectsGet(
        path: Operations.ProjectsGet.Input.Path,
        headers: Operations.ProjectsGet.Input.Headers = .init()
    ) async throws -> Operations.ProjectsGet.Output {
        try await projectsGet(Operations.ProjectsGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    package func projectsUpdate(
        path: Operations.ProjectsUpdate.Input.Path,
        headers: Operations.ProjectsUpdate.Input.Headers = .init(),
        body: Operations.ProjectsUpdate.Input.Body? = nil
    ) async throws -> Operations.ProjectsUpdate.Output {
        try await projectsUpdate(Operations.ProjectsUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    package func projectsDelete(
        path: Operations.ProjectsDelete.Input.Path,
        headers: Operations.ProjectsDelete.Input.Headers = .init()
    ) async throws -> Operations.ProjectsDelete.Output {
        try await projectsDelete(Operations.ProjectsDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    package func projectsListCollaborators(
        path: Operations.ProjectsListCollaborators.Input.Path,
        query: Operations.ProjectsListCollaborators.Input.Query = .init(),
        headers: Operations.ProjectsListCollaborators.Input.Headers = .init()
    ) async throws -> Operations.ProjectsListCollaborators.Output {
        try await projectsListCollaborators(Operations.ProjectsListCollaborators.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    package func projectsAddCollaborator(
        path: Operations.ProjectsAddCollaborator.Input.Path,
        headers: Operations.ProjectsAddCollaborator.Input.Headers = .init(),
        body: Operations.ProjectsAddCollaborator.Input.Body? = nil
    ) async throws -> Operations.ProjectsAddCollaborator.Output {
        try await projectsAddCollaborator(Operations.ProjectsAddCollaborator.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    package func projectsRemoveCollaborator(
        path: Operations.ProjectsRemoveCollaborator.Input.Path,
        headers: Operations.ProjectsRemoveCollaborator.Input.Headers = .init()
    ) async throws -> Operations.ProjectsRemoveCollaborator.Output {
        try await projectsRemoveCollaborator(Operations.ProjectsRemoveCollaborator.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    package func projectsGetPermissionForUser(
        path: Operations.ProjectsGetPermissionForUser.Input.Path,
        headers: Operations.ProjectsGetPermissionForUser.Input.Headers = .init()
    ) async throws -> Operations.ProjectsGetPermissionForUser.Output {
        try await projectsGetPermissionForUser(Operations.ProjectsGetPermissionForUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    package func projectsListColumns(
        path: Operations.ProjectsListColumns.Input.Path,
        query: Operations.ProjectsListColumns.Input.Query = .init(),
        headers: Operations.ProjectsListColumns.Input.Headers = .init()
    ) async throws -> Operations.ProjectsListColumns.Output {
        try await projectsListColumns(Operations.ProjectsListColumns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    package func projectsCreateColumn(
        path: Operations.ProjectsCreateColumn.Input.Path,
        headers: Operations.ProjectsCreateColumn.Input.Headers = .init(),
        body: Operations.ProjectsCreateColumn.Input.Body
    ) async throws -> Operations.ProjectsCreateColumn.Output {
        try await projectsCreateColumn(Operations.ProjectsCreateColumn.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    package func rateLimitGet(headers: Operations.RateLimitGet.Input.Headers = .init()) async throws -> Operations.RateLimitGet.Output {
        try await rateLimitGet(Operations.RateLimitGet.Input(headers: headers))
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    package func reposGet(
        path: Operations.ReposGet.Input.Path,
        headers: Operations.ReposGet.Input.Headers = .init()
    ) async throws -> Operations.ReposGet.Output {
        try await reposGet(Operations.ReposGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package func reposListCommits(
        path: Operations.ReposListCommits.Input.Path,
        query: Operations.ReposListCommits.Input.Query = .init(),
        headers: Operations.ReposListCommits.Input.Headers = .init()
    ) async throws -> Operations.ReposListCommits.Output {
        try await reposListCommits(Operations.ReposListCommits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package func reposListPullRequestsAssociatedWithCommit(
        path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path,
        query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query = .init(),
        headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers = .init()
    ) async throws -> Operations.ReposListPullRequestsAssociatedWithCommit.Output {
        try await reposListPullRequestsAssociatedWithCommit(Operations.ReposListPullRequestsAssociatedWithCommit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package func reposCompareCommits(
        path: Operations.ReposCompareCommits.Input.Path,
        query: Operations.ReposCompareCommits.Input.Query = .init(),
        headers: Operations.ReposCompareCommits.Input.Headers = .init()
    ) async throws -> Operations.ReposCompareCommits.Output {
        try await reposCompareCommits(Operations.ReposCompareCommits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package func reposListContributors(
        path: Operations.ReposListContributors.Input.Path,
        query: Operations.ReposListContributors.Input.Query = .init(),
        headers: Operations.ReposListContributors.Input.Headers = .init()
    ) async throws -> Operations.ReposListContributors.Output {
        try await reposListContributors(Operations.ReposListContributors.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    package func issuesListForRepo(
        path: Operations.IssuesListForRepo.Input.Path,
        query: Operations.IssuesListForRepo.Input.Query = .init(),
        headers: Operations.IssuesListForRepo.Input.Headers = .init()
    ) async throws -> Operations.IssuesListForRepo.Output {
        try await issuesListForRepo(Operations.IssuesListForRepo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package func issuesCreate(
        path: Operations.IssuesCreate.Input.Path,
        headers: Operations.IssuesCreate.Input.Headers = .init(),
        body: Operations.IssuesCreate.Input.Body
    ) async throws -> Operations.IssuesCreate.Output {
        try await issuesCreate(Operations.IssuesCreate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package func issuesGet(
        path: Operations.IssuesGet.Input.Path,
        headers: Operations.IssuesGet.Input.Headers = .init()
    ) async throws -> Operations.IssuesGet.Output {
        try await issuesGet(Operations.IssuesGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    package func issuesUpdate(
        path: Operations.IssuesUpdate.Input.Path,
        headers: Operations.IssuesUpdate.Input.Headers = .init(),
        body: Operations.IssuesUpdate.Input.Body? = nil
    ) async throws -> Operations.IssuesUpdate.Output {
        try await issuesUpdate(Operations.IssuesUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    package func issuesCreateComment(
        path: Operations.IssuesCreateComment.Input.Path,
        headers: Operations.IssuesCreateComment.Input.Headers = .init(),
        body: Operations.IssuesCreateComment.Input.Body
    ) async throws -> Operations.IssuesCreateComment.Output {
        try await issuesCreateComment(Operations.IssuesCreateComment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    package func issuesListEventsForTimeline(
        path: Operations.IssuesListEventsForTimeline.Input.Path,
        query: Operations.IssuesListEventsForTimeline.Input.Query = .init(),
        headers: Operations.IssuesListEventsForTimeline.Input.Headers = .init()
    ) async throws -> Operations.IssuesListEventsForTimeline.Output {
        try await issuesListEventsForTimeline(Operations.IssuesListEventsForTimeline.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    package func pullsList(
        path: Operations.PullsList.Input.Path,
        query: Operations.PullsList.Input.Query = .init(),
        headers: Operations.PullsList.Input.Headers = .init()
    ) async throws -> Operations.PullsList.Output {
        try await pullsList(Operations.PullsList.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package func pullsGet(
        path: Operations.PullsGet.Input.Path,
        headers: Operations.PullsGet.Input.Headers = .init()
    ) async throws -> Operations.PullsGet.Output {
        try await pullsGet(Operations.PullsGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package func pullsUpdate(
        path: Operations.PullsUpdate.Input.Path,
        headers: Operations.PullsUpdate.Input.Headers = .init(),
        body: Operations.PullsUpdate.Input.Body? = nil
    ) async throws -> Operations.PullsUpdate.Output {
        try await pullsUpdate(Operations.PullsUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    package func pullsListReviewComments(
        path: Operations.PullsListReviewComments.Input.Path,
        query: Operations.PullsListReviewComments.Input.Query = .init(),
        headers: Operations.PullsListReviewComments.Input.Headers = .init()
    ) async throws -> Operations.PullsListReviewComments.Output {
        try await pullsListReviewComments(Operations.PullsListReviewComments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package func pullsListFiles(
        path: Operations.PullsListFiles.Input.Path,
        query: Operations.PullsListFiles.Input.Query = .init(),
        headers: Operations.PullsListFiles.Input.Headers = .init()
    ) async throws -> Operations.PullsListFiles.Output {
        try await pullsListFiles(Operations.PullsListFiles.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List reviews for a pull request
    ///
    /// The list of reviews returns in chronological order.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    package func pullsListReviews(
        path: Operations.PullsListReviews.Input.Path,
        query: Operations.PullsListReviews.Input.Query = .init(),
        headers: Operations.PullsListReviews.Input.Headers = .init()
    ) async throws -> Operations.PullsListReviews.Output {
        try await pullsListReviews(Operations.PullsListReviews.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package func reposListReleases(
        path: Operations.ReposListReleases.Input.Path,
        query: Operations.ReposListReleases.Input.Query = .init(),
        headers: Operations.ReposListReleases.Input.Headers = .init()
    ) async throws -> Operations.ReposListReleases.Output {
        try await reposListReleases(Operations.ReposListReleases.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package func reposCreateRelease(
        path: Operations.ReposCreateRelease.Input.Path,
        headers: Operations.ReposCreateRelease.Input.Headers = .init(),
        body: Operations.ReposCreateRelease.Input.Body
    ) async throws -> Operations.ReposCreateRelease.Output {
        try await reposCreateRelease(Operations.ReposCreateRelease.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package func reposGetLatestRelease(
        path: Operations.ReposGetLatestRelease.Input.Path,
        headers: Operations.ReposGetLatestRelease.Input.Headers = .init()
    ) async throws -> Operations.ReposGetLatestRelease.Output {
        try await reposGetLatestRelease(Operations.ReposGetLatestRelease.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package func reposListTags(
        path: Operations.ReposListTags.Input.Path,
        query: Operations.ReposListTags.Input.Query = .init(),
        headers: Operations.ReposListTags.Input.Headers = .init()
    ) async throws -> Operations.ReposListTags.Output {
        try await reposListTags(Operations.ReposListTags.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package enum Server1 {
        package static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// - Remark: Generated from `#/components/schemas/simple-user-nameonly`.
        package typealias SimpleUserNameonly = Swift.String
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        package struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            package var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/integration`.
        package struct Integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/id`.
            package var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/slug`.
            package var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/owner`.
            package var owner: Components.Schemas.NullableSimpleUser?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/external_url`.
            package var externalUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/integration/updated_at`.
            package var updatedAt: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration/permissions/issues`.
                package var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/checks`.
                package var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/metadata`.
                package var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/contents`.
                package var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/deployments`.
                package var deployments: Swift.String?
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                package init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                package enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    self.checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    self.metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    self.contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    self.deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                package func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        self.issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        self.checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        self.metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        self.contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        self.deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            package var permissions: Components.Schemas.Integration.PermissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/events`.
            package var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/installations_count`.
            package var installationsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/integration/client_id`.
            package var clientId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/client_secret`.
            package var clientSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/webhook_secret`.
            package var webhookSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/pem`.
            package var pem: Swift.String?
            /// Creates a new `Integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - nodeId:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - externalUrl:
            ///   - htmlUrl:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installationsCount: The number of installations associated with the GitHub app
            ///   - clientId:
            ///   - clientSecret:
            ///   - webhookSecret:
            ///   - pem:
            package init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                nodeId: Swift.String,
                owner: Components.Schemas.NullableSimpleUser? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                externalUrl: Swift.String,
                htmlUrl: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                permissions: Components.Schemas.Integration.PermissionsPayload,
                events: [Swift.String],
                installationsCount: Swift.Int? = nil,
                clientId: Swift.String? = nil,
                clientSecret: Swift.String? = nil,
                webhookSecret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.nodeId = nodeId
                self.owner = owner
                self.name = name
                self.description = description
                self.externalUrl = externalUrl
                self.htmlUrl = htmlUrl
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.permissions = permissions
                self.events = events
                self.installationsCount = installationsCount
                self.clientId = clientId
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case slug
                case nodeId = "node_id"
                case owner
                case name
                case description
                case externalUrl = "external_url"
                case htmlUrl = "html_url"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case permissions
                case events
                case installationsCount = "installations_count"
                case clientId = "client_id"
                case clientSecret = "client_secret"
                case webhookSecret = "webhook_secret"
                case pem
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        package struct BasicError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            package var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            package var documentationUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            package var status: Swift.String?
            /// Creates a new `BasicError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - url:
            ///   - status:
            package init(
                message: Swift.String? = nil,
                documentationUrl: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.url = url
                self.status = status
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        package struct ValidationErrorSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            package var documentationUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            package var errors: [Swift.String]?
            /// Creates a new `ValidationErrorSimple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - errors:
            package init(
                message: Swift.String,
                documentationUrl: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case errors
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        package struct ValidationError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            package var documentationUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload`.
            package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/resource`.
                package var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/field`.
                package var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/message`.
                package var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/code`.
                package var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/index`.
                package var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value`.
                @frozen package enum ValuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value`.
                package var value: Components.Schemas.ValidationError.ErrorsPayloadPayload.ValuePayload?
                /// Creates a new `ErrorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                package init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.ValidationError.ErrorsPayloadPayload.ValuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                package enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package typealias ErrorsPayload = [Components.Schemas.ValidationError.ErrorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package var errors: Components.Schemas.ValidationError.ErrorsPayload?
            /// Creates a new `ValidationError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - errors:
            package init(
                message: Swift.String,
                documentationUrl: Swift.String,
                errors: Components.Schemas.ValidationError.ErrorsPayload? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        package struct HookDelivery: Codable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            package var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            package var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            package var deliveredAt: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            package var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            package var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            package var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            package var statusCode: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            package var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            package var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            package var installationId: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            package var repositoryId: Swift.Int?
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            package struct RequestPayload: Codable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                package struct HeadersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `HeadersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                package var headers: Components.Schemas.HookDelivery.RequestPayload.HeadersPayload?
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                package struct PayloadPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `PayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                package var payload: Components.Schemas.HookDelivery.RequestPayload.PayloadPayload?
                /// Creates a new `RequestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                package init(
                    headers: Components.Schemas.HookDelivery.RequestPayload.HeadersPayload? = nil,
                    payload: Components.Schemas.HookDelivery.RequestPayload.PayloadPayload? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            package var request: Components.Schemas.HookDelivery.RequestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            package struct ResponsePayload: Codable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                package struct HeadersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `HeadersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                package var headers: Components.Schemas.HookDelivery.ResponsePayload.HeadersPayload?
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                package var payload: Swift.String?
                /// Creates a new `ResponsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                package init(
                    headers: Components.Schemas.HookDelivery.ResponsePayload.HeadersPayload? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            package var response: Components.Schemas.HookDelivery.ResponsePayload
            /// Creates a new `HookDelivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - deliveredAt: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - statusCode: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installationId: The id of the GitHub App installation associated with this event.
            ///   - repositoryId: The id of the repository associated with this event.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            package init(
                id: Swift.Int,
                guid: Swift.String,
                deliveredAt: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                statusCode: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installationId: Swift.Int? = nil,
                repositoryId: Swift.Int? = nil,
                url: Swift.String? = nil,
                request: Components.Schemas.HookDelivery.RequestPayload,
                response: Components.Schemas.HookDelivery.ResponsePayload
            ) {
                self.id = id
                self.guid = guid
                self.deliveredAt = deliveredAt
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.statusCode = statusCode
                self.event = event
                self.action = action
                self.installationId = installationId
                self.repositoryId = repositoryId
                self.url = url
                self.request = request
                self.response = response
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case guid
                case deliveredAt = "delivered_at"
                case redelivery
                case duration
                case status
                case statusCode = "status_code"
                case event
                case action
                case installationId = "installation_id"
                case repositoryId = "repository_id"
                case url
                case request
                case response
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        package struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            package var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        package struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            package var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            package var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            package var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            package var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            package var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            package var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            package var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            package var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            package init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            package enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// Request to install an integration on a target
        ///
        /// - Remark: Generated from `#/components/schemas/integration-installation-request`.
        package struct IntegrationInstallationRequest: Codable, Hashable, Sendable {
            /// Unique identifier of the request installation.
            ///
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            package struct AccountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value1`.
                package var value1: Components.Schemas.SimpleUser?
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value2`.
                package var value2: Components.Schemas.Enterprise?
                /// Creates a new `AccountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                package init(
                    value1: Components.Schemas.SimpleUser? = nil,
                    value2: Components.Schemas.Enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            package var account: Components.Schemas.IntegrationInstallationRequest.AccountPayload
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/requester`.
            package var requester: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/created_at`.
            package var createdAt: Foundation.Date
            /// Creates a new `IntegrationInstallationRequest`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the request installation.
            ///   - nodeId:
            ///   - account:
            ///   - requester:
            ///   - createdAt:
            package init(
                id: Swift.Int,
                nodeId: Swift.String? = nil,
                account: Components.Schemas.IntegrationInstallationRequest.AccountPayload,
                requester: Components.Schemas.SimpleUser,
                createdAt: Foundation.Date
            ) {
                self.id = id
                self.nodeId = nodeId
                self.account = account
                self.requester = requester
                self.createdAt = createdAt
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case account
                case requester
                case createdAt = "created_at"
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        package struct AppPermissions: Codable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen package enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            package var actions: Components.Schemas.AppPermissions.ActionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen package enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            package var administration: Components.Schemas.AppPermissions.AdministrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen package enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            package var checks: Components.Schemas.AppPermissions.ChecksPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen package enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            package var contents: Components.Schemas.AppPermissions.ContentsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen package enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            package var deployments: Components.Schemas.AppPermissions.DeploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen package enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            package var environments: Components.Schemas.AppPermissions.EnvironmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen package enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            package var issues: Components.Schemas.AppPermissions.IssuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen package enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            package var metadata: Components.Schemas.AppPermissions.MetadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen package enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            package var packages: Components.Schemas.AppPermissions.PackagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen package enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            package var pages: Components.Schemas.AppPermissions.PagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen package enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            package var pullRequests: Components.Schemas.AppPermissions.PullRequestsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen package enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            package var repositoryHooks: Components.Schemas.AppPermissions.RepositoryHooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen package enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            package var repositoryProjects: Components.Schemas.AppPermissions.RepositoryProjectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen package enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            package var secretScanningAlerts: Components.Schemas.AppPermissions.SecretScanningAlertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen package enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            package var secrets: Components.Schemas.AppPermissions.SecretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen package enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            package var securityEvents: Components.Schemas.AppPermissions.SecurityEventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen package enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            package var singleFile: Components.Schemas.AppPermissions.SingleFilePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen package enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            package var statuses: Components.Schemas.AppPermissions.StatusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen package enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            package var vulnerabilityAlerts: Components.Schemas.AppPermissions.VulnerabilityAlertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen package enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case write = "write"
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            package var workflows: Components.Schemas.AppPermissions.WorkflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen package enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            package var members: Components.Schemas.AppPermissions.MembersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen package enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            package var organizationAdministration: Components.Schemas.AppPermissions.OrganizationAdministrationPayload?
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen package enum OrganizationCustomRolesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            package var organizationCustomRoles: Components.Schemas.AppPermissions.OrganizationCustomRolesPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen package enum OrganizationAnnouncementBannersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            package var organizationAnnouncementBanners: Components.Schemas.AppPermissions.OrganizationAnnouncementBannersPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen package enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            package var organizationHooks: Components.Schemas.AppPermissions.OrganizationHooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen package enum OrganizationPersonalAccessTokensPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            package var organizationPersonalAccessTokens: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen package enum OrganizationPersonalAccessTokenRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            package var organizationPersonalAccessTokenRequests: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokenRequestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen package enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            package var organizationPlan: Components.Schemas.AppPermissions.OrganizationPlanPayload?
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen package enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            package var organizationProjects: Components.Schemas.AppPermissions.OrganizationProjectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen package enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            package var organizationPackages: Components.Schemas.AppPermissions.OrganizationPackagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen package enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            package var organizationSecrets: Components.Schemas.AppPermissions.OrganizationSecretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen package enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            package var organizationSelfHostedRunners: Components.Schemas.AppPermissions.OrganizationSelfHostedRunnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen package enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            package var organizationUserBlocking: Components.Schemas.AppPermissions.OrganizationUserBlockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen package enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            package var teamDiscussions: Components.Schemas.AppPermissions.TeamDiscussionsPayload?
            /// Creates a new `AppPermissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pullRequests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repositoryHooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repositoryProjects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secretScanningAlerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - securityEvents: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - singleFile: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerabilityAlerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organizationAdministration: The level of permission to grant the access token to manage access to an organization.
            ///   - organizationCustomRoles: The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
            ///   - organizationAnnouncementBanners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organizationHooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organizationPersonalAccessTokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organizationPersonalAccessTokenRequests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organizationPlan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organizationProjects: The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///   - organizationPackages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organizationSecrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organizationSelfHostedRunners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organizationUserBlocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - teamDiscussions: The level of permission to grant the access token to manage team discussions and related comments.
            package init(
                actions: Components.Schemas.AppPermissions.ActionsPayload? = nil,
                administration: Components.Schemas.AppPermissions.AdministrationPayload? = nil,
                checks: Components.Schemas.AppPermissions.ChecksPayload? = nil,
                contents: Components.Schemas.AppPermissions.ContentsPayload? = nil,
                deployments: Components.Schemas.AppPermissions.DeploymentsPayload? = nil,
                environments: Components.Schemas.AppPermissions.EnvironmentsPayload? = nil,
                issues: Components.Schemas.AppPermissions.IssuesPayload? = nil,
                metadata: Components.Schemas.AppPermissions.MetadataPayload? = nil,
                packages: Components.Schemas.AppPermissions.PackagesPayload? = nil,
                pages: Components.Schemas.AppPermissions.PagesPayload? = nil,
                pullRequests: Components.Schemas.AppPermissions.PullRequestsPayload? = nil,
                repositoryHooks: Components.Schemas.AppPermissions.RepositoryHooksPayload? = nil,
                repositoryProjects: Components.Schemas.AppPermissions.RepositoryProjectsPayload? = nil,
                secretScanningAlerts: Components.Schemas.AppPermissions.SecretScanningAlertsPayload? = nil,
                secrets: Components.Schemas.AppPermissions.SecretsPayload? = nil,
                securityEvents: Components.Schemas.AppPermissions.SecurityEventsPayload? = nil,
                singleFile: Components.Schemas.AppPermissions.SingleFilePayload? = nil,
                statuses: Components.Schemas.AppPermissions.StatusesPayload? = nil,
                vulnerabilityAlerts: Components.Schemas.AppPermissions.VulnerabilityAlertsPayload? = nil,
                workflows: Components.Schemas.AppPermissions.WorkflowsPayload? = nil,
                members: Components.Schemas.AppPermissions.MembersPayload? = nil,
                organizationAdministration: Components.Schemas.AppPermissions.OrganizationAdministrationPayload? = nil,
                organizationCustomRoles: Components.Schemas.AppPermissions.OrganizationCustomRolesPayload? = nil,
                organizationAnnouncementBanners: Components.Schemas.AppPermissions.OrganizationAnnouncementBannersPayload? = nil,
                organizationHooks: Components.Schemas.AppPermissions.OrganizationHooksPayload? = nil,
                organizationPersonalAccessTokens: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokensPayload? = nil,
                organizationPersonalAccessTokenRequests: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokenRequestsPayload? = nil,
                organizationPlan: Components.Schemas.AppPermissions.OrganizationPlanPayload? = nil,
                organizationProjects: Components.Schemas.AppPermissions.OrganizationProjectsPayload? = nil,
                organizationPackages: Components.Schemas.AppPermissions.OrganizationPackagesPayload? = nil,
                organizationSecrets: Components.Schemas.AppPermissions.OrganizationSecretsPayload? = nil,
                organizationSelfHostedRunners: Components.Schemas.AppPermissions.OrganizationSelfHostedRunnersPayload? = nil,
                organizationUserBlocking: Components.Schemas.AppPermissions.OrganizationUserBlockingPayload? = nil,
                teamDiscussions: Components.Schemas.AppPermissions.TeamDiscussionsPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.contents = contents
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pullRequests = pullRequests
                self.repositoryHooks = repositoryHooks
                self.repositoryProjects = repositoryProjects
                self.secretScanningAlerts = secretScanningAlerts
                self.secrets = secrets
                self.securityEvents = securityEvents
                self.singleFile = singleFile
                self.statuses = statuses
                self.vulnerabilityAlerts = vulnerabilityAlerts
                self.workflows = workflows
                self.members = members
                self.organizationAdministration = organizationAdministration
                self.organizationCustomRoles = organizationCustomRoles
                self.organizationAnnouncementBanners = organizationAnnouncementBanners
                self.organizationHooks = organizationHooks
                self.organizationPersonalAccessTokens = organizationPersonalAccessTokens
                self.organizationPersonalAccessTokenRequests = organizationPersonalAccessTokenRequests
                self.organizationPlan = organizationPlan
                self.organizationProjects = organizationProjects
                self.organizationPackages = organizationPackages
                self.organizationSecrets = organizationSecrets
                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                self.organizationUserBlocking = organizationUserBlocking
                self.teamDiscussions = teamDiscussions
            }
            package enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case contents
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pullRequests = "pull_requests"
                case repositoryHooks = "repository_hooks"
                case repositoryProjects = "repository_projects"
                case secretScanningAlerts = "secret_scanning_alerts"
                case secrets
                case securityEvents = "security_events"
                case singleFile = "single_file"
                case statuses
                case vulnerabilityAlerts = "vulnerability_alerts"
                case workflows
                case members
                case organizationAdministration = "organization_administration"
                case organizationCustomRoles = "organization_custom_roles"
                case organizationAnnouncementBanners = "organization_announcement_banners"
                case organizationHooks = "organization_hooks"
                case organizationPersonalAccessTokens = "organization_personal_access_tokens"
                case organizationPersonalAccessTokenRequests = "organization_personal_access_token_requests"
                case organizationPlan = "organization_plan"
                case organizationProjects = "organization_projects"
                case organizationPackages = "organization_packages"
                case organizationSecrets = "organization_secrets"
                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                case organizationUserBlocking = "organization_user_blocking"
                case teamDiscussions = "team_discussions"
            }
        }
        /// Installation
        ///
        /// - Remark: Generated from `#/components/schemas/installation`.
        package struct Installation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            package struct AccountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/installation/account/value1`.
                package var value1: Components.Schemas.SimpleUser?
                /// - Remark: Generated from `#/components/schemas/installation/account/value2`.
                package var value2: Components.Schemas.Enterprise?
                /// Creates a new `AccountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                package init(
                    value1: Components.Schemas.SimpleUser? = nil,
                    value2: Components.Schemas.Enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            package var account: Components.Schemas.Installation.AccountPayload?
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            @frozen package enum RepositorySelectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            package var repositorySelection: Components.Schemas.Installation.RepositorySelectionPayload
            /// - Remark: Generated from `#/components/schemas/installation/access_tokens_url`.
            package var accessTokensUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/app_id`.
            package var appId: Swift.Int
            /// The ID of the user or organization this token is being scoped to.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/target_id`.
            package var targetId: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/target_type`.
            package var targetType: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/permissions`.
            package var permissions: Components.Schemas.AppPermissions
            /// - Remark: Generated from `#/components/schemas/installation/events`.
            package var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/installation/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/single_file_name`.
            package var singleFileName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation/has_multiple_single_files`.
            package var hasMultipleSingleFiles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation/single_file_paths`.
            package var singleFilePaths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/installation/app_slug`.
            package var appSlug: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/suspended_by`.
            package var suspendedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/installation/suspended_at`.
            package var suspendedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/installation/contact_email`.
            package var contactEmail: Swift.String?
            /// Creates a new `Installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - account:
            ///   - repositorySelection: Describe whether all repositories have been selected or there's a selection involved
            ///   - accessTokensUrl:
            ///   - repositoriesUrl:
            ///   - htmlUrl:
            ///   - appId:
            ///   - targetId: The ID of the user or organization this token is being scoped to.
            ///   - targetType:
            ///   - permissions:
            ///   - events:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - singleFileName:
            ///   - hasMultipleSingleFiles:
            ///   - singleFilePaths:
            ///   - appSlug:
            ///   - suspendedBy:
            ///   - suspendedAt:
            ///   - contactEmail:
            package init(
                id: Swift.Int,
                account: Components.Schemas.Installation.AccountPayload? = nil,
                repositorySelection: Components.Schemas.Installation.RepositorySelectionPayload,
                accessTokensUrl: Swift.String,
                repositoriesUrl: Swift.String,
                htmlUrl: Swift.String,
                appId: Swift.Int,
                targetId: Swift.Int,
                targetType: Swift.String,
                permissions: Components.Schemas.AppPermissions,
                events: [Swift.String],
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                singleFileName: Swift.String? = nil,
                hasMultipleSingleFiles: Swift.Bool? = nil,
                singleFilePaths: [Swift.String]? = nil,
                appSlug: Swift.String,
                suspendedBy: Components.Schemas.NullableSimpleUser? = nil,
                suspendedAt: Foundation.Date? = nil,
                contactEmail: Swift.String? = nil
            ) {
                self.id = id
                self.account = account
                self.repositorySelection = repositorySelection
                self.accessTokensUrl = accessTokensUrl
                self.repositoriesUrl = repositoriesUrl
                self.htmlUrl = htmlUrl
                self.appId = appId
                self.targetId = targetId
                self.targetType = targetType
                self.permissions = permissions
                self.events = events
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.singleFileName = singleFileName
                self.hasMultipleSingleFiles = hasMultipleSingleFiles
                self.singleFilePaths = singleFilePaths
                self.appSlug = appSlug
                self.suspendedBy = suspendedBy
                self.suspendedAt = suspendedAt
                self.contactEmail = contactEmail
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case account
                case repositorySelection = "repository_selection"
                case accessTokensUrl = "access_tokens_url"
                case repositoriesUrl = "repositories_url"
                case htmlUrl = "html_url"
                case appId = "app_id"
                case targetId = "target_id"
                case targetType = "target_type"
                case permissions
                case events
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case singleFileName = "single_file_name"
                case hasMultipleSingleFiles = "has_multiple_single_files"
                case singleFilePaths = "single_file_paths"
                case appSlug = "app_slug"
                case suspendedBy = "suspended_by"
                case suspendedAt = "suspended_at"
                case contactEmail = "contact_email"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        package struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            package var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            package var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            package var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            package init(
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String? = nil,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        package struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            package var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            package var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            package var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            @frozen package enum OrganizationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/organization/case1`.
                case NullableSimpleUser(Components.Schemas.NullableSimpleUser?)
                /// - Remark: Generated from `#/components/schemas/repository/organization/case2`.
                case SimpleUserNameonly(Components.Schemas.SimpleUserNameonly)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .NullableSimpleUser(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .SimpleUserNameonly(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .NullableSimpleUser(value):
                        try value.encode(to: encoder)
                    case let .SimpleUserNameonly(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            package var organization: Components.Schemas.Repository.OrganizationPayload?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                package init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            package var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            package var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            package var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            package var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            package var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            package var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            package var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            package var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            package var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            package var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            package var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            package var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            package var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            package var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            package var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            package var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            package var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            package var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            package var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            package var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            package var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            package var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            package var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            package var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            package var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            package var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            package var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            package var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            package var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            package var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            package var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            package var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            package var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            package var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            package var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            package var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            package var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            package var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            package var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            package var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            package var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            package var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            package var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            package var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            package var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            package var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            package var hasDownloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            package var hasDiscussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            package var pushedAt: Components.Schemas.StringOrIntDate
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            package var createdAt: Components.Schemas.StringOrIntDate
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            package var updatedAt: Components.Schemas.StringOrIntDate
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            package var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            package struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                package var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                package var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                package var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                package struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    package var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    package var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    package var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    package var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    package var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    package var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    package var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    package var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    package var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    package var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    package var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    package var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    package var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    package var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    package var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    package var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    package var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    package init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    package enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                package var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                package var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                package var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                package var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                package var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                package var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                package var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                package var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                package var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                package var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                package var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                package var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                package var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                package var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                package var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                package var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                package var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                package var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                package var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                package var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                package var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                package var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                package var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                package var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                package var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                package var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                package var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                package var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                package var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                package var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                package var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                package var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                package var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                package var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                package var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                package var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                package var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                package var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                package var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                package var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                package var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                package var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                package var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                package var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                package var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                package var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                package var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                package var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                package var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                package var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                package var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                package var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                package var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                package var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                package var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                package var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                package var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                package var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                package var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                package var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                package var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                package var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                package var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                package var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                package var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                package var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                package var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                package struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    package var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    package var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    package var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    package var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    package var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    package init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    package enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                package var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                package var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                package var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                package var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                package var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                package var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                package var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                package var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                package var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                package var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                package var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                package var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                package var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                package var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                package var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                package init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            package var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            package var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            package var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            package var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            package var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            package var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            package var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            package var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            package var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            package var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            package var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            package var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            package var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            package var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            package var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            package var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            package var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            package var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            package var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            package var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - hasDiscussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.Repository.OrganizationPayload? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                hasDiscussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Components.Schemas.StringOrIntDate,
                createdAt: Components.Schemas.StringOrIntDate,
                updatedAt: Components.Schemas.StringOrIntDate,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.hasDiscussions = hasDiscussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case hasDiscussions = "has_discussions"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-or-int-date`.
        @frozen package enum StringOrIntDate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case1`.
            case StringDate(Components.Schemas.StringDate)
            /// - Remark: Generated from `#/components/schemas/string-or-int-date/case2`.
            case IntDate(Components.Schemas.IntDate)
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .StringDate(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .IntDate(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .StringDate(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .IntDate(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/string-date`.
        package typealias StringDate = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/int-date`.
        package typealias IntDate = Swift.Int
        /// Authentication token for a GitHub App installed on a user or org.
        ///
        /// - Remark: Generated from `#/components/schemas/installation-token`.
        package struct InstallationToken: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/installation-token/token`.
            package var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/expires_at`.
            package var expiresAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/permissions`.
            package var permissions: Components.Schemas.AppPermissions?
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            @frozen package enum RepositorySelectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case all = "all"
                case selected = "selected"
            }
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            package var repositorySelection: Components.Schemas.InstallationToken.RepositorySelectionPayload?
            /// - Remark: Generated from `#/components/schemas/installation-token/repositories`.
            package var repositories: [Components.Schemas.Repository]?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file`.
            package var singleFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation-token/has_multiple_single_files`.
            package var hasMultipleSingleFiles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file_paths`.
            package var singleFilePaths: [Swift.String]?
            /// Creates a new `InstallationToken`.
            ///
            /// - Parameters:
            ///   - token:
            ///   - expiresAt:
            ///   - permissions:
            ///   - repositorySelection:
            ///   - repositories:
            ///   - singleFile:
            ///   - hasMultipleSingleFiles:
            ///   - singleFilePaths:
            package init(
                token: Swift.String,
                expiresAt: Swift.String,
                permissions: Components.Schemas.AppPermissions? = nil,
                repositorySelection: Components.Schemas.InstallationToken.RepositorySelectionPayload? = nil,
                repositories: [Components.Schemas.Repository]? = nil,
                singleFile: Swift.String? = nil,
                hasMultipleSingleFiles: Swift.Bool? = nil,
                singleFilePaths: [Swift.String]? = nil
            ) {
                self.token = token
                self.expiresAt = expiresAt
                self.permissions = permissions
                self.repositorySelection = repositorySelection
                self.repositories = repositories
                self.singleFile = singleFile
                self.hasMultipleSingleFiles = hasMultipleSingleFiles
                self.singleFilePaths = singleFilePaths
            }
            package enum CodingKeys: String, CodingKey {
                case token
                case expiresAt = "expires_at"
                case permissions
                case repositorySelection = "repository_selection"
                case repositories
                case singleFile = "single_file"
                case hasMultipleSingleFiles = "has_multiple_single_files"
                case singleFilePaths = "single_file_paths"
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        package struct CodeOfConduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            package var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            package var htmlUrl: Swift.String?
            /// Creates a new `CodeOfConduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - htmlUrl:
            package init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.htmlUrl = htmlUrl
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case htmlUrl = "html_url"
            }
        }
        /// The security alert number.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-number`.
        package typealias AlertNumber = Swift.Int
        /// Details for the vulnerable package.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-package`.
        package struct DependabotAlertPackage: Codable, Hashable, Sendable {
            /// The package's language or package management ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/ecosystem`.
            package var ecosystem: Swift.String
            /// The unique package name within its ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/name`.
            package var name: Swift.String
            /// Creates a new `DependabotAlertPackage`.
            ///
            /// - Parameters:
            ///   - ecosystem: The package's language or package management ecosystem.
            ///   - name: The unique package name within its ecosystem.
            package init(
                ecosystem: Swift.String,
                name: Swift.String
            ) {
                self.ecosystem = ecosystem
                self.name = name
            }
            package enum CodingKeys: String, CodingKey {
                case ecosystem
                case name
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.ecosystem = try container.decode(
                    Swift.String.self,
                    forKey: .ecosystem
                )
                self.name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ecosystem",
                    "name"
                ])
            }
        }
        /// Details pertaining to one vulnerable version range for the advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability`.
        package struct DependabotAlertSecurityVulnerability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/package`.
            package var package: Components.Schemas.DependabotAlertPackage
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            @frozen package enum SeverityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            package var severity: Components.Schemas.DependabotAlertSecurityVulnerability.SeverityPayload
            /// Conditions that identify vulnerable versions of this vulnerability's package.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/vulnerable_version_range`.
            package var vulnerableVersionRange: Swift.String
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            package struct FirstPatchedVersionPayload: Codable, Hashable, Sendable {
                /// The package version that patches this vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version/identifier`.
                package var identifier: Swift.String
                /// Creates a new `FirstPatchedVersionPayload`.
                ///
                /// - Parameters:
                ///   - identifier: The package version that patches this vulnerability.
                package init(identifier: Swift.String) {
                    self.identifier = identifier
                }
                package enum CodingKeys: String, CodingKey {
                    case identifier
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.identifier = try container.decode(
                        Swift.String.self,
                        forKey: .identifier
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "identifier"
                    ])
                }
            }
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            package var firstPatchedVersion: Components.Schemas.DependabotAlertSecurityVulnerability.FirstPatchedVersionPayload?
            /// Creates a new `DependabotAlertSecurityVulnerability`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - severity: The severity of the vulnerability.
            ///   - vulnerableVersionRange: Conditions that identify vulnerable versions of this vulnerability's package.
            ///   - firstPatchedVersion: Details pertaining to the package version that patches this vulnerability.
            package init(
                package: Components.Schemas.DependabotAlertPackage,
                severity: Components.Schemas.DependabotAlertSecurityVulnerability.SeverityPayload,
                vulnerableVersionRange: Swift.String,
                firstPatchedVersion: Components.Schemas.DependabotAlertSecurityVulnerability.FirstPatchedVersionPayload? = nil
            ) {
                self.package = package
                self.severity = severity
                self.vulnerableVersionRange = vulnerableVersionRange
                self.firstPatchedVersion = firstPatchedVersion
            }
            package enum CodingKeys: String, CodingKey {
                case package
                case severity
                case vulnerableVersionRange = "vulnerable_version_range"
                case firstPatchedVersion = "first_patched_version"
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.package = try container.decode(
                    Components.Schemas.DependabotAlertPackage.self,
                    forKey: .package
                )
                self.severity = try container.decode(
                    Components.Schemas.DependabotAlertSecurityVulnerability.SeverityPayload.self,
                    forKey: .severity
                )
                self.vulnerableVersionRange = try container.decode(
                    Swift.String.self,
                    forKey: .vulnerableVersionRange
                )
                self.firstPatchedVersion = try container.decodeIfPresent(
                    Components.Schemas.DependabotAlertSecurityVulnerability.FirstPatchedVersionPayload.self,
                    forKey: .firstPatchedVersion
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package",
                    "severity",
                    "vulnerable_version_range",
                    "first_patched_version"
                ])
            }
        }
        /// Details for the GitHub Security Advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory`.
        package struct DependabotAlertSecurityAdvisory: Codable, Hashable, Sendable {
            /// The unique GitHub Security Advisory ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ghsa_id`.
            package var ghsaId: Swift.String
            /// The unique CVE ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cve_id`.
            package var cveId: Swift.String?
            /// A short, plain text summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/summary`.
            package var summary: Swift.String
            /// A long-form Markdown-supported description of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/description`.
            package var description: Swift.String
            /// Vulnerable version range information for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/vulnerabilities`.
            package var vulnerabilities: [Components.Schemas.DependabotAlertSecurityVulnerability]
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            @frozen package enum SeverityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            package var severity: Components.Schemas.DependabotAlertSecurityAdvisory.SeverityPayload
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            package struct CvssPayload: Codable, Hashable, Sendable {
                /// The overall CVSS score of the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/score`.
                package var score: Swift.Double
                /// The full CVSS vector string for the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/vector_string`.
                package var vectorString: Swift.String?
                /// Creates a new `CvssPayload`.
                ///
                /// - Parameters:
                ///   - score: The overall CVSS score of the advisory.
                ///   - vectorString: The full CVSS vector string for the advisory.
                package init(
                    score: Swift.Double,
                    vectorString: Swift.String? = nil
                ) {
                    self.score = score
                    self.vectorString = vectorString
                }
                package enum CodingKeys: String, CodingKey {
                    case score
                    case vectorString = "vector_string"
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.score = try container.decode(
                        Swift.Double.self,
                        forKey: .score
                    )
                    self.vectorString = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vectorString
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "score",
                        "vector_string"
                    ])
                }
            }
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            package var cvss: Components.Schemas.DependabotAlertSecurityAdvisory.CvssPayload
            /// A CWE weakness assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/CwesPayload`.
            package struct CwesPayloadPayload: Codable, Hashable, Sendable {
                /// The unique CWE ID.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/CwesPayload/cwe_id`.
                package var cweId: Swift.String
                /// The short, plain text name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/CwesPayload/name`.
                package var name: Swift.String
                /// Creates a new `CwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cweId: The unique CWE ID.
                ///   - name: The short, plain text name of the CWE.
                package init(
                    cweId: Swift.String,
                    name: Swift.String
                ) {
                    self.cweId = cweId
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case cweId = "cwe_id"
                    case name
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.cweId = try container.decode(
                        Swift.String.self,
                        forKey: .cweId
                    )
                    self.name = try container.decode(
                        Swift.String.self,
                        forKey: .name
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "cwe_id",
                        "name"
                    ])
                }
            }
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            package typealias CwesPayload = [Components.Schemas.DependabotAlertSecurityAdvisory.CwesPayloadPayload]
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            package var cwes: Components.Schemas.DependabotAlertSecurityAdvisory.CwesPayload
            /// An advisory identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/IdentifiersPayload`.
            package struct IdentifiersPayloadPayload: Codable, Hashable, Sendable {
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/IdentifiersPayload/type`.
                @frozen package enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case cve = "CVE"
                    case ghsa = "GHSA"
                }
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/IdentifiersPayload/type`.
                package var _type: Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayloadPayload._TypePayload
                /// The value of the advisory identifer.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/IdentifiersPayload/value`.
                package var value: Swift.String
                /// Creates a new `IdentifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of advisory identifier.
                ///   - value: The value of the advisory identifer.
                package init(
                    _type: Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayloadPayload._TypePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self._type = try container.decode(
                        Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayloadPayload._TypePayload.self,
                        forKey: ._type
                    )
                    self.value = try container.decode(
                        Swift.String.self,
                        forKey: .value
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type",
                        "value"
                    ])
                }
            }
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            package typealias IdentifiersPayload = [Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayloadPayload]
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            package var identifiers: Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayload
            /// A link to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ReferencesPayload`.
            package struct ReferencesPayloadPayload: Codable, Hashable, Sendable {
                /// The URL of the reference.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ReferencesPayload/url`.
                package var url: Swift.String
                /// Creates a new `ReferencesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL of the reference.
                package init(url: Swift.String) {
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case url
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.url = try container.decode(
                        Swift.String.self,
                        forKey: .url
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "url"
                    ])
                }
            }
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            package typealias ReferencesPayload = [Components.Schemas.DependabotAlertSecurityAdvisory.ReferencesPayloadPayload]
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            package var references: Components.Schemas.DependabotAlertSecurityAdvisory.ReferencesPayload
            /// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/published_at`.
            package var publishedAt: Foundation.Date
            /// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/updated_at`.
            package var updatedAt: Foundation.Date
            /// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/withdrawn_at`.
            package var withdrawnAt: Foundation.Date?
            /// Creates a new `DependabotAlertSecurityAdvisory`.
            ///
            /// - Parameters:
            ///   - ghsaId: The unique GitHub Security Advisory ID assigned to the advisory.
            ///   - cveId: The unique CVE ID assigned to the advisory.
            ///   - summary: A short, plain text summary of the advisory.
            ///   - description: A long-form Markdown-supported description of the advisory.
            ///   - vulnerabilities: Vulnerable version range information for the advisory.
            ///   - severity: The severity of the advisory.
            ///   - cvss: Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///   - cwes: Details for the advisory pertaining to Common Weakness Enumeration.
            ///   - identifiers: Values that identify this advisory among security information sources.
            ///   - references: Links to additional advisory information.
            ///   - publishedAt: The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - updatedAt: The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - withdrawnAt: The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            package init(
                ghsaId: Swift.String,
                cveId: Swift.String? = nil,
                summary: Swift.String,
                description: Swift.String,
                vulnerabilities: [Components.Schemas.DependabotAlertSecurityVulnerability],
                severity: Components.Schemas.DependabotAlertSecurityAdvisory.SeverityPayload,
                cvss: Components.Schemas.DependabotAlertSecurityAdvisory.CvssPayload,
                cwes: Components.Schemas.DependabotAlertSecurityAdvisory.CwesPayload,
                identifiers: Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayload,
                references: Components.Schemas.DependabotAlertSecurityAdvisory.ReferencesPayload,
                publishedAt: Foundation.Date,
                updatedAt: Foundation.Date,
                withdrawnAt: Foundation.Date? = nil
            ) {
                self.ghsaId = ghsaId
                self.cveId = cveId
                self.summary = summary
                self.description = description
                self.vulnerabilities = vulnerabilities
                self.severity = severity
                self.cvss = cvss
                self.cwes = cwes
                self.identifiers = identifiers
                self.references = references
                self.publishedAt = publishedAt
                self.updatedAt = updatedAt
                self.withdrawnAt = withdrawnAt
            }
            package enum CodingKeys: String, CodingKey {
                case ghsaId = "ghsa_id"
                case cveId = "cve_id"
                case summary
                case description
                case vulnerabilities
                case severity
                case cvss
                case cwes
                case identifiers
                case references
                case publishedAt = "published_at"
                case updatedAt = "updated_at"
                case withdrawnAt = "withdrawn_at"
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.ghsaId = try container.decode(
                    Swift.String.self,
                    forKey: .ghsaId
                )
                self.cveId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cveId
                )
                self.summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                self.description = try container.decode(
                    Swift.String.self,
                    forKey: .description
                )
                self.vulnerabilities = try container.decode(
                    [Components.Schemas.DependabotAlertSecurityVulnerability].self,
                    forKey: .vulnerabilities
                )
                self.severity = try container.decode(
                    Components.Schemas.DependabotAlertSecurityAdvisory.SeverityPayload.self,
                    forKey: .severity
                )
                self.cvss = try container.decode(
                    Components.Schemas.DependabotAlertSecurityAdvisory.CvssPayload.self,
                    forKey: .cvss
                )
                self.cwes = try container.decode(
                    Components.Schemas.DependabotAlertSecurityAdvisory.CwesPayload.self,
                    forKey: .cwes
                )
                self.identifiers = try container.decode(
                    Components.Schemas.DependabotAlertSecurityAdvisory.IdentifiersPayload.self,
                    forKey: .identifiers
                )
                self.references = try container.decode(
                    Components.Schemas.DependabotAlertSecurityAdvisory.ReferencesPayload.self,
                    forKey: .references
                )
                self.publishedAt = try container.decode(
                    Foundation.Date.self,
                    forKey: .publishedAt
                )
                self.updatedAt = try container.decode(
                    Foundation.Date.self,
                    forKey: .updatedAt
                )
                self.withdrawnAt = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .withdrawnAt
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id",
                    "cve_id",
                    "summary",
                    "description",
                    "vulnerabilities",
                    "severity",
                    "cvss",
                    "cwes",
                    "identifiers",
                    "references",
                    "published_at",
                    "updated_at",
                    "withdrawn_at"
                ])
            }
        }
        /// The REST API URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-url`.
        package typealias AlertUrl = Swift.String
        /// The GitHub URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-html-url`.
        package typealias AlertHtmlUrl = Swift.String
        /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-created-at`.
        package typealias AlertCreatedAt = Foundation.Date
        /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-updated-at`.
        package typealias AlertUpdatedAt = Foundation.Date
        /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-dismissed-at`.
        package typealias AlertDismissedAt = Foundation.Date
        /// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-fixed-at`.
        package typealias AlertFixedAt = Foundation.Date
        /// The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-auto-dismissed-at`.
        package typealias AlertAutoDismissedAt = Foundation.Date
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        package struct SimpleRepository: Codable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            package var id: Swift.Int
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            package var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            package var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            package var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            package var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            package var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            package var htmlUrl: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            package var description: Swift.String?
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            package var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            package var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            package var archiveUrl: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            package var assigneesUrl: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            package var blobsUrl: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            package var branchesUrl: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            package var collaboratorsUrl: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            package var commentsUrl: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            package var commitsUrl: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            package var compareUrl: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            package var contentsUrl: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            package var contributorsUrl: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            package var deploymentsUrl: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            package var downloadsUrl: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            package var eventsUrl: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            package var forksUrl: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            package var gitCommitsUrl: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            package var gitRefsUrl: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            package var gitTagsUrl: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            package var issueCommentUrl: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            package var issueEventsUrl: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            package var issuesUrl: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            package var keysUrl: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            package var labelsUrl: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            package var languagesUrl: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            package var mergesUrl: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            package var milestonesUrl: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            package var notificationsUrl: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            package var pullsUrl: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            package var releasesUrl: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            package var stargazersUrl: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            package var statusesUrl: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            package var subscribersUrl: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            package var subscriptionUrl: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            package var tagsUrl: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            package var teamsUrl: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            package var treesUrl: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            package var hooksUrl: Swift.String
            /// Creates a new `SimpleRepository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - nodeId: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - fullName: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - htmlUrl: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archiveUrl: A template for the API URL to download the repository as an archive.
            ///   - assigneesUrl: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobsUrl: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branchesUrl: A template for the API URL to get information about branches in the repository.
            ///   - collaboratorsUrl: A template for the API URL to get information about collaborators of the repository.
            ///   - commentsUrl: A template for the API URL to get information about comments on the repository.
            ///   - commitsUrl: A template for the API URL to get information about commits on the repository.
            ///   - compareUrl: A template for the API URL to compare two commits or refs.
            ///   - contentsUrl: A template for the API URL to get the contents of the repository.
            ///   - contributorsUrl: A template for the API URL to list the contributors to the repository.
            ///   - deploymentsUrl: The API URL to list the deployments of the repository.
            ///   - downloadsUrl: The API URL to list the downloads on the repository.
            ///   - eventsUrl: The API URL to list the events of the repository.
            ///   - forksUrl: The API URL to list the forks of the repository.
            ///   - gitCommitsUrl: A template for the API URL to get information about Git commits of the repository.
            ///   - gitRefsUrl: A template for the API URL to get information about Git refs of the repository.
            ///   - gitTagsUrl: A template for the API URL to get information about Git tags of the repository.
            ///   - issueCommentUrl: A template for the API URL to get information about issue comments on the repository.
            ///   - issueEventsUrl: A template for the API URL to get information about issue events on the repository.
            ///   - issuesUrl: A template for the API URL to get information about issues on the repository.
            ///   - keysUrl: A template for the API URL to get information about deploy keys on the repository.
            ///   - labelsUrl: A template for the API URL to get information about labels of the repository.
            ///   - languagesUrl: The API URL to get information about the languages of the repository.
            ///   - mergesUrl: The API URL to merge branches in the repository.
            ///   - milestonesUrl: A template for the API URL to get information about milestones of the repository.
            ///   - notificationsUrl: A template for the API URL to get information about notifications on the repository.
            ///   - pullsUrl: A template for the API URL to get information about pull requests on the repository.
            ///   - releasesUrl: A template for the API URL to get information about releases on the repository.
            ///   - stargazersUrl: The API URL to list the stargazers on the repository.
            ///   - statusesUrl: A template for the API URL to get information about statuses of a commit.
            ///   - subscribersUrl: The API URL to list the subscribers on the repository.
            ///   - subscriptionUrl: The API URL to subscribe to notifications for this repository.
            ///   - tagsUrl: The API URL to get information about tags on the repository.
            ///   - teamsUrl: The API URL to list the teams on the repository.
            ///   - treesUrl: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooksUrl: The API URL to list the hooks on the repository.
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                hooksUrl: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.hooksUrl = hooksUrl
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case hooksUrl = "hooks_url"
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        package struct NullableMilestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            package var nodeId: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            package var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            package var state: Components.Schemas.NullableMilestone.StatePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            package var creator: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            package var closedIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            package var dueOn: Foundation.Date?
            /// Creates a new `NullableMilestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - labelsUrl:
            ///   - id:
            ///   - nodeId:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - openIssues:
            ///   - closedIssues:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - dueOn:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                labelsUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.NullableMilestone.StatePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.NullableSimpleUser? = nil,
                openIssues: Swift.Int,
                closedIssues: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                dueOn: Foundation.Date? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.labelsUrl = labelsUrl
                self.id = id
                self.nodeId = nodeId
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.openIssues = openIssues
                self.closedIssues = closedIssues
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.dueOn = dueOn
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case labelsUrl = "labels_url"
                case id
                case nodeId = "node_id"
                case number
                case state
                case title
                case description
                case creator
                case openIssues = "open_issues"
                case closedIssues = "closed_issues"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case dueOn = "due_on"
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        package struct NullableIntegration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            package var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            package var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            package var owner: Components.Schemas.NullableSimpleUser?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            package var externalUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            package var updatedAt: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                package var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                package var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                package var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                package var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                package var deployments: Swift.String?
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                package init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                package enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    self.checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    self.metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    self.contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    self.deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                package func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        self.issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        self.checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        self.metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        self.contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        self.deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package var permissions: Components.Schemas.NullableIntegration.PermissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            package var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            package var installationsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            package var clientId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            package var clientSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            package var webhookSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            package var pem: Swift.String?
            /// Creates a new `NullableIntegration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - nodeId:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - externalUrl:
            ///   - htmlUrl:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installationsCount: The number of installations associated with the GitHub app
            ///   - clientId:
            ///   - clientSecret:
            ///   - webhookSecret:
            ///   - pem:
            package init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                nodeId: Swift.String,
                owner: Components.Schemas.NullableSimpleUser? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                externalUrl: Swift.String,
                htmlUrl: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                permissions: Components.Schemas.NullableIntegration.PermissionsPayload,
                events: [Swift.String],
                installationsCount: Swift.Int? = nil,
                clientId: Swift.String? = nil,
                clientSecret: Swift.String? = nil,
                webhookSecret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.nodeId = nodeId
                self.owner = owner
                self.name = name
                self.description = description
                self.externalUrl = externalUrl
                self.htmlUrl = htmlUrl
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.permissions = permissions
                self.events = events
                self.installationsCount = installationsCount
                self.clientId = clientId
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case slug
                case nodeId = "node_id"
                case owner
                case name
                case description
                case externalUrl = "external_url"
                case htmlUrl = "html_url"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case permissions
                case events
                case installationsCount = "installations_count"
                case clientId = "client_id"
                case clientSecret = "client_secret"
                case webhookSecret = "webhook_secret"
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen package enum AuthorAssociation: String, Codable, Hashable, Sendable, CaseIterable {
            case collaborator = "COLLABORATOR"
            case contributor = "CONTRIBUTOR"
            case firstTimer = "FIRST_TIMER"
            case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
            case mannequin = "MANNEQUIN"
            case member = "MEMBER"
            case none = "NONE"
            case owner = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        package struct ReactionRollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            package var totalCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            package var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            package var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            package var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            package var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            package var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            package var rocket: Swift.Int
            /// Creates a new `ReactionRollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - totalCount:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            package init(
                url: Swift.String,
                totalCount: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.totalCount = totalCount
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case totalCount = "total_count"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        package struct Issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            package var nodeId: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            package var repositoryUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            package var htmlUrl: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            package var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            package var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen package enum StateReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
                case reopened = "reopened"
                case notPlanned = "not_planned"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            package var stateReason: Components.Schemas.Issue.StateReasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            package var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload`.
            @frozen package enum LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2`.
                package struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/id`.
                    package var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/node_id`.
                    package var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/name`.
                    package var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/color`.
                    package var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/default`.
                    package var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - nodeId:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    package init(
                        id: Swift.Int64? = nil,
                        nodeId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.nodeId = nodeId
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    package enum CodingKeys: String, CodingKey {
                        case id
                        case nodeId = "node_id"
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2`.
                case case2(Components.Schemas.Issue.LabelsPayloadPayload.Case2Payload)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package typealias LabelsPayload = [Components.Schemas.Issue.LabelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package var labels: Components.Schemas.Issue.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            package var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package struct PullRequestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                package var mergedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                package var diffUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                package var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                package var patchUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                package var url: Swift.String?
                /// Creates a new `PullRequestPayload`.
                ///
                /// - Parameters:
                ///   - mergedAt:
                ///   - diffUrl:
                ///   - htmlUrl:
                ///   - patchUrl:
                ///   - url:
                package init(
                    mergedAt: Foundation.Date? = nil,
                    diffUrl: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    patchUrl: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.mergedAt = mergedAt
                    self.diffUrl = diffUrl
                    self.htmlUrl = htmlUrl
                    self.patchUrl = patchUrl
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case mergedAt = "merged_at"
                    case diffUrl = "diff_url"
                    case htmlUrl = "html_url"
                    case patchUrl = "patch_url"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package var pullRequest: Components.Schemas.Issue.PullRequestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            package var closedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            package var timelineUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            package var repository: Components.Schemas.Repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `Issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url: URL for the issue
            ///   - repositoryUrl:
            ///   - labelsUrl:
            ///   - commentsUrl:
            ///   - eventsUrl:
            ///   - htmlUrl:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - stateReason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - activeLockReason:
            ///   - comments:
            ///   - pullRequest:
            ///   - closedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - draft:
            ///   - closedBy:
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - timelineUrl:
            ///   - repository:
            ///   - performedViaGithubApp:
            ///   - authorAssociation:
            ///   - reactions:
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                url: Swift.String,
                repositoryUrl: Swift.String,
                labelsUrl: Swift.String,
                commentsUrl: Swift.String,
                eventsUrl: Swift.String,
                htmlUrl: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                stateReason: Components.Schemas.Issue.StateReasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.NullableSimpleUser? = nil,
                labels: Components.Schemas.Issue.LabelsPayload,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                milestone: Components.Schemas.NullableMilestone? = nil,
                locked: Swift.Bool,
                activeLockReason: Swift.String? = nil,
                comments: Swift.Int,
                pullRequest: Components.Schemas.Issue.PullRequestPayload? = nil,
                closedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                draft: Swift.Bool? = nil,
                closedBy: Components.Schemas.NullableSimpleUser? = nil,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                timelineUrl: Swift.String? = nil,
                repository: Components.Schemas.Repository? = nil,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                authorAssociation: Components.Schemas.AuthorAssociation,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.repositoryUrl = repositoryUrl
                self.labelsUrl = labelsUrl
                self.commentsUrl = commentsUrl
                self.eventsUrl = eventsUrl
                self.htmlUrl = htmlUrl
                self.number = number
                self.state = state
                self.stateReason = stateReason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.activeLockReason = activeLockReason
                self.comments = comments
                self.pullRequest = pullRequest
                self.closedAt = closedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.draft = draft
                self.closedBy = closedBy
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.timelineUrl = timelineUrl
                self.repository = repository
                self.performedViaGithubApp = performedViaGithubApp
                self.authorAssociation = authorAssociation
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case repositoryUrl = "repository_url"
                case labelsUrl = "labels_url"
                case commentsUrl = "comments_url"
                case eventsUrl = "events_url"
                case htmlUrl = "html_url"
                case number
                case state
                case stateReason = "state_reason"
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case activeLockReason = "active_lock_reason"
                case comments
                case pullRequest = "pull_request"
                case closedAt = "closed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case draft
                case closedBy = "closed_by"
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case timelineUrl = "timeline_url"
                case repository
                case performedViaGithubApp = "performed_via_github_app"
                case authorAssociation = "author_association"
                case reactions
            }
        }
        /// Comments provide a way for people to collaborate on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/issue-comment`.
        package struct IssueComment: Codable, Hashable, Sendable {
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-comment/node_id`.
            package var nodeId: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/url`.
            package var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue-comment/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/issue-comment/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/issue-comment/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `IssueComment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the issue comment
            ///   - nodeId:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - bodyText:
            ///   - bodyHtml:
            ///   - htmlUrl:
            ///   - user:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - issueUrl:
            ///   - authorAssociation:
            ///   - performedViaGithubApp:
            ///   - reactions:
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                bodyHtml: Swift.String? = nil,
                htmlUrl: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                issueUrl: Swift.String,
                authorAssociation: Components.Schemas.AuthorAssociation,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.body = body
                self.bodyText = bodyText
                self.bodyHtml = bodyHtml
                self.htmlUrl = htmlUrl
                self.user = user
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.issueUrl = issueUrl
                self.authorAssociation = authorAssociation
                self.performedViaGithubApp = performedViaGithubApp
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case body
                case bodyText = "body_text"
                case bodyHtml = "body_html"
                case htmlUrl = "html_url"
                case user
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case issueUrl = "issue_url"
                case authorAssociation = "author_association"
                case performedViaGithubApp = "performed_via_github_app"
                case reactions
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        package struct SecurityAndAnalysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            package struct AdvancedSecurityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                package var status: Components.Schemas.SecurityAndAnalysis.AdvancedSecurityPayload.StatusPayload?
                /// Creates a new `AdvancedSecurityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.SecurityAndAnalysis.AdvancedSecurityPayload.StatusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            package var advancedSecurity: Components.Schemas.SecurityAndAnalysis.AdvancedSecurityPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            package struct SecretScanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                package var status: Components.Schemas.SecurityAndAnalysis.SecretScanningPayload.StatusPayload?
                /// Creates a new `SecretScanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.SecurityAndAnalysis.SecretScanningPayload.StatusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            package var secretScanning: Components.Schemas.SecurityAndAnalysis.SecretScanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            package struct SecretScanningPushProtectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                package var status: Components.Schemas.SecurityAndAnalysis.SecretScanningPushProtectionPayload.StatusPayload?
                /// Creates a new `SecretScanningPushProtectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                package init(status: Components.Schemas.SecurityAndAnalysis.SecretScanningPushProtectionPayload.StatusPayload? = nil) {
                    self.status = status
                }
                package enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            package var secretScanningPushProtection: Components.Schemas.SecurityAndAnalysis.SecretScanningPushProtectionPayload?
            /// Creates a new `SecurityAndAnalysis`.
            ///
            /// - Parameters:
            ///   - advancedSecurity:
            ///   - secretScanning:
            ///   - secretScanningPushProtection:
            package init(
                advancedSecurity: Components.Schemas.SecurityAndAnalysis.AdvancedSecurityPayload? = nil,
                secretScanning: Components.Schemas.SecurityAndAnalysis.SecretScanningPayload? = nil,
                secretScanningPushProtection: Components.Schemas.SecurityAndAnalysis.SecretScanningPushProtectionPayload? = nil
            ) {
                self.advancedSecurity = advancedSecurity
                self.secretScanning = secretScanning
                self.secretScanningPushProtection = secretScanningPushProtection
            }
            package enum CodingKeys: String, CodingKey {
                case advancedSecurity = "advanced_security"
                case secretScanning = "secret_scanning"
                case secretScanningPushProtection = "secret_scanning_push_protection"
            }
        }
        /// A GitHub organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        package struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            package var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            package var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            package var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            package init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Organization Full
        ///
        /// - Remark: Generated from `#/components/schemas/organization-full`.
        package struct OrganizationFull: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-full/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/members_url`.
            package var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/public_members_url`.
            package var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/company`.
            package var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/blog`.
            package var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/location`.
            package var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/twitter_username`.
            package var twitterUsername: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/is_verified`.
            package var isVerified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/has_organization_projects`.
            package var hasOrganizationProjects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/has_repository_projects`.
            package var hasRepositoryProjects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/public_repos`.
            package var publicRepos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/public_gists`.
            package var publicGists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/followers`.
            package var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/following`.
            package var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-full/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/total_private_repos`.
            package var totalPrivateRepos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/owned_private_repos`.
            package var ownedPrivateRepos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/private_gists`.
            package var privateGists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/disk_usage`.
            package var diskUsage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/collaborators`.
            package var collaborators: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/billing_email`.
            package var billingEmail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            package struct PlanPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/space`.
                package var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/private_repos`.
                package var privateRepos: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/filled_seats`.
                package var filledSeats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/seats`.
                package var seats: Swift.Int?
                /// Creates a new `PlanPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - privateRepos:
                ///   - filledSeats:
                ///   - seats:
                package init(
                    name: Swift.String,
                    space: Swift.Int,
                    privateRepos: Swift.Int,
                    filledSeats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.privateRepos = privateRepos
                    self.filledSeats = filledSeats
                    self.seats = seats
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case privateRepos = "private_repos"
                    case filledSeats = "filled_seats"
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            package var plan: Components.Schemas.OrganizationFull.PlanPayload?
            /// - Remark: Generated from `#/components/schemas/organization-full/default_repository_permission`.
            package var defaultRepositoryPermission: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_repositories`.
            package var membersCanCreateRepositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/two_factor_requirement_enabled`.
            package var twoFactorRequirementEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_allowed_repository_creation_type`.
            package var membersAllowedRepositoryCreationType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_repositories`.
            package var membersCanCreatePublicRepositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_repositories`.
            package var membersCanCreatePrivateRepositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_internal_repositories`.
            package var membersCanCreateInternalRepositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_pages`.
            package var membersCanCreatePages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_pages`.
            package var membersCanCreatePublicPages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_pages`.
            package var membersCanCreatePrivatePages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_fork_private_repositories`.
            package var membersCanForkPrivateRepositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/web_commit_signoff_required`.
            package var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/updated_at`.
            package var updatedAt: Foundation.Date
            /// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/advanced_security_enabled_for_new_repositories`.
            package var advancedSecurityEnabledForNewRepositories: Swift.Bool?
            /// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            /// this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_alerts_enabled_for_new_repositories`.
            package var dependabotAlertsEnabledForNewRepositories: Swift.Bool?
            /// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            /// to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_security_updates_enabled_for_new_repositories`.
            package var dependabotSecurityUpdatesEnabledForNewRepositories: Swift.Bool?
            /// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependency_graph_enabled_for_new_repositories`.
            package var dependencyGraphEnabledForNewRepositories: Swift.Bool?
            /// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_enabled_for_new_repositories`.
            package var secretScanningEnabledForNewRepositories: Swift.Bool?
            /// Whether secret scanning push protection is automatically enabled for new repositories and repositories
            /// transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_enabled_for_new_repositories`.
            package var secretScanningPushProtectionEnabledForNewRepositories: Swift.Bool?
            /// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link_enabled`.
            package var secretScanningPushProtectionCustomLinkEnabled: Swift.Bool?
            /// An optional URL string to display to contributors who are blocked from pushing a secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link`.
            package var secretScanningPushProtectionCustomLink: Swift.String?
            /// Creates a new `OrganizationFull`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - twitterUsername:
            ///   - isVerified:
            ///   - hasOrganizationProjects:
            ///   - hasRepositoryProjects:
            ///   - publicRepos:
            ///   - publicGists:
            ///   - followers:
            ///   - following:
            ///   - htmlUrl:
            ///   - createdAt:
            ///   - _type:
            ///   - totalPrivateRepos:
            ///   - ownedPrivateRepos:
            ///   - privateGists:
            ///   - diskUsage:
            ///   - collaborators:
            ///   - billingEmail:
            ///   - plan:
            ///   - defaultRepositoryPermission:
            ///   - membersCanCreateRepositories:
            ///   - twoFactorRequirementEnabled:
            ///   - membersAllowedRepositoryCreationType:
            ///   - membersCanCreatePublicRepositories:
            ///   - membersCanCreatePrivateRepositories:
            ///   - membersCanCreateInternalRepositories:
            ///   - membersCanCreatePages:
            ///   - membersCanCreatePublicPages:
            ///   - membersCanCreatePrivatePages:
            ///   - membersCanForkPrivateRepositories:
            ///   - webCommitSignoffRequired:
            ///   - updatedAt:
            ///   - advancedSecurityEnabledForNewRepositories: Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///   - dependabotAlertsEnabledForNewRepositories: Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            ///   - dependabotSecurityUpdatesEnabledForNewRepositories: Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            ///   - dependencyGraphEnabledForNewRepositories: Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            ///   - secretScanningEnabledForNewRepositories: Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            ///   - secretScanningPushProtectionEnabledForNewRepositories: Whether secret scanning push protection is automatically enabled for new repositories and repositories
            ///   - secretScanningPushProtectionCustomLinkEnabled: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///   - secretScanningPushProtectionCustomLink: An optional URL string to display to contributors who are blocked from pushing a secret.
            package init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                twitterUsername: Swift.String? = nil,
                isVerified: Swift.Bool? = nil,
                hasOrganizationProjects: Swift.Bool,
                hasRepositoryProjects: Swift.Bool,
                publicRepos: Swift.Int,
                publicGists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                htmlUrl: Swift.String,
                createdAt: Foundation.Date,
                _type: Swift.String,
                totalPrivateRepos: Swift.Int? = nil,
                ownedPrivateRepos: Swift.Int? = nil,
                privateGists: Swift.Int? = nil,
                diskUsage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil,
                billingEmail: Swift.String? = nil,
                plan: Components.Schemas.OrganizationFull.PlanPayload? = nil,
                defaultRepositoryPermission: Swift.String? = nil,
                membersCanCreateRepositories: Swift.Bool? = nil,
                twoFactorRequirementEnabled: Swift.Bool? = nil,
                membersAllowedRepositoryCreationType: Swift.String? = nil,
                membersCanCreatePublicRepositories: Swift.Bool? = nil,
                membersCanCreatePrivateRepositories: Swift.Bool? = nil,
                membersCanCreateInternalRepositories: Swift.Bool? = nil,
                membersCanCreatePages: Swift.Bool? = nil,
                membersCanCreatePublicPages: Swift.Bool? = nil,
                membersCanCreatePrivatePages: Swift.Bool? = nil,
                membersCanForkPrivateRepositories: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                updatedAt: Foundation.Date,
                advancedSecurityEnabledForNewRepositories: Swift.Bool? = nil,
                dependabotAlertsEnabledForNewRepositories: Swift.Bool? = nil,
                dependabotSecurityUpdatesEnabledForNewRepositories: Swift.Bool? = nil,
                dependencyGraphEnabledForNewRepositories: Swift.Bool? = nil,
                secretScanningEnabledForNewRepositories: Swift.Bool? = nil,
                secretScanningPushProtectionEnabledForNewRepositories: Swift.Bool? = nil,
                secretScanningPushProtectionCustomLinkEnabled: Swift.Bool? = nil,
                secretScanningPushProtectionCustomLink: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.twitterUsername = twitterUsername
                self.isVerified = isVerified
                self.hasOrganizationProjects = hasOrganizationProjects
                self.hasRepositoryProjects = hasRepositoryProjects
                self.publicRepos = publicRepos
                self.publicGists = publicGists
                self.followers = followers
                self.following = following
                self.htmlUrl = htmlUrl
                self.createdAt = createdAt
                self._type = _type
                self.totalPrivateRepos = totalPrivateRepos
                self.ownedPrivateRepos = ownedPrivateRepos
                self.privateGists = privateGists
                self.diskUsage = diskUsage
                self.collaborators = collaborators
                self.billingEmail = billingEmail
                self.plan = plan
                self.defaultRepositoryPermission = defaultRepositoryPermission
                self.membersCanCreateRepositories = membersCanCreateRepositories
                self.twoFactorRequirementEnabled = twoFactorRequirementEnabled
                self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
                self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
                self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
                self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
                self.membersCanCreatePages = membersCanCreatePages
                self.membersCanCreatePublicPages = membersCanCreatePublicPages
                self.membersCanCreatePrivatePages = membersCanCreatePrivatePages
                self.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.updatedAt = updatedAt
                self.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories
                self.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories
                self.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories
                self.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories
                self.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories
                self.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories
                self.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled
                self.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
                case name
                case company
                case blog
                case location
                case email
                case twitterUsername = "twitter_username"
                case isVerified = "is_verified"
                case hasOrganizationProjects = "has_organization_projects"
                case hasRepositoryProjects = "has_repository_projects"
                case publicRepos = "public_repos"
                case publicGists = "public_gists"
                case followers
                case following
                case htmlUrl = "html_url"
                case createdAt = "created_at"
                case _type = "type"
                case totalPrivateRepos = "total_private_repos"
                case ownedPrivateRepos = "owned_private_repos"
                case privateGists = "private_gists"
                case diskUsage = "disk_usage"
                case collaborators
                case billingEmail = "billing_email"
                case plan
                case defaultRepositoryPermission = "default_repository_permission"
                case membersCanCreateRepositories = "members_can_create_repositories"
                case twoFactorRequirementEnabled = "two_factor_requirement_enabled"
                case membersAllowedRepositoryCreationType = "members_allowed_repository_creation_type"
                case membersCanCreatePublicRepositories = "members_can_create_public_repositories"
                case membersCanCreatePrivateRepositories = "members_can_create_private_repositories"
                case membersCanCreateInternalRepositories = "members_can_create_internal_repositories"
                case membersCanCreatePages = "members_can_create_pages"
                case membersCanCreatePublicPages = "members_can_create_public_pages"
                case membersCanCreatePrivatePages = "members_can_create_private_pages"
                case membersCanForkPrivateRepositories = "members_can_fork_private_repositories"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case updatedAt = "updated_at"
                case advancedSecurityEnabledForNewRepositories = "advanced_security_enabled_for_new_repositories"
                case dependabotAlertsEnabledForNewRepositories = "dependabot_alerts_enabled_for_new_repositories"
                case dependabotSecurityUpdatesEnabledForNewRepositories = "dependabot_security_updates_enabled_for_new_repositories"
                case dependencyGraphEnabledForNewRepositories = "dependency_graph_enabled_for_new_repositories"
                case secretScanningEnabledForNewRepositories = "secret_scanning_enabled_for_new_repositories"
                case secretScanningPushProtectionEnabledForNewRepositories = "secret_scanning_push_protection_enabled_for_new_repositories"
                case secretScanningPushProtectionCustomLinkEnabled = "secret_scanning_push_protection_custom_link_enabled"
                case secretScanningPushProtectionCustomLink = "secret_scanning_push_protection_custom_link"
            }
        }
        /// A label for a self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner-label`.
        package struct RunnerLabel: Codable, Hashable, Sendable {
            /// Unique identifier of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/id`.
            package var id: Swift.Int?
            /// Name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/name`.
            package var name: Swift.String
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case readOnly = "read-only"
                case custom = "custom"
            }
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            package var _type: Components.Schemas.RunnerLabel._TypePayload?
            /// Creates a new `RunnerLabel`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the label.
            ///   - name: Name of the label.
            ///   - _type: The type of label. Read-only labels are applied automatically when the runner is configured.
            package init(
                id: Swift.Int? = nil,
                name: Swift.String,
                _type: Components.Schemas.RunnerLabel._TypePayload? = nil
            ) {
                self.id = id
                self.name = name
                self._type = _type
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case name
                case _type = "type"
            }
        }
        /// A self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner`.
        package struct Runner: Codable, Hashable, Sendable {
            /// The id of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/id`.
            package var id: Swift.Int
            /// The id of the runner group.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/runner_group_id`.
            package var runnerGroupId: Swift.Int?
            /// The name of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/name`.
            package var name: Swift.String
            /// The Operating System of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/os`.
            package var os: Swift.String
            /// The status of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/status`.
            package var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner/busy`.
            package var busy: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/runner/labels`.
            package var labels: [Components.Schemas.RunnerLabel]
            /// Creates a new `Runner`.
            ///
            /// - Parameters:
            ///   - id: The id of the runner.
            ///   - runnerGroupId: The id of the runner group.
            ///   - name: The name of the runner.
            ///   - os: The Operating System of the runner.
            ///   - status: The status of the runner.
            ///   - busy:
            ///   - labels:
            package init(
                id: Swift.Int,
                runnerGroupId: Swift.Int? = nil,
                name: Swift.String,
                os: Swift.String,
                status: Swift.String,
                busy: Swift.Bool,
                labels: [Components.Schemas.RunnerLabel]
            ) {
                self.id = id
                self.runnerGroupId = runnerGroupId
                self.name = name
                self.os = os
                self.status = status
                self.busy = busy
                self.labels = labels
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case runnerGroupId = "runner_group_id"
                case name
                case os
                case status
                case busy
                case labels
            }
        }
        /// The name of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-name`.
        package typealias CodeScanningAnalysisToolName = Swift.String
        /// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-guid`.
        package typealias CodeScanningAnalysisToolGuid = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state-query`.
        @frozen package enum CodeScanningAlertStateQuery: String, Codable, Hashable, Sendable, CaseIterable {
            case open = "open"
            case closed = "closed"
            case dismissed = "dismissed"
            case fixed = "fixed"
        }
        /// Severity of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-severity`.
        @frozen package enum CodeScanningAlertSeverity: String, Codable, Hashable, Sendable, CaseIterable {
            case critical = "critical"
            case high = "high"
            case medium = "medium"
            case low = "low"
            case warning = "warning"
            case note = "note"
            case error = "error"
        }
        /// The REST API URL for fetching the list of instances for an alert.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-instances-url`.
        package typealias AlertInstancesUrl = Swift.String
        /// State of a code scanning alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-state`.
        @frozen package enum CodeScanningAlertState: String, Codable, Hashable, Sendable, CaseIterable {
            case open = "open"
            case dismissed = "dismissed"
            case fixed = "fixed"
        }
        /// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-reason`.
        @frozen package enum CodeScanningAlertDismissedReason: String, Codable, Hashable, Sendable, CaseIterable {
            case falsePositive = "false positive"
            case won_apos_tFix = "won't fix"
            case usedInTests = "used in tests"
        }
        /// The dismissal comment associated with the dismissal of the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-dismissed-comment`.
        package typealias CodeScanningAlertDismissedComment = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule`.
        package struct CodeScanningAlertRule: Codable, Hashable, Sendable {
            /// A unique identifier for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/id`.
            package var id: Swift.String?
            /// The name of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/name`.
            package var name: Swift.String?
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            @frozen package enum SeverityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case note = "note"
                case warning = "warning"
                case error = "error"
            }
            /// The severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/severity`.
            package var severity: Components.Schemas.CodeScanningAlertRule.SeverityPayload?
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            @frozen package enum SecuritySeverityLevelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The security severity of the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/security_severity_level`.
            package var securitySeverityLevel: Components.Schemas.CodeScanningAlertRule.SecuritySeverityLevelPayload?
            /// A short description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/description`.
            package var description: Swift.String?
            /// description of the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/full_description`.
            package var fullDescription: Swift.String?
            /// A set of tags applicable for the rule.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/tags`.
            package var tags: [Swift.String]?
            /// Detailed documentation for the rule as GitHub Flavored Markdown.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help`.
            package var help: Swift.String?
            /// A link to the documentation for the rule used to detect the alert.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-rule/help_uri`.
            package var helpUri: Swift.String?
            /// Creates a new `CodeScanningAlertRule`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the rule used to detect the alert.
            ///   - name: The name of the rule used to detect the alert.
            ///   - severity: The severity of the alert.
            ///   - securitySeverityLevel: The security severity of the alert.
            ///   - description: A short description of the rule used to detect the alert.
            ///   - fullDescription: description of the rule used to detect the alert.
            ///   - tags: A set of tags applicable for the rule.
            ///   - help: Detailed documentation for the rule as GitHub Flavored Markdown.
            ///   - helpUri: A link to the documentation for the rule used to detect the alert.
            package init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                severity: Components.Schemas.CodeScanningAlertRule.SeverityPayload? = nil,
                securitySeverityLevel: Components.Schemas.CodeScanningAlertRule.SecuritySeverityLevelPayload? = nil,
                description: Swift.String? = nil,
                fullDescription: Swift.String? = nil,
                tags: [Swift.String]? = nil,
                help: Swift.String? = nil,
                helpUri: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.severity = severity
                self.securitySeverityLevel = securitySeverityLevel
                self.description = description
                self.fullDescription = fullDescription
                self.tags = tags
                self.help = help
                self.helpUri = helpUri
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case name
                case severity
                case securitySeverityLevel = "security_severity_level"
                case description
                case fullDescription = "full_description"
                case tags
                case help
                case helpUri = "help_uri"
            }
        }
        /// The version of the tool used to generate the code scanning analysis.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool-version`.
        package typealias CodeScanningAnalysisToolVersion = Swift.String
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool`.
        package struct CodeScanningAnalysisTool: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/name`.
            package var name: Components.Schemas.CodeScanningAnalysisToolName?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/version`.
            package var version: Components.Schemas.CodeScanningAnalysisToolVersion?
            /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-tool/guid`.
            package var guid: Components.Schemas.CodeScanningAnalysisToolGuid?
            /// Creates a new `CodeScanningAnalysisTool`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - version:
            ///   - guid:
            package init(
                name: Components.Schemas.CodeScanningAnalysisToolName? = nil,
                version: Components.Schemas.CodeScanningAnalysisToolVersion? = nil,
                guid: Components.Schemas.CodeScanningAnalysisToolGuid? = nil
            ) {
                self.name = name
                self.version = version
                self.guid = guid
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case version
                case guid
            }
        }
        /// The full Git reference, formatted as `refs/heads/<branch name>`,
        /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-ref`.
        package typealias CodeScanningRef = Swift.String
        /// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-analysis-key`.
        package typealias CodeScanningAnalysisAnalysisKey = Swift.String
        /// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-environment`.
        package typealias CodeScanningAlertEnvironment = Swift.String
        /// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-analysis-category`.
        package typealias CodeScanningAnalysisCategory = Swift.String
        /// Describe a region within a file for the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location`.
        package struct CodeScanningAlertLocation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/path`.
            package var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_line`.
            package var startLine: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_line`.
            package var endLine: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/start_column`.
            package var startColumn: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-location/end_column`.
            package var endColumn: Swift.Int?
            /// Creates a new `CodeScanningAlertLocation`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - startLine:
            ///   - endLine:
            ///   - startColumn:
            ///   - endColumn:
            package init(
                path: Swift.String? = nil,
                startLine: Swift.Int? = nil,
                endLine: Swift.Int? = nil,
                startColumn: Swift.Int? = nil,
                endColumn: Swift.Int? = nil
            ) {
                self.path = path
                self.startLine = startLine
                self.endLine = endLine
                self.startColumn = startColumn
                self.endColumn = endColumn
            }
            package enum CodingKeys: String, CodingKey {
                case path
                case startLine = "start_line"
                case endLine = "end_line"
                case startColumn = "start_column"
                case endColumn = "end_column"
            }
        }
        /// A classification of the file. For example to identify it as generated.
        ///
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-classification`.
        @frozen package enum CodeScanningAlertClassification: String, Codable, Hashable, Sendable, CaseIterable {
            case source = "source"
            case generated = "generated"
            case test = "test"
            case library = "library"
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance`.
        package struct CodeScanningAlertInstance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/ref`.
            package var ref: Components.Schemas.CodeScanningRef?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/analysis_key`.
            package var analysisKey: Components.Schemas.CodeScanningAnalysisAnalysisKey?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/environment`.
            package var environment: Components.Schemas.CodeScanningAlertEnvironment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/category`.
            package var category: Components.Schemas.CodeScanningAnalysisCategory?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/state`.
            package var state: Components.Schemas.CodeScanningAlertState?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/commit_sha`.
            package var commitSha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            package struct MessagePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message/text`.
                package var text: Swift.String?
                /// Creates a new `MessagePayload`.
                ///
                /// - Parameters:
                ///   - text:
                package init(text: Swift.String? = nil) {
                    self.text = text
                }
                package enum CodingKeys: String, CodingKey {
                    case text
                }
            }
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/message`.
            package var message: Components.Schemas.CodeScanningAlertInstance.MessagePayload?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/location`.
            package var location: Components.Schemas.CodeScanningAlertLocation?
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/html_url`.
            package var htmlUrl: Swift.String?
            /// Classifications that have been applied to the file that triggered the alert.
            /// For example identifying it as documentation, or a generated file.
            ///
            /// - Remark: Generated from `#/components/schemas/code-scanning-alert-instance/classifications`.
            package var classifications: [Components.Schemas.CodeScanningAlertClassification]?
            /// Creates a new `CodeScanningAlertInstance`.
            ///
            /// - Parameters:
            ///   - ref:
            ///   - analysisKey:
            ///   - environment:
            ///   - category:
            ///   - state:
            ///   - commitSha:
            ///   - message:
            ///   - location:
            ///   - htmlUrl:
            ///   - classifications: Classifications that have been applied to the file that triggered the alert.
            package init(
                ref: Components.Schemas.CodeScanningRef? = nil,
                analysisKey: Components.Schemas.CodeScanningAnalysisAnalysisKey? = nil,
                environment: Components.Schemas.CodeScanningAlertEnvironment? = nil,
                category: Components.Schemas.CodeScanningAnalysisCategory? = nil,
                state: Components.Schemas.CodeScanningAlertState? = nil,
                commitSha: Swift.String? = nil,
                message: Components.Schemas.CodeScanningAlertInstance.MessagePayload? = nil,
                location: Components.Schemas.CodeScanningAlertLocation? = nil,
                htmlUrl: Swift.String? = nil,
                classifications: [Components.Schemas.CodeScanningAlertClassification]? = nil
            ) {
                self.ref = ref
                self.analysisKey = analysisKey
                self.environment = environment
                self.category = category
                self.state = state
                self.commitSha = commitSha
                self.message = message
                self.location = location
                self.htmlUrl = htmlUrl
                self.classifications = classifications
            }
            package enum CodingKeys: String, CodingKey {
                case ref
                case analysisKey = "analysis_key"
                case environment
                case category
                case state
                case commitSha = "commit_sha"
                case message
                case location
                case htmlUrl = "html_url"
                case classifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items`.
        package struct CodeScanningOrganizationAlertItems: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/number`.
            package var number: Components.Schemas.AlertNumber
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/created_at`.
            package var createdAt: Components.Schemas.AlertCreatedAt
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/updated_at`.
            package var updatedAt: Components.Schemas.AlertUpdatedAt?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/url`.
            package var url: Components.Schemas.AlertUrl
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/html_url`.
            package var htmlUrl: Components.Schemas.AlertHtmlUrl
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/instances_url`.
            package var instancesUrl: Components.Schemas.AlertInstancesUrl
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/state`.
            package var state: Components.Schemas.CodeScanningAlertState
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/fixed_at`.
            package var fixedAt: Components.Schemas.AlertFixedAt?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_by`.
            package var dismissedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_at`.
            package var dismissedAt: Components.Schemas.AlertDismissedAt?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_reason`.
            package var dismissedReason: Components.Schemas.CodeScanningAlertDismissedReason?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/dismissed_comment`.
            package var dismissedComment: Components.Schemas.CodeScanningAlertDismissedComment?
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/rule`.
            package var rule: Components.Schemas.CodeScanningAlertRule
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/tool`.
            package var tool: Components.Schemas.CodeScanningAnalysisTool
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/most_recent_instance`.
            package var mostRecentInstance: Components.Schemas.CodeScanningAlertInstance
            /// - Remark: Generated from `#/components/schemas/code-scanning-organization-alert-items/repository`.
            package var repository: Components.Schemas.SimpleRepository
            /// Creates a new `CodeScanningOrganizationAlertItems`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - url:
            ///   - htmlUrl:
            ///   - instancesUrl:
            ///   - state:
            ///   - fixedAt:
            ///   - dismissedBy:
            ///   - dismissedAt:
            ///   - dismissedReason:
            ///   - dismissedComment:
            ///   - rule:
            ///   - tool:
            ///   - mostRecentInstance:
            ///   - repository:
            package init(
                number: Components.Schemas.AlertNumber,
                createdAt: Components.Schemas.AlertCreatedAt,
                updatedAt: Components.Schemas.AlertUpdatedAt? = nil,
                url: Components.Schemas.AlertUrl,
                htmlUrl: Components.Schemas.AlertHtmlUrl,
                instancesUrl: Components.Schemas.AlertInstancesUrl,
                state: Components.Schemas.CodeScanningAlertState,
                fixedAt: Components.Schemas.AlertFixedAt? = nil,
                dismissedBy: Components.Schemas.NullableSimpleUser? = nil,
                dismissedAt: Components.Schemas.AlertDismissedAt? = nil,
                dismissedReason: Components.Schemas.CodeScanningAlertDismissedReason? = nil,
                dismissedComment: Components.Schemas.CodeScanningAlertDismissedComment? = nil,
                rule: Components.Schemas.CodeScanningAlertRule,
                tool: Components.Schemas.CodeScanningAnalysisTool,
                mostRecentInstance: Components.Schemas.CodeScanningAlertInstance,
                repository: Components.Schemas.SimpleRepository
            ) {
                self.number = number
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.url = url
                self.htmlUrl = htmlUrl
                self.instancesUrl = instancesUrl
                self.state = state
                self.fixedAt = fixedAt
                self.dismissedBy = dismissedBy
                self.dismissedAt = dismissedAt
                self.dismissedReason = dismissedReason
                self.dismissedComment = dismissedComment
                self.rule = rule
                self.tool = tool
                self.mostRecentInstance = mostRecentInstance
                self.repository = repository
            }
            package enum CodingKeys: String, CodingKey {
                case number
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case url
                case htmlUrl = "html_url"
                case instancesUrl = "instances_url"
                case state
                case fixedAt = "fixed_at"
                case dismissedBy = "dismissed_by"
                case dismissedAt = "dismissed_at"
                case dismissedReason = "dismissed_reason"
                case dismissedComment = "dismissed_comment"
                case rule
                case tool
                case mostRecentInstance = "most_recent_instance"
                case repository
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        package struct NullableTeamSimple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            package var nodeId: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            package var membersUrl: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            package var ldapDn: Swift.String?
            /// Creates a new `NullableTeamSimple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - nodeId:
            ///   - url: URL for the team
            ///   - membersUrl:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notificationSetting: The notification setting the team has set
            ///   - htmlUrl:
            ///   - repositoriesUrl:
            ///   - slug:
            ///   - ldapDn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                membersUrl: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                htmlUrl: Swift.String,
                repositoriesUrl: Swift.String,
                slug: Swift.String,
                ldapDn: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.membersUrl = membersUrl
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.htmlUrl = htmlUrl
                self.repositoriesUrl = repositoriesUrl
                self.slug = slug
                self.ldapDn = ldapDn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case membersUrl = "members_url"
                case name
                case description
                case permission
                case privacy
                case notificationSetting = "notification_setting"
                case htmlUrl = "html_url"
                case repositoriesUrl = "repositories_url"
                case slug
                case ldapDn = "ldap_dn"
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        package struct Team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            package var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            package var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            package var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                package var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                package var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                package var admin: Swift.Bool
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                package init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                package enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package var permissions: Components.Schemas.Team.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            package var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            package var parent: Components.Schemas.NullableTeamSimple?
            /// Creates a new `Team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notificationSetting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - htmlUrl:
            ///   - membersUrl:
            ///   - repositoriesUrl:
            ///   - parent:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.Team.PermissionsPayload? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                membersUrl: Swift.String,
                repositoriesUrl: Swift.String,
                parent: Components.Schemas.NullableTeamSimple? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.htmlUrl = htmlUrl
                self.membersUrl = membersUrl
                self.repositoriesUrl = repositoriesUrl
                self.parent = parent
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case slug
                case description
                case privacy
                case notificationSetting = "notification_setting"
                case permission
                case permissions
                case url
                case htmlUrl = "html_url"
                case membersUrl = "members_url"
                case repositoriesUrl = "repositories_url"
                case parent
            }
        }
        /// Projects are a way to organize columns and cards of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project`.
        package struct Project: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project/owner_url`.
            package var ownerUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/columns_url`.
            package var columnsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project/node_id`.
            package var nodeId: Swift.String
            /// Name of the project
            ///
            /// - Remark: Generated from `#/components/schemas/project/name`.
            package var name: Swift.String
            /// Body of the project
            ///
            /// - Remark: Generated from `#/components/schemas/project/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project/number`.
            package var number: Swift.Int
            /// State of the project; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/project/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/project/creator`.
            package var creator: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/project/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project/updated_at`.
            package var updatedAt: Foundation.Date
            /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/organization_permission`.
            @frozen package enum OrganizationPermissionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
                case none = "none"
            }
            /// The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/organization_permission`.
            package var organizationPermission: Components.Schemas.Project.OrganizationPermissionPayload?
            /// Whether or not this project can be seen by everyone. Only present if owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/project/private`.
            package var _private: Swift.Bool?
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - ownerUrl:
            ///   - url:
            ///   - htmlUrl:
            ///   - columnsUrl:
            ///   - id:
            ///   - nodeId:
            ///   - name: Name of the project
            ///   - body: Body of the project
            ///   - number:
            ///   - state: State of the project; either 'open' or 'closed'
            ///   - creator:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - organizationPermission: The baseline permission that all organization members have on this project. Only present if owner is an organization.
            ///   - _private: Whether or not this project can be seen by everyone. Only present if owner is an organization.
            package init(
                ownerUrl: Swift.String,
                url: Swift.String,
                htmlUrl: Swift.String,
                columnsUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                body: Swift.String? = nil,
                number: Swift.Int,
                state: Swift.String,
                creator: Components.Schemas.NullableSimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                organizationPermission: Components.Schemas.Project.OrganizationPermissionPayload? = nil,
                _private: Swift.Bool? = nil
            ) {
                self.ownerUrl = ownerUrl
                self.url = url
                self.htmlUrl = htmlUrl
                self.columnsUrl = columnsUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.body = body
                self.number = number
                self.state = state
                self.creator = creator
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.organizationPermission = organizationPermission
                self._private = _private
            }
            package enum CodingKeys: String, CodingKey {
                case ownerUrl = "owner_url"
                case url
                case htmlUrl = "html_url"
                case columnsUrl = "columns_url"
                case id
                case nodeId = "node_id"
                case name
                case body
                case number
                case state
                case creator
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case organizationPermission = "organization_permission"
                case _private = "private"
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        package struct TeamSimple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            package var nodeId: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            package var membersUrl: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            package var ldapDn: Swift.String?
            /// Creates a new `TeamSimple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - nodeId:
            ///   - url: URL for the team
            ///   - membersUrl:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notificationSetting: The notification setting the team has set
            ///   - htmlUrl:
            ///   - repositoriesUrl:
            ///   - slug:
            ///   - ldapDn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                membersUrl: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                htmlUrl: Swift.String,
                repositoriesUrl: Swift.String,
                slug: Swift.String,
                ldapDn: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.membersUrl = membersUrl
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.htmlUrl = htmlUrl
                self.repositoriesUrl = repositoriesUrl
                self.slug = slug
                self.ldapDn = ldapDn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case membersUrl = "members_url"
                case name
                case description
                case permission
                case privacy
                case notificationSetting = "notification_setting"
                case htmlUrl = "html_url"
                case repositoriesUrl = "repositories_url"
                case slug
                case ldapDn = "ldap_dn"
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        package struct NullableRepository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            package var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            package var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            package var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/organization`.
            package var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                package init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            package var permissions: Components.Schemas.NullableRepository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            package var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            package var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            package var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            package var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            package var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            package var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            package var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            package var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            package var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            package var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            package var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            package var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            package var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            package var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            package var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            package var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            package var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            package var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            package var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            package var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            package var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            package var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            package var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            package var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            package var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            package var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            package var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            package var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            package var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            package var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            package var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            package var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            package var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            package var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            package var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            package var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            package var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            package var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            package var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            package var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            package var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            package var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            package var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            package var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            package var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            package var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            package var hasDownloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            package var hasDiscussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            package var pushedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            package var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            package var updatedAt: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            package var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            package struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/id`.
                package var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/node_id`.
                package var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/full_name`.
                package var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                package struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/login`.
                    package var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/id`.
                    package var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/node_id`.
                    package var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/avatar_url`.
                    package var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gravatar_id`.
                    package var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/html_url`.
                    package var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/followers_url`.
                    package var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/following_url`.
                    package var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/gists_url`.
                    package var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/starred_url`.
                    package var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/subscriptions_url`.
                    package var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/organizations_url`.
                    package var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/repos_url`.
                    package var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/events_url`.
                    package var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/received_events_url`.
                    package var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/type`.
                    package var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner/site_admin`.
                    package var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    package init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    package enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/owner`.
                package var owner: Components.Schemas.NullableRepository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/private`.
                package var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/html_url`.
                package var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/fork`.
                package var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/url`.
                package var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archive_url`.
                package var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/assignees_url`.
                package var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/blobs_url`.
                package var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/branches_url`.
                package var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/collaborators_url`.
                package var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/comments_url`.
                package var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/commits_url`.
                package var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/compare_url`.
                package var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contents_url`.
                package var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/contributors_url`.
                package var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/deployments_url`.
                package var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/downloads_url`.
                package var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/events_url`.
                package var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_url`.
                package var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_commits_url`.
                package var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_refs_url`.
                package var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_tags_url`.
                package var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/git_url`.
                package var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_comment_url`.
                package var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issue_events_url`.
                package var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/issues_url`.
                package var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/keys_url`.
                package var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/labels_url`.
                package var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/languages_url`.
                package var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merges_url`.
                package var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/milestones_url`.
                package var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/notifications_url`.
                package var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pulls_url`.
                package var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/releases_url`.
                package var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/ssh_url`.
                package var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_url`.
                package var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/statuses_url`.
                package var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_url`.
                package var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscription_url`.
                package var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/tags_url`.
                package var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/teams_url`.
                package var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/trees_url`.
                package var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/clone_url`.
                package var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/mirror_url`.
                package var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/hooks_url`.
                package var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/svn_url`.
                package var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/homepage`.
                package var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/language`.
                package var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/forks_count`.
                package var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/stargazers_count`.
                package var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/watchers_count`.
                package var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/size`.
                package var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/default_branch`.
                package var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/open_issues_count`.
                package var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/is_template`.
                package var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/topics`.
                package var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_issues`.
                package var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_projects`.
                package var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_wiki`.
                package var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_pages`.
                package var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/has_downloads`.
                package var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/archived`.
                package var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/disabled`.
                package var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/visibility`.
                package var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/pushed_at`.
                package var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/created_at`.
                package var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/updated_at`.
                package var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                package struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/admin`.
                    package var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/maintain`.
                    package var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/push`.
                    package var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/triage`.
                    package var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions/pull`.
                    package var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    package init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    package enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/permissions`.
                package var permissions: Components.Schemas.NullableRepository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_rebase_merge`.
                package var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/temp_clone_token`.
                package var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_squash_merge`.
                package var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_auto_merge`.
                package var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/delete_branch_on_merge`.
                package var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_update_branch`.
                package var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/use_squash_pr_title_as_default`.
                package var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_title`.
                package var squashMergeCommitTitle: Components.Schemas.NullableRepository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/squash_merge_commit_message`.
                package var squashMergeCommitMessage: Components.Schemas.NullableRepository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_title`.
                package var mergeCommitTitle: Components.Schemas.NullableRepository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/merge_commit_message`.
                package var mergeCommitMessage: Components.Schemas.NullableRepository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/allow_merge_commit`.
                package var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/subscribers_count`.
                package var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository/network_count`.
                package var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                package init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.NullableRepository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.NullableRepository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.NullableRepository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.NullableRepository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.NullableRepository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.NullableRepository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/template_repository`.
            package var templateRepository: Components.Schemas.NullableRepository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            package var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            package var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            package var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            package var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            package var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            package var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            package var squashMergeCommitTitle: Components.Schemas.NullableRepository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            package var squashMergeCommitMessage: Components.Schemas.NullableRepository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            package var mergeCommitTitle: Components.Schemas.NullableRepository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            package var mergeCommitMessage: Components.Schemas.NullableRepository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            package var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            package var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            package var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_count`.
            package var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/network_count`.
            package var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            package var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            package var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            package var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            package var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `NullableRepository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - hasDiscussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.NullableRepository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                hasDiscussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.NullableRepository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.NullableRepository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.NullableRepository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.NullableRepository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.NullableRepository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.hasDiscussions = hasDiscussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case hasDiscussions = "has_discussions"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Project cards represent a scope of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project-card`.
        package struct ProjectCard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-card/url`.
            package var url: Swift.String
            /// The project card's ID
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project-card/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/note`.
            package var note: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/creator`.
            package var creator: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/project-card/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project-card/updated_at`.
            package var updatedAt: Foundation.Date
            /// Whether or not the card is archived
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/archived`.
            package var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/project-card/column_name`.
            package var columnName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_id`.
            package var projectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/column_url`.
            package var columnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/content_url`.
            package var contentUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_url`.
            package var projectUrl: Swift.String
            /// Creates a new `ProjectCard`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: The project card's ID
            ///   - nodeId:
            ///   - note:
            ///   - creator:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - archived: Whether or not the card is archived
            ///   - columnName:
            ///   - projectId:
            ///   - columnUrl:
            ///   - contentUrl:
            ///   - projectUrl:
            package init(
                url: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                note: Swift.String? = nil,
                creator: Components.Schemas.NullableSimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                archived: Swift.Bool? = nil,
                columnName: Swift.String? = nil,
                projectId: Swift.String? = nil,
                columnUrl: Swift.String,
                contentUrl: Swift.String? = nil,
                projectUrl: Swift.String
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.note = note
                self.creator = creator
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.archived = archived
                self.columnName = columnName
                self.projectId = projectId
                self.columnUrl = columnUrl
                self.contentUrl = contentUrl
                self.projectUrl = projectUrl
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case note
                case creator
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case archived
                case columnName = "column_name"
                case projectId = "project_id"
                case columnUrl = "column_url"
                case contentUrl = "content_url"
                case projectUrl = "project_url"
            }
        }
        /// Project columns contain cards of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project-column`.
        package struct ProjectColumn: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-column/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/project_url`.
            package var projectUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/cards_url`.
            package var cardsUrl: Swift.String
            /// The unique identifier of the project column
            ///
            /// - Remark: Generated from `#/components/schemas/project-column/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/project-column/node_id`.
            package var nodeId: Swift.String
            /// Name of the project column
            ///
            /// - Remark: Generated from `#/components/schemas/project-column/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-column/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project-column/updated_at`.
            package var updatedAt: Foundation.Date
            /// Creates a new `ProjectColumn`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - projectUrl:
            ///   - cardsUrl:
            ///   - id: The unique identifier of the project column
            ///   - nodeId:
            ///   - name: Name of the project column
            ///   - createdAt:
            ///   - updatedAt:
            package init(
                url: Swift.String,
                projectUrl: Swift.String,
                cardsUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date
            ) {
                self.url = url
                self.projectUrl = projectUrl
                self.cardsUrl = cardsUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case projectUrl = "project_url"
                case cardsUrl = "cards_url"
                case id
                case nodeId = "node_id"
                case name
                case createdAt = "created_at"
                case updatedAt = "updated_at"
            }
        }
        /// Project Collaborator Permission
        ///
        /// - Remark: Generated from `#/components/schemas/project-collaborator-permission`.
        package struct ProjectCollaboratorPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-collaborator-permission/permission`.
            package var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-collaborator-permission/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// Creates a new `ProjectCollaboratorPermission`.
            ///
            /// - Parameters:
            ///   - permission:
            ///   - user:
            package init(
                permission: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil
            ) {
                self.permission = permission
                self.user = user
            }
            package enum CodingKeys: String, CodingKey {
                case permission
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/rate-limit`.
        package struct RateLimit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/rate-limit/limit`.
            package var limit: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/remaining`.
            package var remaining: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/reset`.
            package var reset: Swift.Int
            /// - Remark: Generated from `#/components/schemas/rate-limit/used`.
            package var used: Swift.Int
            /// Creates a new `RateLimit`.
            ///
            /// - Parameters:
            ///   - limit:
            ///   - remaining:
            ///   - reset:
            ///   - used:
            package init(
                limit: Swift.Int,
                remaining: Swift.Int,
                reset: Swift.Int,
                used: Swift.Int
            ) {
                self.limit = limit
                self.remaining = remaining
                self.reset = reset
                self.used = used
            }
            package enum CodingKeys: String, CodingKey {
                case limit
                case remaining
                case reset
                case used
            }
        }
        /// Rate Limit Overview
        ///
        /// - Remark: Generated from `#/components/schemas/rate-limit-overview`.
        package struct RateLimitOverview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources`.
            package struct ResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/core`.
                package var core: Components.Schemas.RateLimit
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/graphql`.
                package var graphql: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/search`.
                package var search: Components.Schemas.RateLimit
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/code_search`.
                package var codeSearch: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/source_import`.
                package var sourceImport: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/integration_manifest`.
                package var integrationManifest: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/code_scanning_upload`.
                package var codeScanningUpload: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/actions_runner_registration`.
                package var actionsRunnerRegistration: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/scim`.
                package var scim: Components.Schemas.RateLimit?
                /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources/dependency_snapshots`.
                package var dependencySnapshots: Components.Schemas.RateLimit?
                /// Creates a new `ResourcesPayload`.
                ///
                /// - Parameters:
                ///   - core:
                ///   - graphql:
                ///   - search:
                ///   - codeSearch:
                ///   - sourceImport:
                ///   - integrationManifest:
                ///   - codeScanningUpload:
                ///   - actionsRunnerRegistration:
                ///   - scim:
                ///   - dependencySnapshots:
                package init(
                    core: Components.Schemas.RateLimit,
                    graphql: Components.Schemas.RateLimit? = nil,
                    search: Components.Schemas.RateLimit,
                    codeSearch: Components.Schemas.RateLimit? = nil,
                    sourceImport: Components.Schemas.RateLimit? = nil,
                    integrationManifest: Components.Schemas.RateLimit? = nil,
                    codeScanningUpload: Components.Schemas.RateLimit? = nil,
                    actionsRunnerRegistration: Components.Schemas.RateLimit? = nil,
                    scim: Components.Schemas.RateLimit? = nil,
                    dependencySnapshots: Components.Schemas.RateLimit? = nil
                ) {
                    self.core = core
                    self.graphql = graphql
                    self.search = search
                    self.codeSearch = codeSearch
                    self.sourceImport = sourceImport
                    self.integrationManifest = integrationManifest
                    self.codeScanningUpload = codeScanningUpload
                    self.actionsRunnerRegistration = actionsRunnerRegistration
                    self.scim = scim
                    self.dependencySnapshots = dependencySnapshots
                }
                package enum CodingKeys: String, CodingKey {
                    case core
                    case graphql
                    case search
                    case codeSearch = "code_search"
                    case sourceImport = "source_import"
                    case integrationManifest = "integration_manifest"
                    case codeScanningUpload = "code_scanning_upload"
                    case actionsRunnerRegistration = "actions_runner_registration"
                    case scim
                    case dependencySnapshots = "dependency_snapshots"
                }
            }
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/resources`.
            package var resources: Components.Schemas.RateLimitOverview.ResourcesPayload
            /// - Remark: Generated from `#/components/schemas/rate-limit-overview/rate`.
            package var rate: Components.Schemas.RateLimit
            /// Creates a new `RateLimitOverview`.
            ///
            /// - Parameters:
            ///   - resources:
            ///   - rate:
            package init(
                resources: Components.Schemas.RateLimitOverview.ResourcesPayload,
                rate: Components.Schemas.RateLimit
            ) {
                self.resources = resources
                self.rate = rate
            }
            package enum CodingKeys: String, CodingKey {
                case resources
                case rate
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        package struct CodeOfConductSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            package var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            package var htmlUrl: Swift.String?
            /// Creates a new `CodeOfConductSimple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - htmlUrl:
            package init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.htmlUrl = htmlUrl
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case htmlUrl = "html_url"
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        package struct FullRepository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            package var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            package var owner: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            package var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            package var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            package var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            package var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            package var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            package var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            package var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            package var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            package var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            package var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            package var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            package var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            package var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            package var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            package var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            package var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            package var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            package var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            package var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            package var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            package var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            package var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            package var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            package var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            package var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            package var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            package var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            package var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            package var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            package var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            package var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            package var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            package var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            package var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            package var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            package var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            package var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            package var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            package var openIssuesCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            package var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            package var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            package var hasIssues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            package var hasProjects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            package var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            package var hasPages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            package var hasDownloads: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            package var hasDiscussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            package var pushedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                package var pull: Swift.Bool
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                package init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            package var permissions: Components.Schemas.FullRepository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            package var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            package var templateRepository: Components.Schemas.NullableRepository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            package var tempCloneToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            package var allowSquashMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            package var allowAutoMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            package var deleteBranchOnMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            package var allowMergeCommit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            package var allowUpdateBranch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            package var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            package var squashMergeCommitTitle: Components.Schemas.FullRepository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            package var squashMergeCommitMessage: Components.Schemas.FullRepository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            package var mergeCommitTitle: Components.Schemas.FullRepository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            package var mergeCommitMessage: Components.Schemas.FullRepository.MergeCommitMessagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            package var allowForking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            package var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            package var subscribersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            package var networkCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            package var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            package var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            package var parent: Components.Schemas.Repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            package var source: Components.Schemas.Repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            package var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            package var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            package var anonymousAccessEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            package var codeOfConduct: Components.Schemas.CodeOfConductSimple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            package var securityAndAnalysis: Components.Schemas.SecurityAndAnalysis?
            /// Creates a new `FullRepository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - name:
            ///   - fullName:
            ///   - owner:
            ///   - _private:
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch:
            ///   - openIssuesCount:
            ///   - isTemplate:
            ///   - topics:
            ///   - hasIssues:
            ///   - hasProjects:
            ///   - hasWiki:
            ///   - hasPages:
            ///   - hasDownloads:
            ///   - hasDiscussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - permissions:
            ///   - allowRebaseMerge:
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge:
            ///   - allowAutoMerge:
            ///   - deleteBranchOnMerge:
            ///   - allowMergeCommit:
            ///   - allowUpdateBranch:
            ///   - useSquashPrTitleAsDefault:
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowForking:
            ///   - webCommitSignoffRequired:
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - masterBranch:
            ///   - openIssues:
            ///   - watchers:
            ///   - anonymousAccessEnabled: Whether anonymous git access is allowed.
            ///   - codeOfConduct:
            ///   - securityAndAnalysis:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                hasDiscussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Foundation.Date,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                permissions: Components.Schemas.FullRepository.PermissionsPayload? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.NullableRepository? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.FullRepository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.FullRepository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.FullRepository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.FullRepository.MergeCommitMessagePayload? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int,
                networkCount: Swift.Int,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                parent: Components.Schemas.Repository? = nil,
                source: Components.Schemas.Repository? = nil,
                forks: Swift.Int,
                masterBranch: Swift.String? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                anonymousAccessEnabled: Swift.Bool? = nil,
                codeOfConduct: Components.Schemas.CodeOfConductSimple? = nil,
                securityAndAnalysis: Components.Schemas.SecurityAndAnalysis? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.hasDiscussions = hasDiscussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.permissions = permissions
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowMergeCommit = allowMergeCommit
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.masterBranch = masterBranch
                self.openIssues = openIssues
                self.watchers = watchers
                self.anonymousAccessEnabled = anonymousAccessEnabled
                self.codeOfConduct = codeOfConduct
                self.securityAndAnalysis = securityAndAnalysis
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case hasDiscussions = "has_discussions"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case permissions
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowMergeCommit = "allow_merge_commit"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case license
                case organization
                case parent
                case source
                case forks
                case masterBranch = "master_branch"
                case openIssues = "open_issues"
                case watchers
                case anonymousAccessEnabled = "anonymous_access_enabled"
                case codeOfConduct = "code_of_conduct"
                case securityAndAnalysis = "security_and_analysis"
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        package struct NullableGitUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            package var date: Swift.String?
            /// Creates a new `NullableGitUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        package struct Verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            package var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            package var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            package var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            package var signature: Swift.String?
            /// Creates a new `Verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            package init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
            }
            package enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        package struct DiffEntry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            package var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case added = "added"
                case removed = "removed"
                case modified = "modified"
                case renamed = "renamed"
                case copied = "copied"
                case changed = "changed"
                case unchanged = "unchanged"
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            package var status: Components.Schemas.DiffEntry.StatusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            package var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            package var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            package var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            package var blobUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            package var rawUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            package var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            package var previousFilename: Swift.String?
            /// Creates a new `DiffEntry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blobUrl:
            ///   - rawUrl:
            ///   - contentsUrl:
            ///   - patch:
            ///   - previousFilename:
            package init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.DiffEntry.StatusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blobUrl: Swift.String,
                rawUrl: Swift.String,
                contentsUrl: Swift.String,
                patch: Swift.String? = nil,
                previousFilename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blobUrl = blobUrl
                self.rawUrl = rawUrl
                self.contentsUrl = contentsUrl
                self.patch = patch
                self.previousFilename = previousFilename
            }
            package enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blobUrl = "blob_url"
                case rawUrl = "raw_url"
                case contentsUrl = "contents_url"
                case patch
                case previousFilename = "previous_filename"
            }
        }
        /// Commit
        ///
        /// - Remark: Generated from `#/components/schemas/commit`.
        package struct Commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package struct CommitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/commit/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/author`.
                package var author: Components.Schemas.NullableGitUser?
                /// - Remark: Generated from `#/components/schemas/commit/commit/committer`.
                package var committer: Components.Schemas.NullableGitUser?
                /// - Remark: Generated from `#/components/schemas/commit/commit/message`.
                package var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/comment_count`.
                package var commentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package struct TreePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/sha`.
                    package var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/url`.
                    package var url: Swift.String
                    /// Creates a new `TreePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    package init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package var tree: Components.Schemas.Commit.CommitPayload.TreePayload
                /// - Remark: Generated from `#/components/schemas/commit/commit/verification`.
                package var verification: Components.Schemas.Verification?
                /// Creates a new `CommitPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - commentCount:
                ///   - tree:
                ///   - verification:
                package init(
                    url: Swift.String,
                    author: Components.Schemas.NullableGitUser? = nil,
                    committer: Components.Schemas.NullableGitUser? = nil,
                    message: Swift.String,
                    commentCount: Swift.Int,
                    tree: Components.Schemas.Commit.CommitPayload.TreePayload,
                    verification: Components.Schemas.Verification? = nil
                ) {
                    self.url = url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.commentCount = commentCount
                    self.tree = tree
                    self.verification = verification
                }
                package enum CodingKeys: String, CodingKey {
                    case url
                    case author
                    case committer
                    case message
                    case commentCount = "comment_count"
                    case tree
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package var commit: Components.Schemas.Commit.CommitPayload
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            package var author: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            package var committer: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload`.
            package struct ParentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/html_url`.
                package var htmlUrl: Swift.String?
                /// Creates a new `ParentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                ///   - htmlUrl:
                package init(
                    sha: Swift.String,
                    url: Swift.String,
                    htmlUrl: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.url = url
                    self.htmlUrl = htmlUrl
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case htmlUrl = "html_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package typealias ParentsPayload = [Components.Schemas.Commit.ParentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package var parents: Components.Schemas.Commit.ParentsPayload
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package struct StatsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/stats/additions`.
                package var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/deletions`.
                package var deletions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/total`.
                package var total: Swift.Int?
                /// Creates a new `StatsPayload`.
                ///
                /// - Parameters:
                ///   - additions:
                ///   - deletions:
                ///   - total:
                package init(
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.additions = additions
                    self.deletions = deletions
                    self.total = total
                }
                package enum CodingKeys: String, CodingKey {
                    case additions
                    case deletions
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package var stats: Components.Schemas.Commit.StatsPayload?
            /// - Remark: Generated from `#/components/schemas/commit/files`.
            package var files: [Components.Schemas.DiffEntry]?
            /// Creates a new `Commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - commentsUrl:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - stats:
            ///   - files:
            package init(
                url: Swift.String,
                sha: Swift.String,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                commentsUrl: Swift.String,
                commit: Components.Schemas.Commit.CommitPayload,
                author: Components.Schemas.NullableSimpleUser? = nil,
                committer: Components.Schemas.NullableSimpleUser? = nil,
                parents: Components.Schemas.Commit.ParentsPayload,
                stats: Components.Schemas.Commit.StatsPayload? = nil,
                files: [Components.Schemas.DiffEntry]? = nil
            ) {
                self.url = url
                self.sha = sha
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.commentsUrl = commentsUrl
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.stats = stats
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case sha
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case commentsUrl = "comments_url"
                case commit
                case author
                case committer
                case parents
                case stats
                case files
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-commit`.
        package struct SimpleCommit: Codable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/id`.
            package var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/tree_id`.
            package var treeId: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/message`.
            package var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/timestamp`.
            package var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package struct AuthorPayload: Codable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/name`.
                package var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/email`.
                package var email: Swift.String?
                /// Creates a new `AuthorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                package init(
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package var author: Components.Schemas.SimpleCommit.AuthorPayload?
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package struct CommitterPayload: Codable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/name`.
                package var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/email`.
                package var email: Swift.String?
                /// Creates a new `CommitterPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                package init(
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package var committer: Components.Schemas.SimpleCommit.CommitterPayload
            /// Creates a new `SimpleCommit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - treeId: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            package init(
                id: Swift.String,
                treeId: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.SimpleCommit.AuthorPayload? = nil,
                committer: Components.Schemas.SimpleCommit.CommitterPayload
            ) {
                self.id = id
                self.treeId = treeId
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case treeId = "tree_id"
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// Commit Comment
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comment`.
        package struct CommitComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comment/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comment/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/path`.
            package var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/commit-comment/position`.
            package var position: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/line`.
            package var line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/commit_id`.
            package var commitId: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/commit-comment/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/commit-comment/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `CommitComment`.
            ///
            /// - Parameters:
            ///   - htmlUrl:
            ///   - url:
            ///   - id:
            ///   - nodeId:
            ///   - body:
            ///   - path:
            ///   - position:
            ///   - line:
            ///   - commitId:
            ///   - user:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - authorAssociation:
            ///   - reactions:
            package init(
                htmlUrl: Swift.String,
                url: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                body: Swift.String,
                path: Swift.String? = nil,
                position: Swift.Int? = nil,
                line: Swift.Int? = nil,
                commitId: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                authorAssociation: Components.Schemas.AuthorAssociation,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.htmlUrl = htmlUrl
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.body = body
                self.path = path
                self.position = position
                self.line = line
                self.commitId = commitId
                self.user = user
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.authorAssociation = authorAssociation
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case htmlUrl = "html_url"
                case url
                case id
                case nodeId = "node_id"
                case body
                case path
                case position
                case line
                case commitId = "commit_id"
                case user
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case authorAssociation = "author_association"
                case reactions
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        package struct Link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            package var href: Swift.String
            /// Creates a new `Link`.
            ///
            /// - Parameters:
            ///   - href:
            package init(href: Swift.String) {
                self.href = href
            }
            package enum CodingKeys: String, CodingKey {
                case href
            }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        package struct AutoMerge: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            package var enabledBy: Components.Schemas.SimpleUser
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen package enum MergeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case merge = "merge"
                case squash = "squash"
                case rebase = "rebase"
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            package var mergeMethod: Components.Schemas.AutoMerge.MergeMethodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            package var commitTitle: Swift.String?
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            package var commitMessage: Swift.String?
            /// Creates a new `AutoMerge`.
            ///
            /// - Parameters:
            ///   - enabledBy:
            ///   - mergeMethod: The merge method to use.
            ///   - commitTitle: Title for the merge commit message.
            ///   - commitMessage: Commit message for the merge commit.
            package init(
                enabledBy: Components.Schemas.SimpleUser,
                mergeMethod: Components.Schemas.AutoMerge.MergeMethodPayload,
                commitTitle: Swift.String? = nil,
                commitMessage: Swift.String? = nil
            ) {
                self.enabledBy = enabledBy
                self.mergeMethod = mergeMethod
                self.commitTitle = commitTitle
                self.commitMessage = commitMessage
            }
            package enum CodingKeys: String, CodingKey {
                case enabledBy = "enabled_by"
                case mergeMethod = "merge_method"
                case commitTitle = "commit_title"
                case commitMessage = "commit_message"
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        package struct PullRequestSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            package var reviewCommentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            package var reviewCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            package var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload`.
            package struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/node_id`.
                package var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/description`.
                package var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `LabelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    nodeId: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package typealias LabelsPayload = [Components.Schemas.PullRequestSimple.LabelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package var labels: Components.Schemas.PullRequestSimple.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            package var mergedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            package var mergeCommitSha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            package var requestedReviewers: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            package var requestedTeams: [Components.Schemas.Team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package struct HeadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                package var repo: Components.Schemas.Repository?
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                package var user: Components.Schemas.NullableSimpleUser?
                /// Creates a new `HeadPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository? = nil,
                    sha: Swift.String,
                    user: Components.Schemas.NullableSimpleUser? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package var head: Components.Schemas.PullRequestSimple.HeadPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package struct BasePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                package var repo: Components.Schemas.Repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                package var user: Components.Schemas.NullableSimpleUser?
                /// Creates a new `BasePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository,
                    sha: Swift.String,
                    user: Components.Schemas.NullableSimpleUser? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package var base: Components.Schemas.PullRequestSimple.BasePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                package var comments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                package var commits: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                package var statuses: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                package var html: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                package var issue: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                package var reviewComments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                package var reviewComment: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                package var _self: Components.Schemas.Link
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - reviewComments:
                ///   - reviewComment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.Link,
                    commits: Components.Schemas.Link,
                    statuses: Components.Schemas.Link,
                    html: Components.Schemas.Link,
                    issue: Components.Schemas.Link,
                    reviewComments: Components.Schemas.Link,
                    reviewComment: Components.Schemas.Link,
                    _self: Components.Schemas.Link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.reviewComments = reviewComments
                    self.reviewComment = reviewComment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case reviewComments = "review_comments"
                    case reviewComment = "review_comment"
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package var _links: Components.Schemas.PullRequestSimple._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            package var autoMerge: Components.Schemas.AutoMerge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            package var draft: Swift.Bool?
            /// Creates a new `PullRequestSimple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - issueUrl:
            ///   - commitsUrl:
            ///   - reviewCommentsUrl:
            ///   - reviewCommentUrl:
            ///   - commentsUrl:
            ///   - statusesUrl:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - activeLockReason:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - mergedAt:
            ///   - mergeCommitSha:
            ///   - assignee:
            ///   - assignees:
            ///   - requestedReviewers:
            ///   - requestedTeams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - authorAssociation:
            ///   - autoMerge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            package init(
                url: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                issueUrl: Swift.String,
                commitsUrl: Swift.String,
                reviewCommentsUrl: Swift.String,
                reviewCommentUrl: Swift.String,
                commentsUrl: Swift.String,
                statusesUrl: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                body: Swift.String? = nil,
                labels: Components.Schemas.PullRequestSimple.LabelsPayload,
                milestone: Components.Schemas.NullableMilestone? = nil,
                activeLockReason: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                mergedAt: Foundation.Date? = nil,
                mergeCommitSha: Swift.String? = nil,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                requestedReviewers: [Components.Schemas.SimpleUser]? = nil,
                requestedTeams: [Components.Schemas.Team]? = nil,
                head: Components.Schemas.PullRequestSimple.HeadPayload,
                base: Components.Schemas.PullRequestSimple.BasePayload,
                _links: Components.Schemas.PullRequestSimple._LinksPayload,
                authorAssociation: Components.Schemas.AuthorAssociation,
                autoMerge: Components.Schemas.AutoMerge? = nil,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.issueUrl = issueUrl
                self.commitsUrl = commitsUrl
                self.reviewCommentsUrl = reviewCommentsUrl
                self.reviewCommentUrl = reviewCommentUrl
                self.commentsUrl = commentsUrl
                self.statusesUrl = statusesUrl
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.activeLockReason = activeLockReason
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.mergedAt = mergedAt
                self.mergeCommitSha = mergeCommitSha
                self.assignee = assignee
                self.assignees = assignees
                self.requestedReviewers = requestedReviewers
                self.requestedTeams = requestedTeams
                self.head = head
                self.base = base
                self._links = _links
                self.authorAssociation = authorAssociation
                self.autoMerge = autoMerge
                self.draft = draft
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case issueUrl = "issue_url"
                case commitsUrl = "commits_url"
                case reviewCommentsUrl = "review_comments_url"
                case reviewCommentUrl = "review_comment_url"
                case commentsUrl = "comments_url"
                case statusesUrl = "statuses_url"
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case activeLockReason = "active_lock_reason"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case mergedAt = "merged_at"
                case mergeCommitSha = "merge_commit_sha"
                case assignee
                case assignees
                case requestedReviewers = "requested_reviewers"
                case requestedTeams = "requested_teams"
                case head
                case base
                case _links
                case authorAssociation = "author_association"
                case autoMerge = "auto_merge"
                case draft
            }
        }
        /// Commit Comparison
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comparison`.
        package struct CommitComparison: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comparison/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/permalink_url`.
            package var permalinkUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/base_commit`.
            package var baseCommit: Components.Schemas.Commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/merge_base_commit`.
            package var mergeBaseCommit: Components.Schemas.Commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case diverged = "diverged"
                case ahead = "ahead"
                case behind = "behind"
                case identical = "identical"
            }
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            package var status: Components.Schemas.CommitComparison.StatusPayload
            /// - Remark: Generated from `#/components/schemas/commit-comparison/ahead_by`.
            package var aheadBy: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/behind_by`.
            package var behindBy: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/total_commits`.
            package var totalCommits: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/commits`.
            package var commits: [Components.Schemas.Commit]
            /// - Remark: Generated from `#/components/schemas/commit-comparison/files`.
            package var files: [Components.Schemas.DiffEntry]?
            /// Creates a new `CommitComparison`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - permalinkUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - baseCommit:
            ///   - mergeBaseCommit:
            ///   - status:
            ///   - aheadBy:
            ///   - behindBy:
            ///   - totalCommits:
            ///   - commits:
            ///   - files:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                permalinkUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                baseCommit: Components.Schemas.Commit,
                mergeBaseCommit: Components.Schemas.Commit,
                status: Components.Schemas.CommitComparison.StatusPayload,
                aheadBy: Swift.Int,
                behindBy: Swift.Int,
                totalCommits: Swift.Int,
                commits: [Components.Schemas.Commit],
                files: [Components.Schemas.DiffEntry]? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.permalinkUrl = permalinkUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.baseCommit = baseCommit
                self.mergeBaseCommit = mergeBaseCommit
                self.status = status
                self.aheadBy = aheadBy
                self.behindBy = behindBy
                self.totalCommits = totalCommits
                self.commits = commits
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case permalinkUrl = "permalink_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case baseCommit = "base_commit"
                case mergeBaseCommit = "merge_base_commit"
                case status
                case aheadBy = "ahead_by"
                case behindBy = "behind_by"
                case totalCommits = "total_commits"
                case commits
                case files
            }
        }
        /// Contributor
        ///
        /// - Remark: Generated from `#/components/schemas/contributor`.
        package struct Contributor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor/login`.
            package var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/id`.
            package var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/contributor/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/avatar_url`.
            package var avatarUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/html_url`.
            package var htmlUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/followers_url`.
            package var followersUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/following_url`.
            package var followingUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gists_url`.
            package var gistsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/starred_url`.
            package var starredUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/subscriptions_url`.
            package var subscriptionsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/organizations_url`.
            package var organizationsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/repos_url`.
            package var reposUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/events_url`.
            package var eventsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/received_events_url`.
            package var receivedEventsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/contributor/site_admin`.
            package var siteAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/contributor/contributions`.
            package var contributions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/name`.
            package var name: Swift.String?
            /// Creates a new `Contributor`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - contributions:
            ///   - email:
            ///   - name:
            package init(
                login: Swift.String? = nil,
                id: Swift.Int? = nil,
                nodeId: Swift.String? = nil,
                avatarUrl: Swift.String? = nil,
                gravatarId: Swift.String? = nil,
                url: Swift.String? = nil,
                htmlUrl: Swift.String? = nil,
                followersUrl: Swift.String? = nil,
                followingUrl: Swift.String? = nil,
                gistsUrl: Swift.String? = nil,
                starredUrl: Swift.String? = nil,
                subscriptionsUrl: Swift.String? = nil,
                organizationsUrl: Swift.String? = nil,
                reposUrl: Swift.String? = nil,
                eventsUrl: Swift.String? = nil,
                receivedEventsUrl: Swift.String? = nil,
                _type: Swift.String,
                siteAdmin: Swift.Bool? = nil,
                contributions: Swift.Int,
                email: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.contributions = contributions
                self.email = email
                self.name = name
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case contributions
                case email
                case name
            }
        }
        /// Labeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/labeled-issue-event`.
        package struct LabeledIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            package struct LabelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/color`.
                package var color: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                package init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            package var label: Components.Schemas.LabeledIssueEvent.LabelPayload
            /// Creates a new `LabeledIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - label:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                label: Components.Schemas.LabeledIssueEvent.LabelPayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.label = label
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case label
            }
        }
        /// Unlabeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event`.
        package struct UnlabeledIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            package struct LabelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/color`.
                package var color: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                package init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            package var label: Components.Schemas.UnlabeledIssueEvent.LabelPayload
            /// Creates a new `UnlabeledIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - label:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                label: Components.Schemas.UnlabeledIssueEvent.LabelPayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.label = label
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case label
            }
        }
        /// Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/assigned-issue-event`.
        package struct AssignedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.Integration
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assignee`.
            package var assignee: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assigner`.
            package var assigner: Components.Schemas.SimpleUser
            /// Creates a new `AssignedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - assignee:
            ///   - assigner:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.Integration,
                assignee: Components.Schemas.SimpleUser,
                assigner: Components.Schemas.SimpleUser
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.assignee = assignee
                self.assigner = assigner
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case assignee
                case assigner
            }
        }
        /// Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unassigned-issue-event`.
        package struct UnassignedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assignee`.
            package var assignee: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assigner`.
            package var assigner: Components.Schemas.SimpleUser
            /// Creates a new `UnassignedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - assignee:
            ///   - assigner:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                assignee: Components.Schemas.SimpleUser,
                assigner: Components.Schemas.SimpleUser
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.assignee = assignee
                self.assigner = assigner
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case assignee
                case assigner
            }
        }
        /// Milestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/milestoned-issue-event`.
        package struct MilestonedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            package struct MilestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone/title`.
                package var title: Swift.String
                /// Creates a new `MilestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                package init(title: Swift.String) {
                    self.title = title
                }
                package enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            package var milestone: Components.Schemas.MilestonedIssueEvent.MilestonePayload
            /// Creates a new `MilestonedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - milestone:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                milestone: Components.Schemas.MilestonedIssueEvent.MilestonePayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.milestone = milestone
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case milestone
            }
        }
        /// Demilestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event`.
        package struct DemilestonedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            package struct MilestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone/title`.
                package var title: Swift.String
                /// Creates a new `MilestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                package init(title: Swift.String) {
                    self.title = title
                }
                package enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            package var milestone: Components.Schemas.DemilestonedIssueEvent.MilestonePayload
            /// Creates a new `DemilestonedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - milestone:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                milestone: Components.Schemas.DemilestonedIssueEvent.MilestonePayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.milestone = milestone
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case milestone
            }
        }
        /// Renamed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/renamed-issue-event`.
        package struct RenamedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            package struct RenamePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/from`.
                package var from: Swift.String
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/to`.
                package var to: Swift.String
                /// Creates a new `RenamePayload`.
                ///
                /// - Parameters:
                ///   - from:
                ///   - to:
                package init(
                    from: Swift.String,
                    to: Swift.String
                ) {
                    self.from = from
                    self.to = to
                }
                package enum CodingKeys: String, CodingKey {
                    case from
                    case to
                }
            }
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            package var rename: Components.Schemas.RenamedIssueEvent.RenamePayload
            /// Creates a new `RenamedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - rename:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                rename: Components.Schemas.RenamedIssueEvent.RenamePayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.rename = rename
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case rename
            }
        }
        /// Review Requested Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-requested-issue-event`.
        package struct ReviewRequestedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/review_requester`.
            package var reviewRequester: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_team`.
            package var requestedTeam: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_reviewer`.
            package var requestedReviewer: Components.Schemas.SimpleUser?
            /// Creates a new `ReviewRequestedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - reviewRequester:
            ///   - requestedTeam:
            ///   - requestedReviewer:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                reviewRequester: Components.Schemas.SimpleUser,
                requestedTeam: Components.Schemas.Team? = nil,
                requestedReviewer: Components.Schemas.SimpleUser? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.reviewRequester = reviewRequester
                self.requestedTeam = requestedTeam
                self.requestedReviewer = requestedReviewer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case reviewRequester = "review_requester"
                case requestedTeam = "requested_team"
                case requestedReviewer = "requested_reviewer"
            }
        }
        /// Review Request Removed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event`.
        package struct ReviewRequestRemovedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/review_requester`.
            package var reviewRequester: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_team`.
            package var requestedTeam: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_reviewer`.
            package var requestedReviewer: Components.Schemas.SimpleUser?
            /// Creates a new `ReviewRequestRemovedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - reviewRequester:
            ///   - requestedTeam:
            ///   - requestedReviewer:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                reviewRequester: Components.Schemas.SimpleUser,
                requestedTeam: Components.Schemas.Team? = nil,
                requestedReviewer: Components.Schemas.SimpleUser? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.reviewRequester = reviewRequester
                self.requestedTeam = requestedTeam
                self.requestedReviewer = requestedReviewer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case reviewRequester = "review_requester"
                case requestedTeam = "requested_team"
                case requestedReviewer = "requested_reviewer"
            }
        }
        /// Review Dismissed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event`.
        package struct ReviewDismissedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            package struct DismissedReviewPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/state`.
                package var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/review_id`.
                package var reviewId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_message`.
                package var dismissalMessage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_commit_id`.
                package var dismissalCommitId: Swift.String?
                /// Creates a new `DismissedReviewPayload`.
                ///
                /// - Parameters:
                ///   - state:
                ///   - reviewId:
                ///   - dismissalMessage:
                ///   - dismissalCommitId:
                package init(
                    state: Swift.String,
                    reviewId: Swift.Int,
                    dismissalMessage: Swift.String? = nil,
                    dismissalCommitId: Swift.String? = nil
                ) {
                    self.state = state
                    self.reviewId = reviewId
                    self.dismissalMessage = dismissalMessage
                    self.dismissalCommitId = dismissalCommitId
                }
                package enum CodingKeys: String, CodingKey {
                    case state
                    case reviewId = "review_id"
                    case dismissalMessage = "dismissal_message"
                    case dismissalCommitId = "dismissal_commit_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            package var dismissedReview: Components.Schemas.ReviewDismissedIssueEvent.DismissedReviewPayload
            /// Creates a new `ReviewDismissedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - dismissedReview:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                dismissedReview: Components.Schemas.ReviewDismissedIssueEvent.DismissedReviewPayload
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.dismissedReview = dismissedReview
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case dismissedReview = "dismissed_review"
            }
        }
        /// Locked Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/locked-issue-event`.
        package struct LockedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/lock_reason`.
            package var lockReason: Swift.String?
            /// Creates a new `LockedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - lockReason:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                lockReason: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.lockReason = lockReason
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case lockReason = "lock_reason"
            }
        }
        /// Added to Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event`.
        package struct AddedToProjectIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            package struct ProjectCardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_id`.
                package var projectId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_url`.
                package var projectUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/column_name`.
                package var columnName: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/previous_column_name`.
                package var previousColumnName: Swift.String?
                /// Creates a new `ProjectCardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - projectId:
                ///   - projectUrl:
                ///   - columnName:
                ///   - previousColumnName:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    projectId: Swift.Int,
                    projectUrl: Swift.String,
                    columnName: Swift.String,
                    previousColumnName: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.projectId = projectId
                    self.projectUrl = projectUrl
                    self.columnName = columnName
                    self.previousColumnName = previousColumnName
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case projectId = "project_id"
                    case projectUrl = "project_url"
                    case columnName = "column_name"
                    case previousColumnName = "previous_column_name"
                }
            }
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            package var projectCard: Components.Schemas.AddedToProjectIssueEvent.ProjectCardPayload?
            /// Creates a new `AddedToProjectIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - projectCard:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                projectCard: Components.Schemas.AddedToProjectIssueEvent.ProjectCardPayload? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.projectCard = projectCard
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case projectCard = "project_card"
            }
        }
        /// Moved Column in Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event`.
        package struct MovedColumnInProjectIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            package struct ProjectCardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_id`.
                package var projectId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_url`.
                package var projectUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/column_name`.
                package var columnName: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/previous_column_name`.
                package var previousColumnName: Swift.String?
                /// Creates a new `ProjectCardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - projectId:
                ///   - projectUrl:
                ///   - columnName:
                ///   - previousColumnName:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    projectId: Swift.Int,
                    projectUrl: Swift.String,
                    columnName: Swift.String,
                    previousColumnName: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.projectId = projectId
                    self.projectUrl = projectUrl
                    self.columnName = columnName
                    self.previousColumnName = previousColumnName
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case projectId = "project_id"
                    case projectUrl = "project_url"
                    case columnName = "column_name"
                    case previousColumnName = "previous_column_name"
                }
            }
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            package var projectCard: Components.Schemas.MovedColumnInProjectIssueEvent.ProjectCardPayload?
            /// Creates a new `MovedColumnInProjectIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - projectCard:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                projectCard: Components.Schemas.MovedColumnInProjectIssueEvent.ProjectCardPayload? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.projectCard = projectCard
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case projectCard = "project_card"
            }
        }
        /// Removed from Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event`.
        package struct RemovedFromProjectIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            package struct ProjectCardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_id`.
                package var projectId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_url`.
                package var projectUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/column_name`.
                package var columnName: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/previous_column_name`.
                package var previousColumnName: Swift.String?
                /// Creates a new `ProjectCardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - projectId:
                ///   - projectUrl:
                ///   - columnName:
                ///   - previousColumnName:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    projectId: Swift.Int,
                    projectUrl: Swift.String,
                    columnName: Swift.String,
                    previousColumnName: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.projectId = projectId
                    self.projectUrl = projectUrl
                    self.columnName = columnName
                    self.previousColumnName = previousColumnName
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case projectId = "project_id"
                    case projectUrl = "project_url"
                    case columnName = "column_name"
                    case previousColumnName = "previous_column_name"
                }
            }
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            package var projectCard: Components.Schemas.RemovedFromProjectIssueEvent.ProjectCardPayload?
            /// Creates a new `RemovedFromProjectIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - projectCard:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                projectCard: Components.Schemas.RemovedFromProjectIssueEvent.ProjectCardPayload? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.projectCard = projectCard
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case projectCard = "project_card"
            }
        }
        /// Converted Note to Issue Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event`.
        package struct ConvertedNoteToIssueIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.Integration
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            package struct ProjectCardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/id`.
                package var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_id`.
                package var projectId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_url`.
                package var projectUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/column_name`.
                package var columnName: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/previous_column_name`.
                package var previousColumnName: Swift.String?
                /// Creates a new `ProjectCardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - projectId:
                ///   - projectUrl:
                ///   - columnName:
                ///   - previousColumnName:
                package init(
                    id: Swift.Int,
                    url: Swift.String,
                    projectId: Swift.Int,
                    projectUrl: Swift.String,
                    columnName: Swift.String,
                    previousColumnName: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.projectId = projectId
                    self.projectUrl = projectUrl
                    self.columnName = columnName
                    self.previousColumnName = previousColumnName
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case projectId = "project_id"
                    case projectUrl = "project_url"
                    case columnName = "column_name"
                    case previousColumnName = "previous_column_name"
                }
            }
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            package var projectCard: Components.Schemas.ConvertedNoteToIssueIssueEvent.ProjectCardPayload?
            /// Creates a new `ConvertedNoteToIssueIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - projectCard:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.Integration,
                projectCard: Components.Schemas.ConvertedNoteToIssueIssueEvent.ProjectCardPayload? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.projectCard = projectCard
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case projectCard = "project_card"
            }
        }
        /// Issue Event for Issue
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-for-issue`.
        package struct IssueEventForIssue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value1`.
            package var value1: Components.Schemas.LabeledIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value2`.
            package var value2: Components.Schemas.UnlabeledIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value3`.
            package var value3: Components.Schemas.AssignedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value4`.
            package var value4: Components.Schemas.UnassignedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value5`.
            package var value5: Components.Schemas.MilestonedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value6`.
            package var value6: Components.Schemas.DemilestonedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value7`.
            package var value7: Components.Schemas.RenamedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value8`.
            package var value8: Components.Schemas.ReviewRequestedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value9`.
            package var value9: Components.Schemas.ReviewRequestRemovedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value10`.
            package var value10: Components.Schemas.ReviewDismissedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value11`.
            package var value11: Components.Schemas.LockedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value12`.
            package var value12: Components.Schemas.AddedToProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value13`.
            package var value13: Components.Schemas.MovedColumnInProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value14`.
            package var value14: Components.Schemas.RemovedFromProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value15`.
            package var value15: Components.Schemas.ConvertedNoteToIssueIssueEvent?
            /// Creates a new `IssueEventForIssue`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            package init(
                value1: Components.Schemas.LabeledIssueEvent? = nil,
                value2: Components.Schemas.UnlabeledIssueEvent? = nil,
                value3: Components.Schemas.AssignedIssueEvent? = nil,
                value4: Components.Schemas.UnassignedIssueEvent? = nil,
                value5: Components.Schemas.MilestonedIssueEvent? = nil,
                value6: Components.Schemas.DemilestonedIssueEvent? = nil,
                value7: Components.Schemas.RenamedIssueEvent? = nil,
                value8: Components.Schemas.ReviewRequestedIssueEvent? = nil,
                value9: Components.Schemas.ReviewRequestRemovedIssueEvent? = nil,
                value10: Components.Schemas.ReviewDismissedIssueEvent? = nil,
                value11: Components.Schemas.LockedIssueEvent? = nil,
                value12: Components.Schemas.AddedToProjectIssueEvent? = nil,
                value13: Components.Schemas.MovedColumnInProjectIssueEvent? = nil,
                value14: Components.Schemas.RemovedFromProjectIssueEvent? = nil,
                value15: Components.Schemas.ConvertedNoteToIssueIssueEvent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
            }
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9,
                        self.value10,
                        self.value11,
                        self.value12,
                        self.value13,
                        self.value14,
                        self.value15
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
                try self.value10?.encode(to: encoder)
                try self.value11?.encode(to: encoder)
                try self.value12?.encode(to: encoder)
                try self.value13?.encode(to: encoder)
                try self.value14?.encode(to: encoder)
                try self.value15?.encode(to: encoder)
            }
        }
        /// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
        ///
        /// - Remark: Generated from `#/components/schemas/label`.
        package struct Label: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/label/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/label/node_id`.
            package var nodeId: Swift.String
            /// URL for the label
            ///
            /// - Remark: Generated from `#/components/schemas/label/url`.
            package var url: Swift.String
            /// The name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/description`.
            package var description: Swift.String?
            /// 6-character hex code, without the leading #, identifying the color
            ///
            /// - Remark: Generated from `#/components/schemas/label/color`.
            package var color: Swift.String
            /// - Remark: Generated from `#/components/schemas/label/default`.
            package var _default: Swift.Bool
            /// Creates a new `Label`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url: URL for the label
            ///   - name: The name of the label.
            ///   - description:
            ///   - color: 6-character hex code, without the leading #, identifying the color
            ///   - _default:
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                color: Swift.String,
                _default: Swift.Bool
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self._default = _default
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case name
                case description
                case color
                case _default = "default"
            }
        }
        /// Timeline Comment Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-comment-event`.
        package struct TimelineCommentEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/node_id`.
            package var nodeId: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/url`.
            package var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/user`.
            package var user: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `TimelineCommentEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - id: Unique identifier of the issue comment
            ///   - nodeId:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - bodyText:
            ///   - bodyHtml:
            ///   - htmlUrl:
            ///   - user:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - issueUrl:
            ///   - authorAssociation:
            ///   - performedViaGithubApp:
            ///   - reactions:
            package init(
                event: Swift.String,
                actor: Components.Schemas.SimpleUser,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                bodyHtml: Swift.String? = nil,
                htmlUrl: Swift.String,
                user: Components.Schemas.SimpleUser,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                issueUrl: Swift.String,
                authorAssociation: Components.Schemas.AuthorAssociation,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.event = event
                self.actor = actor
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.body = body
                self.bodyText = bodyText
                self.bodyHtml = bodyHtml
                self.htmlUrl = htmlUrl
                self.user = user
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.issueUrl = issueUrl
                self.authorAssociation = authorAssociation
                self.performedViaGithubApp = performedViaGithubApp
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case actor
                case id
                case nodeId = "node_id"
                case url
                case body
                case bodyText = "body_text"
                case bodyHtml = "body_html"
                case htmlUrl = "html_url"
                case user
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case issueUrl = "issue_url"
                case authorAssociation = "author_association"
                case performedViaGithubApp = "performed_via_github_app"
                case reactions
            }
        }
        /// Timeline Cross Referenced Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event`.
        package struct TimelineCrossReferencedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/actor`.
            package var actor: Components.Schemas.SimpleUser?
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            package struct SourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/type`.
                package var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/issue`.
                package var issue: Components.Schemas.Issue?
                /// Creates a new `SourcePayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - issue:
                package init(
                    _type: Swift.String? = nil,
                    issue: Components.Schemas.Issue? = nil
                ) {
                    self._type = _type
                    self.issue = issue
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case issue
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            package var source: Components.Schemas.TimelineCrossReferencedEvent.SourcePayload
            /// Creates a new `TimelineCrossReferencedEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - source:
            package init(
                event: Swift.String,
                actor: Components.Schemas.SimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                source: Components.Schemas.TimelineCrossReferencedEvent.SourcePayload
            ) {
                self.event = event
                self.actor = actor
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.source = source
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case actor
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case source
            }
        }
        /// Timeline Committed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-committed-event`.
        package struct TimelineCommittedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/event`.
            package var event: Swift.String?
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/url`.
            package var url: Swift.String
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            package struct AuthorPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/date`.
                package var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/email`.
                package var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/name`.
                package var name: Swift.String
                /// Creates a new `AuthorPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                package init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            package var author: Components.Schemas.TimelineCommittedEvent.AuthorPayload
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            package struct CommitterPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/date`.
                package var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/email`.
                package var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/name`.
                package var name: Swift.String
                /// Creates a new `CommitterPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                package init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                package enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            package var committer: Components.Schemas.TimelineCommittedEvent.CommitterPayload
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            package struct TreePayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/url`.
                package var url: Swift.String
                /// Creates a new `TreePayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                package init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            package var tree: Components.Schemas.TimelineCommittedEvent.TreePayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/ParentsPayload`.
            package struct ParentsPayloadPayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/ParentsPayload/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/ParentsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/ParentsPayload/html_url`.
                package var htmlUrl: Swift.String
                /// Creates a new `ParentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                ///   - htmlUrl:
                package init(
                    sha: Swift.String,
                    url: Swift.String,
                    htmlUrl: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                    self.htmlUrl = htmlUrl
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case htmlUrl = "html_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            package typealias ParentsPayload = [Components.Schemas.TimelineCommittedEvent.ParentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            package var parents: Components.Schemas.TimelineCommittedEvent.ParentsPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            package struct VerificationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/verified`.
                package var verified: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/reason`.
                package var reason: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/signature`.
                package var signature: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/payload`.
                package var payload: Swift.String?
                /// Creates a new `VerificationPayload`.
                ///
                /// - Parameters:
                ///   - verified:
                ///   - reason:
                ///   - signature:
                ///   - payload:
                package init(
                    verified: Swift.Bool,
                    reason: Swift.String,
                    signature: Swift.String? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.verified = verified
                    self.reason = reason
                    self.signature = signature
                    self.payload = payload
                }
                package enum CodingKeys: String, CodingKey {
                    case verified
                    case reason
                    case signature
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            package var verification: Components.Schemas.TimelineCommittedEvent.VerificationPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/html_url`.
            package var htmlUrl: Swift.String
            /// Creates a new `TimelineCommittedEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - sha: SHA for the commit
            ///   - nodeId:
            ///   - url:
            ///   - author: Identifying information for the git-user
            ///   - committer: Identifying information for the git-user
            ///   - message: Message describing the purpose of the commit
            ///   - tree:
            ///   - parents:
            ///   - verification:
            ///   - htmlUrl:
            package init(
                event: Swift.String? = nil,
                sha: Swift.String,
                nodeId: Swift.String,
                url: Swift.String,
                author: Components.Schemas.TimelineCommittedEvent.AuthorPayload,
                committer: Components.Schemas.TimelineCommittedEvent.CommitterPayload,
                message: Swift.String,
                tree: Components.Schemas.TimelineCommittedEvent.TreePayload,
                parents: Components.Schemas.TimelineCommittedEvent.ParentsPayload,
                verification: Components.Schemas.TimelineCommittedEvent.VerificationPayload,
                htmlUrl: Swift.String
            ) {
                self.event = event
                self.sha = sha
                self.nodeId = nodeId
                self.url = url
                self.author = author
                self.committer = committer
                self.message = message
                self.tree = tree
                self.parents = parents
                self.verification = verification
                self.htmlUrl = htmlUrl
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case sha
                case nodeId = "node_id"
                case url
                case author
                case committer
                case message
                case tree
                case parents
                case verification
                case htmlUrl = "html_url"
            }
        }
        /// Timeline Reviewed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event`.
        package struct TimelineReviewedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/event`.
            package var event: Swift.String
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/user`.
            package var user: Components.Schemas.SimpleUser
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/pull_request_url`.
            package var pullRequestUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                package struct HtmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `HtmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                package var html: Components.Schemas.TimelineReviewedEvent._LinksPayload.HtmlPayload
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                package struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                package var pullRequest: Components.Schemas.TimelineReviewedEvent._LinksPayload.PullRequestPayload
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pullRequest:
                package init(
                    html: Components.Schemas.TimelineReviewedEvent._LinksPayload.HtmlPayload,
                    pullRequest: Components.Schemas.TimelineReviewedEvent._LinksPayload.PullRequestPayload
                ) {
                    self.html = html
                    self.pullRequest = pullRequest
                }
                package enum CodingKeys: String, CodingKey {
                    case html
                    case pullRequest = "pull_request"
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            package var _links: Components.Schemas.TimelineReviewedEvent._LinksPayload
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/submitted_at`.
            package var submittedAt: Foundation.Date?
            /// A commit SHA for the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/commit_id`.
            package var commitId: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// Creates a new `TimelineReviewedEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - id: Unique identifier of the review
            ///   - nodeId:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - htmlUrl:
            ///   - pullRequestUrl:
            ///   - _links:
            ///   - submittedAt:
            ///   - commitId: A commit SHA for the review.
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - authorAssociation:
            package init(
                event: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                user: Components.Schemas.SimpleUser,
                body: Swift.String? = nil,
                state: Swift.String,
                htmlUrl: Swift.String,
                pullRequestUrl: Swift.String,
                _links: Components.Schemas.TimelineReviewedEvent._LinksPayload,
                submittedAt: Foundation.Date? = nil,
                commitId: Swift.String,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                authorAssociation: Components.Schemas.AuthorAssociation
            ) {
                self.event = event
                self.id = id
                self.nodeId = nodeId
                self.user = user
                self.body = body
                self.state = state
                self.htmlUrl = htmlUrl
                self.pullRequestUrl = pullRequestUrl
                self._links = _links
                self.submittedAt = submittedAt
                self.commitId = commitId
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.authorAssociation = authorAssociation
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case id
                case nodeId = "node_id"
                case user
                case body
                case state
                case htmlUrl = "html_url"
                case pullRequestUrl = "pull_request_url"
                case _links
                case submittedAt = "submitted_at"
                case commitId = "commit_id"
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case authorAssociation = "author_association"
            }
        }
        /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-comment`.
        package struct PullRequestReviewComment: Codable, Hashable, Sendable {
            /// URL for the pull request review comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/url`.
            package var url: Swift.String
            /// The ID of the pull request review to which the comment belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_review_id`.
            package var pullRequestReviewId: Swift.Int?
            /// The ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/id`.
            package var id: Swift.Int
            /// The node ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/node_id`.
            package var nodeId: Swift.String
            /// The diff of the line that the comment refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/diff_hunk`.
            package var diffHunk: Swift.String
            /// The relative path of the file to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/path`.
            package var path: Swift.String
            /// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/position`.
            package var position: Swift.Int?
            /// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_position`.
            package var originalPosition: Swift.Int?
            /// The SHA of the commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/commit_id`.
            package var commitId: Swift.String
            /// The SHA of the original commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_commit_id`.
            package var originalCommitId: Swift.String
            /// The comment ID to reply to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/in_reply_to_id`.
            package var inReplyToId: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/user`.
            package var user: Components.Schemas.SimpleUser
            /// The text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/updated_at`.
            package var updatedAt: Foundation.Date
            /// HTML URL for the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/html_url`.
            package var htmlUrl: Swift.String
            /// URL for the pull request that the review comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_url`.
            package var pullRequestUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                package struct _SelfPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self/href`.
                    package var href: Swift.String
                    /// Creates a new `_SelfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                package var _self: Components.Schemas.PullRequestReviewComment._LinksPayload._SelfPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                package struct HtmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `HtmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                package var html: Components.Schemas.PullRequestReviewComment._LinksPayload.HtmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                package struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                package var pullRequest: Components.Schemas.PullRequestReviewComment._LinksPayload.PullRequestPayload
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pullRequest:
                package init(
                    _self: Components.Schemas.PullRequestReviewComment._LinksPayload._SelfPayload,
                    html: Components.Schemas.PullRequestReviewComment._LinksPayload.HtmlPayload,
                    pullRequest: Components.Schemas.PullRequestReviewComment._LinksPayload.PullRequestPayload
                ) {
                    self._self = _self
                    self.html = html
                    self.pullRequest = pullRequest
                }
                package enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pullRequest = "pull_request"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            package var _links: Components.Schemas.PullRequestReviewComment._LinksPayload
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_line`.
            package var startLine: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_start_line`.
            package var originalStartLine: Swift.Int?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            @frozen package enum StartSidePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case left = "LEFT"
                case right = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            package var startSide: Components.Schemas.PullRequestReviewComment.StartSidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/line`.
            package var line: Swift.Int?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_line`.
            package var originalLine: Swift.Int?
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            @frozen package enum SidePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case left = "LEFT"
                case right = "RIGHT"
            }
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            package var side: Components.Schemas.PullRequestReviewComment.SidePayload?
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            @frozen package enum SubjectTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case line = "line"
                case file = "file"
            }
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            package var subjectType: Components.Schemas.PullRequestReviewComment.SubjectTypePayload?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_text`.
            package var bodyText: Swift.String?
            /// Creates a new `PullRequestReviewComment`.
            ///
            /// - Parameters:
            ///   - url: URL for the pull request review comment
            ///   - pullRequestReviewId: The ID of the pull request review to which the comment belongs.
            ///   - id: The ID of the pull request review comment.
            ///   - nodeId: The node ID of the pull request review comment.
            ///   - diffHunk: The diff of the line that the comment refers to.
            ///   - path: The relative path of the file to which the comment applies.
            ///   - position: The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///   - originalPosition: The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///   - commitId: The SHA of the commit to which the comment applies.
            ///   - originalCommitId: The SHA of the original commit to which the comment applies.
            ///   - inReplyToId: The comment ID to reply to.
            ///   - user:
            ///   - body: The text of the comment.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - htmlUrl: HTML URL for the pull request review comment.
            ///   - pullRequestUrl: URL for the pull request that the review comment belongs to.
            ///   - authorAssociation:
            ///   - _links:
            ///   - startLine: The first line of the range for a multi-line comment.
            ///   - originalStartLine: The first line of the range for a multi-line comment.
            ///   - startSide: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - originalLine: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - side: The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///   - subjectType: The level at which the comment is targeted, can be a diff line or a file.
            ///   - reactions:
            ///   - bodyHtml:
            ///   - bodyText:
            package init(
                url: Swift.String,
                pullRequestReviewId: Swift.Int? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                diffHunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                originalPosition: Swift.Int? = nil,
                commitId: Swift.String,
                originalCommitId: Swift.String,
                inReplyToId: Swift.Int? = nil,
                user: Components.Schemas.SimpleUser,
                body: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                htmlUrl: Swift.String,
                pullRequestUrl: Swift.String,
                authorAssociation: Components.Schemas.AuthorAssociation,
                _links: Components.Schemas.PullRequestReviewComment._LinksPayload,
                startLine: Swift.Int? = nil,
                originalStartLine: Swift.Int? = nil,
                startSide: Components.Schemas.PullRequestReviewComment.StartSidePayload? = nil,
                line: Swift.Int? = nil,
                originalLine: Swift.Int? = nil,
                side: Components.Schemas.PullRequestReviewComment.SidePayload? = nil,
                subjectType: Components.Schemas.PullRequestReviewComment.SubjectTypePayload? = nil,
                reactions: Components.Schemas.ReactionRollup? = nil,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil
            ) {
                self.url = url
                self.pullRequestReviewId = pullRequestReviewId
                self.id = id
                self.nodeId = nodeId
                self.diffHunk = diffHunk
                self.path = path
                self.position = position
                self.originalPosition = originalPosition
                self.commitId = commitId
                self.originalCommitId = originalCommitId
                self.inReplyToId = inReplyToId
                self.user = user
                self.body = body
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.htmlUrl = htmlUrl
                self.pullRequestUrl = pullRequestUrl
                self.authorAssociation = authorAssociation
                self._links = _links
                self.startLine = startLine
                self.originalStartLine = originalStartLine
                self.startSide = startSide
                self.line = line
                self.originalLine = originalLine
                self.side = side
                self.subjectType = subjectType
                self.reactions = reactions
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case pullRequestReviewId = "pull_request_review_id"
                case id
                case nodeId = "node_id"
                case diffHunk = "diff_hunk"
                case path
                case position
                case originalPosition = "original_position"
                case commitId = "commit_id"
                case originalCommitId = "original_commit_id"
                case inReplyToId = "in_reply_to_id"
                case user
                case body
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case htmlUrl = "html_url"
                case pullRequestUrl = "pull_request_url"
                case authorAssociation = "author_association"
                case _links
                case startLine = "start_line"
                case originalStartLine = "original_start_line"
                case startSide = "start_side"
                case line
                case originalLine = "original_line"
                case side
                case subjectType = "subject_type"
                case reactions
                case bodyHtml = "body_html"
                case bodyText = "body_text"
            }
        }
        /// Timeline Line Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event`.
        package struct TimelineLineCommentedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/event`.
            package var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/actor`.
            package var actor: Components.Schemas.SimpleUser?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/comments`.
            package var comments: [Components.Schemas.PullRequestReviewComment]?
            /// Creates a new `TimelineLineCommentedEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - nodeId:
            ///   - actor:
            ///   - comments:
            package init(
                event: Swift.String? = nil,
                nodeId: Swift.String? = nil,
                actor: Components.Schemas.SimpleUser? = nil,
                comments: [Components.Schemas.PullRequestReviewComment]? = nil
            ) {
                self.event = event
                self.nodeId = nodeId
                self.actor = actor
                self.comments = comments
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case nodeId = "node_id"
                case actor
                case comments
            }
        }
        /// Timeline Commit Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event`.
        package struct TimelineCommitCommentedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/event`.
            package var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/comments`.
            package var comments: [Components.Schemas.CommitComment]?
            /// Creates a new `TimelineCommitCommentedEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - nodeId:
            ///   - commitId:
            ///   - comments:
            package init(
                event: Swift.String? = nil,
                nodeId: Swift.String? = nil,
                commitId: Swift.String? = nil,
                comments: [Components.Schemas.CommitComment]? = nil
            ) {
                self.event = event
                self.nodeId = nodeId
                self.commitId = commitId
                self.comments = comments
            }
            package enum CodingKeys: String, CodingKey {
                case event
                case nodeId = "node_id"
                case commitId = "commit_id"
                case comments
            }
        }
        /// Timeline Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event`.
        package struct TimelineAssignedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/assignee`.
            package var assignee: Components.Schemas.SimpleUser
            /// Creates a new `TimelineAssignedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - assignee:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                assignee: Components.Schemas.SimpleUser
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.assignee = assignee
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case assignee
            }
        }
        /// Timeline Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event`.
        package struct TimelineUnassignedIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/assignee`.
            package var assignee: Components.Schemas.SimpleUser
            /// Creates a new `TimelineUnassignedIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - assignee:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                assignee: Components.Schemas.SimpleUser
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.assignee = assignee
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case assignee
            }
        }
        /// State Change Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/state-change-issue-event`.
        package struct StateChangeIssueEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/actor`.
            package var actor: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/event`.
            package var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_url`.
            package var commitUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/created_at`.
            package var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/state_reason`.
            package var stateReason: Swift.String?
            /// Creates a new `StateChangeIssueEvent`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commitId:
            ///   - commitUrl:
            ///   - createdAt:
            ///   - performedViaGithubApp:
            ///   - stateReason:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.SimpleUser,
                event: Swift.String,
                commitId: Swift.String? = nil,
                commitUrl: Swift.String? = nil,
                createdAt: Swift.String,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                stateReason: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.actor = actor
                self.event = event
                self.commitId = commitId
                self.commitUrl = commitUrl
                self.createdAt = createdAt
                self.performedViaGithubApp = performedViaGithubApp
                self.stateReason = stateReason
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case actor
                case event
                case commitId = "commit_id"
                case commitUrl = "commit_url"
                case createdAt = "created_at"
                case performedViaGithubApp = "performed_via_github_app"
                case stateReason = "state_reason"
            }
        }
        /// Timeline Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-issue-events`.
        package struct TimelineIssueEvents: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value1`.
            package var value1: Components.Schemas.LabeledIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value2`.
            package var value2: Components.Schemas.UnlabeledIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value3`.
            package var value3: Components.Schemas.MilestonedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value4`.
            package var value4: Components.Schemas.DemilestonedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value5`.
            package var value5: Components.Schemas.RenamedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value6`.
            package var value6: Components.Schemas.ReviewRequestedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value7`.
            package var value7: Components.Schemas.ReviewRequestRemovedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value8`.
            package var value8: Components.Schemas.ReviewDismissedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value9`.
            package var value9: Components.Schemas.LockedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value10`.
            package var value10: Components.Schemas.AddedToProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value11`.
            package var value11: Components.Schemas.MovedColumnInProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value12`.
            package var value12: Components.Schemas.RemovedFromProjectIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value13`.
            package var value13: Components.Schemas.ConvertedNoteToIssueIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value14`.
            package var value14: Components.Schemas.TimelineCommentEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value15`.
            package var value15: Components.Schemas.TimelineCrossReferencedEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value16`.
            package var value16: Components.Schemas.TimelineCommittedEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value17`.
            package var value17: Components.Schemas.TimelineReviewedEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value18`.
            package var value18: Components.Schemas.TimelineLineCommentedEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value19`.
            package var value19: Components.Schemas.TimelineCommitCommentedEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value20`.
            package var value20: Components.Schemas.TimelineAssignedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value21`.
            package var value21: Components.Schemas.TimelineUnassignedIssueEvent?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value22`.
            package var value22: Components.Schemas.StateChangeIssueEvent?
            /// Creates a new `TimelineIssueEvents`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            ///   - value16:
            ///   - value17:
            ///   - value18:
            ///   - value19:
            ///   - value20:
            ///   - value21:
            ///   - value22:
            package init(
                value1: Components.Schemas.LabeledIssueEvent? = nil,
                value2: Components.Schemas.UnlabeledIssueEvent? = nil,
                value3: Components.Schemas.MilestonedIssueEvent? = nil,
                value4: Components.Schemas.DemilestonedIssueEvent? = nil,
                value5: Components.Schemas.RenamedIssueEvent? = nil,
                value6: Components.Schemas.ReviewRequestedIssueEvent? = nil,
                value7: Components.Schemas.ReviewRequestRemovedIssueEvent? = nil,
                value8: Components.Schemas.ReviewDismissedIssueEvent? = nil,
                value9: Components.Schemas.LockedIssueEvent? = nil,
                value10: Components.Schemas.AddedToProjectIssueEvent? = nil,
                value11: Components.Schemas.MovedColumnInProjectIssueEvent? = nil,
                value12: Components.Schemas.RemovedFromProjectIssueEvent? = nil,
                value13: Components.Schemas.ConvertedNoteToIssueIssueEvent? = nil,
                value14: Components.Schemas.TimelineCommentEvent? = nil,
                value15: Components.Schemas.TimelineCrossReferencedEvent? = nil,
                value16: Components.Schemas.TimelineCommittedEvent? = nil,
                value17: Components.Schemas.TimelineReviewedEvent? = nil,
                value18: Components.Schemas.TimelineLineCommentedEvent? = nil,
                value19: Components.Schemas.TimelineCommitCommentedEvent? = nil,
                value20: Components.Schemas.TimelineAssignedIssueEvent? = nil,
                value21: Components.Schemas.TimelineUnassignedIssueEvent? = nil,
                value22: Components.Schemas.StateChangeIssueEvent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
                self.value16 = value16
                self.value17 = value17
                self.value18 = value18
                self.value19 = value19
                self.value20 = value20
                self.value21 = value21
                self.value22 = value22
            }
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value16 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value17 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value18 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value19 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value20 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value21 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value22 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9,
                        self.value10,
                        self.value11,
                        self.value12,
                        self.value13,
                        self.value14,
                        self.value15,
                        self.value16,
                        self.value17,
                        self.value18,
                        self.value19,
                        self.value20,
                        self.value21,
                        self.value22
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
                try self.value10?.encode(to: encoder)
                try self.value11?.encode(to: encoder)
                try self.value12?.encode(to: encoder)
                try self.value13?.encode(to: encoder)
                try self.value14?.encode(to: encoder)
                try self.value15?.encode(to: encoder)
                try self.value16?.encode(to: encoder)
                try self.value17?.encode(to: encoder)
                try self.value18?.encode(to: encoder)
                try self.value19?.encode(to: encoder)
                try self.value20?.encode(to: encoder)
                try self.value21?.encode(to: encoder)
                try self.value22?.encode(to: encoder)
            }
        }
        /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request`.
        package struct PullRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments_url`.
            package var reviewCommentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comment_url`.
            package var reviewCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/statuses_url`.
            package var statusesUrl: Swift.String
            /// Number uniquely identifying the pull request within its repository.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/number`.
            package var number: Swift.Int
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case open = "open"
                case closed = "closed"
            }
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            package var state: Components.Schemas.PullRequest.StatePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/locked`.
            package var locked: Swift.Bool
            /// The title of the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/user`.
            package var user: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/pull-request/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload`.
            package struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/node_id`.
                package var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `LabelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    nodeId: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package typealias LabelsPayload = [Components.Schemas.PullRequest.LabelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package var labels: Components.Schemas.PullRequest.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/pull-request/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_at`.
            package var mergedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merge_commit_sha`.
            package var mergeCommitSha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_reviewers`.
            package var requestedReviewers: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_teams`.
            package var requestedTeams: [Components.Schemas.TeamSimple]?
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package struct HeadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                package struct RepoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archive_url`.
                    package var archiveUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/assignees_url`.
                    package var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/blobs_url`.
                    package var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/branches_url`.
                    package var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/collaborators_url`.
                    package var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/comments_url`.
                    package var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/commits_url`.
                    package var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/compare_url`.
                    package var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contents_url`.
                    package var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/contributors_url`.
                    package var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/deployments_url`.
                    package var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/downloads_url`.
                    package var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/events_url`.
                    package var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/fork`.
                    package var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_url`.
                    package var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/full_name`.
                    package var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_commits_url`.
                    package var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_refs_url`.
                    package var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_tags_url`.
                    package var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/hooks_url`.
                    package var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/html_url`.
                    package var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/node_id`.
                    package var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_comment_url`.
                    package var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issue_events_url`.
                    package var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/issues_url`.
                    package var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/keys_url`.
                    package var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/labels_url`.
                    package var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/languages_url`.
                    package var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/merges_url`.
                    package var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/milestones_url`.
                    package var milestonesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/notifications_url`.
                    package var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    package struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/avatar_url`.
                        package var avatarUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/events_url`.
                        package var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/followers_url`.
                        package var followersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/following_url`.
                        package var followingUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gists_url`.
                        package var gistsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/gravatar_id`.
                        package var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/html_url`.
                        package var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/id`.
                        package var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/node_id`.
                        package var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/login`.
                        package var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/organizations_url`.
                        package var organizationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/received_events_url`.
                        package var receivedEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/repos_url`.
                        package var reposUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/site_admin`.
                        package var siteAdmin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/starred_url`.
                        package var starredUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/subscriptions_url`.
                        package var subscriptionsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/type`.
                        package var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner/url`.
                        package var url: Swift.String
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - nodeId:
                        ///   - login:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        package init(
                            avatarUrl: Swift.String,
                            eventsUrl: Swift.String,
                            followersUrl: Swift.String,
                            followingUrl: Swift.String,
                            gistsUrl: Swift.String,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            nodeId: Swift.String,
                            login: Swift.String,
                            organizationsUrl: Swift.String,
                            receivedEventsUrl: Swift.String,
                            reposUrl: Swift.String,
                            siteAdmin: Swift.Bool,
                            starredUrl: Swift.String,
                            subscriptionsUrl: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.nodeId = nodeId
                            self.login = login
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        package enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case nodeId = "node_id"
                            case login
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/owner`.
                    package var owner: Components.Schemas.PullRequest.HeadPayload.RepoPayload.OwnerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/private`.
                    package var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pulls_url`.
                    package var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/releases_url`.
                    package var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_url`.
                    package var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/statuses_url`.
                    package var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscribers_url`.
                    package var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/subscription_url`.
                    package var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/tags_url`.
                    package var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/teams_url`.
                    package var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/trees_url`.
                    package var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/url`.
                    package var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/clone_url`.
                    package var cloneUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/default_branch`.
                    package var defaultBranch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks`.
                    package var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/forks_count`.
                    package var forksCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/git_url`.
                    package var gitUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_downloads`.
                    package var hasDownloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_issues`.
                    package var hasIssues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_projects`.
                    package var hasProjects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_wiki`.
                    package var hasWiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_pages`.
                    package var hasPages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/has_discussions`.
                    package var hasDiscussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/homepage`.
                    package var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/language`.
                    package var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/master_branch`.
                    package var masterBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/archived`.
                    package var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/disabled`.
                    package var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/visibility`.
                    package var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/mirror_url`.
                    package var mirrorUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues`.
                    package var openIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/open_issues_count`.
                    package var openIssuesCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    package struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/admin`.
                        package var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/maintain`.
                        package var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/push`.
                        package var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/triage`.
                        package var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions/pull`.
                        package var pull: Swift.Bool
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        package init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        package enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/permissions`.
                    package var permissions: Components.Schemas.PullRequest.HeadPayload.RepoPayload.PermissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/temp_clone_token`.
                    package var tempCloneToken: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_merge_commit`.
                    package var allowMergeCommit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_squash_merge`.
                    package var allowSquashMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_rebase_merge`.
                    package var allowRebaseMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    package struct LicensePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/key`.
                        package var key: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/name`.
                        package var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/url`.
                        package var url: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/spdx_id`.
                        package var spdxId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license/node_id`.
                        package var nodeId: Swift.String?
                        /// Creates a new `LicensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - url:
                        ///   - spdxId:
                        ///   - nodeId:
                        package init(
                            key: Swift.String? = nil,
                            name: Swift.String? = nil,
                            url: Swift.String? = nil,
                            spdxId: Swift.String? = nil,
                            nodeId: Swift.String? = nil
                        ) {
                            self.key = key
                            self.name = name
                            self.url = url
                            self.spdxId = spdxId
                            self.nodeId = nodeId
                        }
                        package enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case url
                            case spdxId = "spdx_id"
                            case nodeId = "node_id"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/license`.
                    package var license: Components.Schemas.PullRequest.HeadPayload.RepoPayload.LicensePayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/pushed_at`.
                    package var pushedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/size`.
                    package var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/ssh_url`.
                    package var sshUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/stargazers_count`.
                    package var stargazersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/svn_url`.
                    package var svnUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/topics`.
                    package var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers`.
                    package var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/watchers_count`.
                    package var watchersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/created_at`.
                    package var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/updated_at`.
                    package var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/allow_forking`.
                    package var allowForking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/is_template`.
                    package var isTemplate: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/repo/web_commit_signoff_required`.
                    package var webCommitSignoffRequired: Swift.Bool?
                    /// Creates a new `RepoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - nodeId:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    ///   - cloneUrl:
                    ///   - defaultBranch:
                    ///   - forks:
                    ///   - forksCount:
                    ///   - gitUrl:
                    ///   - hasDownloads:
                    ///   - hasIssues:
                    ///   - hasProjects:
                    ///   - hasWiki:
                    ///   - hasPages:
                    ///   - hasDiscussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - masterBranch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirrorUrl:
                    ///   - openIssues:
                    ///   - openIssuesCount:
                    ///   - permissions:
                    ///   - tempCloneToken:
                    ///   - allowMergeCommit:
                    ///   - allowSquashMerge:
                    ///   - allowRebaseMerge:
                    ///   - license:
                    ///   - pushedAt:
                    ///   - size:
                    ///   - sshUrl:
                    ///   - stargazersCount:
                    ///   - svnUrl:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchersCount:
                    ///   - createdAt:
                    ///   - updatedAt:
                    ///   - allowForking:
                    ///   - isTemplate:
                    ///   - webCommitSignoffRequired:
                    package init(
                        archiveUrl: Swift.String,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        nodeId: Swift.String,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        languagesUrl: Swift.String,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        name: Swift.String,
                        notificationsUrl: Swift.String,
                        owner: Components.Schemas.PullRequest.HeadPayload.RepoPayload.OwnerPayload,
                        _private: Swift.Bool,
                        pullsUrl: Swift.String,
                        releasesUrl: Swift.String,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        treesUrl: Swift.String,
                        url: Swift.String,
                        cloneUrl: Swift.String,
                        defaultBranch: Swift.String,
                        forks: Swift.Int,
                        forksCount: Swift.Int,
                        gitUrl: Swift.String,
                        hasDownloads: Swift.Bool,
                        hasIssues: Swift.Bool,
                        hasProjects: Swift.Bool,
                        hasWiki: Swift.Bool,
                        hasPages: Swift.Bool,
                        hasDiscussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        masterBranch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirrorUrl: Swift.String? = nil,
                        openIssues: Swift.Int,
                        openIssuesCount: Swift.Int,
                        permissions: Components.Schemas.PullRequest.HeadPayload.RepoPayload.PermissionsPayload? = nil,
                        tempCloneToken: Swift.String? = nil,
                        allowMergeCommit: Swift.Bool? = nil,
                        allowSquashMerge: Swift.Bool? = nil,
                        allowRebaseMerge: Swift.Bool? = nil,
                        license: Components.Schemas.PullRequest.HeadPayload.RepoPayload.LicensePayload? = nil,
                        pushedAt: Foundation.Date,
                        size: Swift.Int,
                        sshUrl: Swift.String,
                        stargazersCount: Swift.Int,
                        svnUrl: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchersCount: Swift.Int,
                        createdAt: Foundation.Date,
                        updatedAt: Foundation.Date,
                        allowForking: Swift.Bool? = nil,
                        isTemplate: Swift.Bool? = nil,
                        webCommitSignoffRequired: Swift.Bool? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.nodeId = nodeId
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                        self.cloneUrl = cloneUrl
                        self.defaultBranch = defaultBranch
                        self.forks = forks
                        self.forksCount = forksCount
                        self.gitUrl = gitUrl
                        self.hasDownloads = hasDownloads
                        self.hasIssues = hasIssues
                        self.hasProjects = hasProjects
                        self.hasWiki = hasWiki
                        self.hasPages = hasPages
                        self.hasDiscussions = hasDiscussions
                        self.homepage = homepage
                        self.language = language
                        self.masterBranch = masterBranch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirrorUrl = mirrorUrl
                        self.openIssues = openIssues
                        self.openIssuesCount = openIssuesCount
                        self.permissions = permissions
                        self.tempCloneToken = tempCloneToken
                        self.allowMergeCommit = allowMergeCommit
                        self.allowSquashMerge = allowSquashMerge
                        self.allowRebaseMerge = allowRebaseMerge
                        self.license = license
                        self.pushedAt = pushedAt
                        self.size = size
                        self.sshUrl = sshUrl
                        self.stargazersCount = stargazersCount
                        self.svnUrl = svnUrl
                        self.topics = topics
                        self.watchers = watchers
                        self.watchersCount = watchersCount
                        self.createdAt = createdAt
                        self.updatedAt = updatedAt
                        self.allowForking = allowForking
                        self.isTemplate = isTemplate
                        self.webCommitSignoffRequired = webCommitSignoffRequired
                    }
                    package enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case nodeId = "node_id"
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                        case cloneUrl = "clone_url"
                        case defaultBranch = "default_branch"
                        case forks
                        case forksCount = "forks_count"
                        case gitUrl = "git_url"
                        case hasDownloads = "has_downloads"
                        case hasIssues = "has_issues"
                        case hasProjects = "has_projects"
                        case hasWiki = "has_wiki"
                        case hasPages = "has_pages"
                        case hasDiscussions = "has_discussions"
                        case homepage
                        case language
                        case masterBranch = "master_branch"
                        case archived
                        case disabled
                        case visibility
                        case mirrorUrl = "mirror_url"
                        case openIssues = "open_issues"
                        case openIssuesCount = "open_issues_count"
                        case permissions
                        case tempCloneToken = "temp_clone_token"
                        case allowMergeCommit = "allow_merge_commit"
                        case allowSquashMerge = "allow_squash_merge"
                        case allowRebaseMerge = "allow_rebase_merge"
                        case license
                        case pushedAt = "pushed_at"
                        case size
                        case sshUrl = "ssh_url"
                        case stargazersCount = "stargazers_count"
                        case svnUrl = "svn_url"
                        case topics
                        case watchers
                        case watchersCount = "watchers_count"
                        case createdAt = "created_at"
                        case updatedAt = "updated_at"
                        case allowForking = "allow_forking"
                        case isTemplate = "is_template"
                        case webCommitSignoffRequired = "web_commit_signoff_required"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                package var repo: Components.Schemas.PullRequest.HeadPayload.RepoPayload?
                /// - Remark: Generated from `#/components/schemas/pull-request/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                package struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/avatar_url`.
                    package var avatarUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/events_url`.
                    package var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/followers_url`.
                    package var followersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/following_url`.
                    package var followingUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gists_url`.
                    package var gistsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/gravatar_id`.
                    package var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/html_url`.
                    package var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/node_id`.
                    package var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/login`.
                    package var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/organizations_url`.
                    package var organizationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/received_events_url`.
                    package var receivedEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/repos_url`.
                    package var reposUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/site_admin`.
                    package var siteAdmin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/starred_url`.
                    package var starredUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/subscriptions_url`.
                    package var subscriptionsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/type`.
                    package var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/head/user/url`.
                    package var url: Swift.String
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - nodeId:
                    ///   - login:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    package init(
                        avatarUrl: Swift.String,
                        eventsUrl: Swift.String,
                        followersUrl: Swift.String,
                        followingUrl: Swift.String,
                        gistsUrl: Swift.String,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        nodeId: Swift.String,
                        login: Swift.String,
                        organizationsUrl: Swift.String,
                        receivedEventsUrl: Swift.String,
                        reposUrl: Swift.String,
                        siteAdmin: Swift.Bool,
                        starredUrl: Swift.String,
                        subscriptionsUrl: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatarUrl = avatarUrl
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.nodeId = nodeId
                        self.login = login
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case nodeId = "node_id"
                        case login
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                package var user: Components.Schemas.PullRequest.HeadPayload.UserPayload
                /// Creates a new `HeadPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.PullRequest.HeadPayload.RepoPayload? = nil,
                    sha: Swift.String,
                    user: Components.Schemas.PullRequest.HeadPayload.UserPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package var head: Components.Schemas.PullRequest.HeadPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package struct BasePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                package struct RepoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archive_url`.
                    package var archiveUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/assignees_url`.
                    package var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/blobs_url`.
                    package var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/branches_url`.
                    package var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/collaborators_url`.
                    package var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/comments_url`.
                    package var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/commits_url`.
                    package var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/compare_url`.
                    package var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contents_url`.
                    package var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/contributors_url`.
                    package var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/deployments_url`.
                    package var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/downloads_url`.
                    package var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/events_url`.
                    package var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/fork`.
                    package var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_url`.
                    package var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/full_name`.
                    package var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_commits_url`.
                    package var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_refs_url`.
                    package var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_tags_url`.
                    package var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/hooks_url`.
                    package var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/html_url`.
                    package var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/is_template`.
                    package var isTemplate: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/node_id`.
                    package var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_comment_url`.
                    package var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issue_events_url`.
                    package var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/issues_url`.
                    package var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/keys_url`.
                    package var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/labels_url`.
                    package var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/languages_url`.
                    package var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/merges_url`.
                    package var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/milestones_url`.
                    package var milestonesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/notifications_url`.
                    package var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    package struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/avatar_url`.
                        package var avatarUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/events_url`.
                        package var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/followers_url`.
                        package var followersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/following_url`.
                        package var followingUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gists_url`.
                        package var gistsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/gravatar_id`.
                        package var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/html_url`.
                        package var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/id`.
                        package var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/node_id`.
                        package var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/login`.
                        package var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/organizations_url`.
                        package var organizationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/received_events_url`.
                        package var receivedEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/repos_url`.
                        package var reposUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/site_admin`.
                        package var siteAdmin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/starred_url`.
                        package var starredUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/subscriptions_url`.
                        package var subscriptionsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/type`.
                        package var _type: Swift.String
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner/url`.
                        package var url: Swift.String
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - nodeId:
                        ///   - login:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        package init(
                            avatarUrl: Swift.String,
                            eventsUrl: Swift.String,
                            followersUrl: Swift.String,
                            followingUrl: Swift.String,
                            gistsUrl: Swift.String,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            nodeId: Swift.String,
                            login: Swift.String,
                            organizationsUrl: Swift.String,
                            receivedEventsUrl: Swift.String,
                            reposUrl: Swift.String,
                            siteAdmin: Swift.Bool,
                            starredUrl: Swift.String,
                            subscriptionsUrl: Swift.String,
                            _type: Swift.String,
                            url: Swift.String
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.nodeId = nodeId
                            self.login = login
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        package enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case nodeId = "node_id"
                            case login
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/owner`.
                    package var owner: Components.Schemas.PullRequest.BasePayload.RepoPayload.OwnerPayload
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/private`.
                    package var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pulls_url`.
                    package var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/releases_url`.
                    package var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_url`.
                    package var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/statuses_url`.
                    package var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscribers_url`.
                    package var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/subscription_url`.
                    package var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/tags_url`.
                    package var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/teams_url`.
                    package var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/trees_url`.
                    package var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/url`.
                    package var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/clone_url`.
                    package var cloneUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/default_branch`.
                    package var defaultBranch: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks`.
                    package var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/forks_count`.
                    package var forksCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/git_url`.
                    package var gitUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_downloads`.
                    package var hasDownloads: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_issues`.
                    package var hasIssues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_projects`.
                    package var hasProjects: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_wiki`.
                    package var hasWiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_pages`.
                    package var hasPages: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/has_discussions`.
                    package var hasDiscussions: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/homepage`.
                    package var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/language`.
                    package var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/master_branch`.
                    package var masterBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/archived`.
                    package var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/disabled`.
                    package var disabled: Swift.Bool
                    /// The repository visibility: public, private, or internal.
                    ///
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/visibility`.
                    package var visibility: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/mirror_url`.
                    package var mirrorUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues`.
                    package var openIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/open_issues_count`.
                    package var openIssuesCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    package struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/admin`.
                        package var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/maintain`.
                        package var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/push`.
                        package var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/triage`.
                        package var triage: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions/pull`.
                        package var pull: Swift.Bool
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - push:
                        ///   - triage:
                        ///   - pull:
                        package init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil,
                            pull: Swift.Bool
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.push = push
                            self.triage = triage
                            self.pull = pull
                        }
                        package enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case push
                            case triage
                            case pull
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/permissions`.
                    package var permissions: Components.Schemas.PullRequest.BasePayload.RepoPayload.PermissionsPayload?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/temp_clone_token`.
                    package var tempCloneToken: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_merge_commit`.
                    package var allowMergeCommit: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_squash_merge`.
                    package var allowSquashMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_rebase_merge`.
                    package var allowRebaseMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/license`.
                    package var license: Components.Schemas.NullableLicenseSimple?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/pushed_at`.
                    package var pushedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/size`.
                    package var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/ssh_url`.
                    package var sshUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/stargazers_count`.
                    package var stargazersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/svn_url`.
                    package var svnUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/topics`.
                    package var topics: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers`.
                    package var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/watchers_count`.
                    package var watchersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/created_at`.
                    package var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/updated_at`.
                    package var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/allow_forking`.
                    package var allowForking: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/repo/web_commit_signoff_required`.
                    package var webCommitSignoffRequired: Swift.Bool?
                    /// Creates a new `RepoPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - isTemplate:
                    ///   - nodeId:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    ///   - cloneUrl:
                    ///   - defaultBranch:
                    ///   - forks:
                    ///   - forksCount:
                    ///   - gitUrl:
                    ///   - hasDownloads:
                    ///   - hasIssues:
                    ///   - hasProjects:
                    ///   - hasWiki:
                    ///   - hasPages:
                    ///   - hasDiscussions:
                    ///   - homepage:
                    ///   - language:
                    ///   - masterBranch:
                    ///   - archived:
                    ///   - disabled:
                    ///   - visibility: The repository visibility: public, private, or internal.
                    ///   - mirrorUrl:
                    ///   - openIssues:
                    ///   - openIssuesCount:
                    ///   - permissions:
                    ///   - tempCloneToken:
                    ///   - allowMergeCommit:
                    ///   - allowSquashMerge:
                    ///   - allowRebaseMerge:
                    ///   - license:
                    ///   - pushedAt:
                    ///   - size:
                    ///   - sshUrl:
                    ///   - stargazersCount:
                    ///   - svnUrl:
                    ///   - topics:
                    ///   - watchers:
                    ///   - watchersCount:
                    ///   - createdAt:
                    ///   - updatedAt:
                    ///   - allowForking:
                    ///   - webCommitSignoffRequired:
                    package init(
                        archiveUrl: Swift.String,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        isTemplate: Swift.Bool? = nil,
                        nodeId: Swift.String,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        languagesUrl: Swift.String,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        name: Swift.String,
                        notificationsUrl: Swift.String,
                        owner: Components.Schemas.PullRequest.BasePayload.RepoPayload.OwnerPayload,
                        _private: Swift.Bool,
                        pullsUrl: Swift.String,
                        releasesUrl: Swift.String,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        treesUrl: Swift.String,
                        url: Swift.String,
                        cloneUrl: Swift.String,
                        defaultBranch: Swift.String,
                        forks: Swift.Int,
                        forksCount: Swift.Int,
                        gitUrl: Swift.String,
                        hasDownloads: Swift.Bool,
                        hasIssues: Swift.Bool,
                        hasProjects: Swift.Bool,
                        hasWiki: Swift.Bool,
                        hasPages: Swift.Bool,
                        hasDiscussions: Swift.Bool,
                        homepage: Swift.String? = nil,
                        language: Swift.String? = nil,
                        masterBranch: Swift.String? = nil,
                        archived: Swift.Bool,
                        disabled: Swift.Bool,
                        visibility: Swift.String? = nil,
                        mirrorUrl: Swift.String? = nil,
                        openIssues: Swift.Int,
                        openIssuesCount: Swift.Int,
                        permissions: Components.Schemas.PullRequest.BasePayload.RepoPayload.PermissionsPayload? = nil,
                        tempCloneToken: Swift.String? = nil,
                        allowMergeCommit: Swift.Bool? = nil,
                        allowSquashMerge: Swift.Bool? = nil,
                        allowRebaseMerge: Swift.Bool? = nil,
                        license: Components.Schemas.NullableLicenseSimple? = nil,
                        pushedAt: Foundation.Date,
                        size: Swift.Int,
                        sshUrl: Swift.String,
                        stargazersCount: Swift.Int,
                        svnUrl: Swift.String,
                        topics: [Swift.String]? = nil,
                        watchers: Swift.Int,
                        watchersCount: Swift.Int,
                        createdAt: Foundation.Date,
                        updatedAt: Foundation.Date,
                        allowForking: Swift.Bool? = nil,
                        webCommitSignoffRequired: Swift.Bool? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.isTemplate = isTemplate
                        self.nodeId = nodeId
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                        self.cloneUrl = cloneUrl
                        self.defaultBranch = defaultBranch
                        self.forks = forks
                        self.forksCount = forksCount
                        self.gitUrl = gitUrl
                        self.hasDownloads = hasDownloads
                        self.hasIssues = hasIssues
                        self.hasProjects = hasProjects
                        self.hasWiki = hasWiki
                        self.hasPages = hasPages
                        self.hasDiscussions = hasDiscussions
                        self.homepage = homepage
                        self.language = language
                        self.masterBranch = masterBranch
                        self.archived = archived
                        self.disabled = disabled
                        self.visibility = visibility
                        self.mirrorUrl = mirrorUrl
                        self.openIssues = openIssues
                        self.openIssuesCount = openIssuesCount
                        self.permissions = permissions
                        self.tempCloneToken = tempCloneToken
                        self.allowMergeCommit = allowMergeCommit
                        self.allowSquashMerge = allowSquashMerge
                        self.allowRebaseMerge = allowRebaseMerge
                        self.license = license
                        self.pushedAt = pushedAt
                        self.size = size
                        self.sshUrl = sshUrl
                        self.stargazersCount = stargazersCount
                        self.svnUrl = svnUrl
                        self.topics = topics
                        self.watchers = watchers
                        self.watchersCount = watchersCount
                        self.createdAt = createdAt
                        self.updatedAt = updatedAt
                        self.allowForking = allowForking
                        self.webCommitSignoffRequired = webCommitSignoffRequired
                    }
                    package enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case isTemplate = "is_template"
                        case nodeId = "node_id"
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                        case cloneUrl = "clone_url"
                        case defaultBranch = "default_branch"
                        case forks
                        case forksCount = "forks_count"
                        case gitUrl = "git_url"
                        case hasDownloads = "has_downloads"
                        case hasIssues = "has_issues"
                        case hasProjects = "has_projects"
                        case hasWiki = "has_wiki"
                        case hasPages = "has_pages"
                        case hasDiscussions = "has_discussions"
                        case homepage
                        case language
                        case masterBranch = "master_branch"
                        case archived
                        case disabled
                        case visibility
                        case mirrorUrl = "mirror_url"
                        case openIssues = "open_issues"
                        case openIssuesCount = "open_issues_count"
                        case permissions
                        case tempCloneToken = "temp_clone_token"
                        case allowMergeCommit = "allow_merge_commit"
                        case allowSquashMerge = "allow_squash_merge"
                        case allowRebaseMerge = "allow_rebase_merge"
                        case license
                        case pushedAt = "pushed_at"
                        case size
                        case sshUrl = "ssh_url"
                        case stargazersCount = "stargazers_count"
                        case svnUrl = "svn_url"
                        case topics
                        case watchers
                        case watchersCount = "watchers_count"
                        case createdAt = "created_at"
                        case updatedAt = "updated_at"
                        case allowForking = "allow_forking"
                        case webCommitSignoffRequired = "web_commit_signoff_required"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                package var repo: Components.Schemas.PullRequest.BasePayload.RepoPayload
                /// - Remark: Generated from `#/components/schemas/pull-request/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                package struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/avatar_url`.
                    package var avatarUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/events_url`.
                    package var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/followers_url`.
                    package var followersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/following_url`.
                    package var followingUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gists_url`.
                    package var gistsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/gravatar_id`.
                    package var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/html_url`.
                    package var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/id`.
                    package var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/node_id`.
                    package var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/login`.
                    package var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/organizations_url`.
                    package var organizationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/received_events_url`.
                    package var receivedEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/repos_url`.
                    package var reposUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/site_admin`.
                    package var siteAdmin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/starred_url`.
                    package var starredUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/subscriptions_url`.
                    package var subscriptionsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/type`.
                    package var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request/base/user/url`.
                    package var url: Swift.String
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - nodeId:
                    ///   - login:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    package init(
                        avatarUrl: Swift.String,
                        eventsUrl: Swift.String,
                        followersUrl: Swift.String,
                        followingUrl: Swift.String,
                        gistsUrl: Swift.String,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        nodeId: Swift.String,
                        login: Swift.String,
                        organizationsUrl: Swift.String,
                        receivedEventsUrl: Swift.String,
                        reposUrl: Swift.String,
                        siteAdmin: Swift.Bool,
                        starredUrl: Swift.String,
                        subscriptionsUrl: Swift.String,
                        _type: Swift.String,
                        url: Swift.String
                    ) {
                        self.avatarUrl = avatarUrl
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.nodeId = nodeId
                        self.login = login
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case nodeId = "node_id"
                        case login
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                package var user: Components.Schemas.PullRequest.BasePayload.UserPayload
                /// Creates a new `BasePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.PullRequest.BasePayload.RepoPayload,
                    sha: Swift.String,
                    user: Components.Schemas.PullRequest.BasePayload.UserPayload
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package var base: Components.Schemas.PullRequest.BasePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/comments`.
                package var comments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/commits`.
                package var commits: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/statuses`.
                package var statuses: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/html`.
                package var html: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/issue`.
                package var issue: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comments`.
                package var reviewComments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comment`.
                package var reviewComment: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/self`.
                package var _self: Components.Schemas.Link
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - reviewComments:
                ///   - reviewComment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.Link,
                    commits: Components.Schemas.Link,
                    statuses: Components.Schemas.Link,
                    html: Components.Schemas.Link,
                    issue: Components.Schemas.Link,
                    reviewComments: Components.Schemas.Link,
                    reviewComment: Components.Schemas.Link,
                    _self: Components.Schemas.Link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.reviewComments = reviewComments
                    self.reviewComment = reviewComment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case reviewComments = "review_comments"
                    case reviewComment = "review_comment"
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package var _links: Components.Schemas.PullRequest._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/pull-request/auto_merge`.
            package var autoMerge: Components.Schemas.AutoMerge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged`.
            package var merged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable`.
            package var mergeable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/rebaseable`.
            package var rebaseable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable_state`.
            package var mergeableState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_by`.
            package var mergedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request/comments`.
            package var comments: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments`.
            package var reviewComments: Swift.Int?
            /// Indicates whether maintainers can modify the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/maintainer_can_modify`.
            package var maintainerCanModify: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/commits`.
            package var commits: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/additions`.
            package var additions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/deletions`.
            package var deletions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/changed_files`.
            package var changedFiles: Swift.Int?
            /// Creates a new `PullRequest`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - issueUrl:
            ///   - commitsUrl:
            ///   - reviewCommentsUrl:
            ///   - reviewCommentUrl:
            ///   - commentsUrl:
            ///   - statusesUrl:
            ///   - number: Number uniquely identifying the pull request within its repository.
            ///   - state: State of this Pull Request. Either `open` or `closed`.
            ///   - locked:
            ///   - title: The title of the pull request.
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - activeLockReason:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - mergedAt:
            ///   - mergeCommitSha:
            ///   - assignee:
            ///   - assignees:
            ///   - requestedReviewers:
            ///   - requestedTeams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - authorAssociation:
            ///   - autoMerge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            ///   - merged:
            ///   - mergeable:
            ///   - rebaseable:
            ///   - mergeableState:
            ///   - mergedBy:
            ///   - comments:
            ///   - reviewComments:
            ///   - maintainerCanModify: Indicates whether maintainers can modify the pull request.
            ///   - commits:
            ///   - additions:
            ///   - deletions:
            ///   - changedFiles:
            package init(
                url: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                issueUrl: Swift.String,
                commitsUrl: Swift.String,
                reviewCommentsUrl: Swift.String,
                reviewCommentUrl: Swift.String,
                commentsUrl: Swift.String,
                statusesUrl: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.PullRequest.StatePayload,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.SimpleUser,
                body: Swift.String? = nil,
                labels: Components.Schemas.PullRequest.LabelsPayload,
                milestone: Components.Schemas.NullableMilestone? = nil,
                activeLockReason: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                mergedAt: Foundation.Date? = nil,
                mergeCommitSha: Swift.String? = nil,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                requestedReviewers: [Components.Schemas.SimpleUser]? = nil,
                requestedTeams: [Components.Schemas.TeamSimple]? = nil,
                head: Components.Schemas.PullRequest.HeadPayload,
                base: Components.Schemas.PullRequest.BasePayload,
                _links: Components.Schemas.PullRequest._LinksPayload,
                authorAssociation: Components.Schemas.AuthorAssociation,
                autoMerge: Components.Schemas.AutoMerge? = nil,
                draft: Swift.Bool? = nil,
                merged: Swift.Bool? = nil,
                mergeable: Swift.Bool? = nil,
                rebaseable: Swift.Bool? = nil,
                mergeableState: Swift.String? = nil,
                mergedBy: Components.Schemas.NullableSimpleUser? = nil,
                comments: Swift.Int? = nil,
                reviewComments: Swift.Int? = nil,
                maintainerCanModify: Swift.Bool? = nil,
                commits: Swift.Int? = nil,
                additions: Swift.Int? = nil,
                deletions: Swift.Int? = nil,
                changedFiles: Swift.Int? = nil
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.issueUrl = issueUrl
                self.commitsUrl = commitsUrl
                self.reviewCommentsUrl = reviewCommentsUrl
                self.reviewCommentUrl = reviewCommentUrl
                self.commentsUrl = commentsUrl
                self.statusesUrl = statusesUrl
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.activeLockReason = activeLockReason
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.mergedAt = mergedAt
                self.mergeCommitSha = mergeCommitSha
                self.assignee = assignee
                self.assignees = assignees
                self.requestedReviewers = requestedReviewers
                self.requestedTeams = requestedTeams
                self.head = head
                self.base = base
                self._links = _links
                self.authorAssociation = authorAssociation
                self.autoMerge = autoMerge
                self.draft = draft
                self.merged = merged
                self.mergeable = mergeable
                self.rebaseable = rebaseable
                self.mergeableState = mergeableState
                self.mergedBy = mergedBy
                self.comments = comments
                self.reviewComments = reviewComments
                self.maintainerCanModify = maintainerCanModify
                self.commits = commits
                self.additions = additions
                self.deletions = deletions
                self.changedFiles = changedFiles
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case issueUrl = "issue_url"
                case commitsUrl = "commits_url"
                case reviewCommentsUrl = "review_comments_url"
                case reviewCommentUrl = "review_comment_url"
                case commentsUrl = "comments_url"
                case statusesUrl = "statuses_url"
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case activeLockReason = "active_lock_reason"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case mergedAt = "merged_at"
                case mergeCommitSha = "merge_commit_sha"
                case assignee
                case assignees
                case requestedReviewers = "requested_reviewers"
                case requestedTeams = "requested_teams"
                case head
                case base
                case _links
                case authorAssociation = "author_association"
                case autoMerge = "auto_merge"
                case draft
                case merged
                case mergeable
                case rebaseable
                case mergeableState = "mergeable_state"
                case mergedBy = "merged_by"
                case comments
                case reviewComments = "review_comments"
                case maintainerCanModify = "maintainer_can_modify"
                case commits
                case additions
                case deletions
                case changedFiles = "changed_files"
            }
        }
        /// Pull Request Reviews are reviews on pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review`.
        package struct PullRequestReview: Codable, Hashable, Sendable {
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-review/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/pull_request_url`.
            package var pullRequestUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                package struct HtmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `HtmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                package var html: Components.Schemas.PullRequestReview._LinksPayload.HtmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                package struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                package var pullRequest: Components.Schemas.PullRequestReview._LinksPayload.PullRequestPayload
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pullRequest:
                package init(
                    html: Components.Schemas.PullRequestReview._LinksPayload.HtmlPayload,
                    pullRequest: Components.Schemas.PullRequestReview._LinksPayload.PullRequestPayload
                ) {
                    self.html = html
                    self.pullRequest = pullRequest
                }
                package enum CodingKeys: String, CodingKey {
                    case html
                    case pullRequest = "pull_request"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            package var _links: Components.Schemas.PullRequestReview._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-review/submitted_at`.
            package var submittedAt: Foundation.Date?
            /// A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// Creates a new `PullRequestReview`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the review
            ///   - nodeId:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - htmlUrl:
            ///   - pullRequestUrl:
            ///   - _links:
            ///   - submittedAt:
            ///   - commitId: A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - authorAssociation:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                body: Swift.String,
                state: Swift.String,
                htmlUrl: Swift.String,
                pullRequestUrl: Swift.String,
                _links: Components.Schemas.PullRequestReview._LinksPayload,
                submittedAt: Foundation.Date? = nil,
                commitId: Swift.String? = nil,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                authorAssociation: Components.Schemas.AuthorAssociation
            ) {
                self.id = id
                self.nodeId = nodeId
                self.user = user
                self.body = body
                self.state = state
                self.htmlUrl = htmlUrl
                self.pullRequestUrl = pullRequestUrl
                self._links = _links
                self.submittedAt = submittedAt
                self.commitId = commitId
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.authorAssociation = authorAssociation
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case user
                case body
                case state
                case htmlUrl = "html_url"
                case pullRequestUrl = "pull_request_url"
                case _links
                case submittedAt = "submitted_at"
                case commitId = "commit_id"
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case authorAssociation = "author_association"
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        package struct ReleaseAsset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            package var browserDownloadUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            package var nodeId: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            package var label: Swift.String?
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case uploaded = "uploaded"
                case open = "open"
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            package var state: Components.Schemas.ReleaseAsset.StatePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            package var contentType: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            package var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            package var downloadCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            package var uploader: Components.Schemas.NullableSimpleUser?
            /// Creates a new `ReleaseAsset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browserDownloadUrl:
            ///   - id:
            ///   - nodeId:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - contentType:
            ///   - size:
            ///   - downloadCount:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - uploader:
            package init(
                url: Swift.String,
                browserDownloadUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                label: Swift.String? = nil,
                state: Components.Schemas.ReleaseAsset.StatePayload,
                contentType: Swift.String,
                size: Swift.Int,
                downloadCount: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                uploader: Components.Schemas.NullableSimpleUser? = nil
            ) {
                self.url = url
                self.browserDownloadUrl = browserDownloadUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.label = label
                self.state = state
                self.contentType = contentType
                self.size = size
                self.downloadCount = downloadCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.uploader = uploader
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case browserDownloadUrl = "browser_download_url"
                case id
                case nodeId = "node_id"
                case name
                case label
                case state
                case contentType = "content_type"
                case size
                case downloadCount = "download_count"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        package struct Release: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            package var assetsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            package var uploadUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            package var tarballUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            package var zipballUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            package var nodeId: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            package var tagName: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            package var targetCommitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body`.
            package var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            package var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            package var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            package var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/release/author`.
            package var author: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            package var assets: [Components.Schemas.ReleaseAsset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            package var mentionsCount: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            package var discussionUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `Release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - assetsUrl:
            ///   - uploadUrl:
            ///   - tarballUrl:
            ///   - zipballUrl:
            ///   - id:
            ///   - nodeId:
            ///   - tagName: The name of the tag.
            ///   - targetCommitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - createdAt:
            ///   - publishedAt:
            ///   - author:
            ///   - assets:
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - mentionsCount:
            ///   - discussionUrl: The URL of the release discussion.
            ///   - reactions:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                assetsUrl: Swift.String,
                uploadUrl: Swift.String,
                tarballUrl: Swift.String? = nil,
                zipballUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                tagName: Swift.String,
                targetCommitish: Swift.String,
                name: Swift.String? = nil,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                createdAt: Foundation.Date,
                publishedAt: Foundation.Date? = nil,
                author: Components.Schemas.SimpleUser,
                assets: [Components.Schemas.ReleaseAsset],
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                mentionsCount: Swift.Int? = nil,
                discussionUrl: Swift.String? = nil,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.assetsUrl = assetsUrl
                self.uploadUrl = uploadUrl
                self.tarballUrl = tarballUrl
                self.zipballUrl = zipballUrl
                self.id = id
                self.nodeId = nodeId
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.createdAt = createdAt
                self.publishedAt = publishedAt
                self.author = author
                self.assets = assets
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.mentionsCount = mentionsCount
                self.discussionUrl = discussionUrl
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case assetsUrl = "assets_url"
                case uploadUrl = "upload_url"
                case tarballUrl = "tarball_url"
                case zipballUrl = "zipball_url"
                case id
                case nodeId = "node_id"
                case tagName = "tag_name"
                case targetCommitish = "target_commitish"
                case name
                case body
                case draft
                case prerelease
                case createdAt = "created_at"
                case publishedAt = "published_at"
                case author
                case assets
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case mentionsCount = "mentions_count"
                case discussionUrl = "discussion_url"
                case reactions
            }
        }
        /// Tag
        ///
        /// - Remark: Generated from `#/components/schemas/tag`.
        package struct Tag: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/tag/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package struct CommitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/tag/commit/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/tag/commit/url`.
                package var url: Swift.String
                /// Creates a new `CommitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                package init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package var commit: Components.Schemas.Tag.CommitPayload
            /// - Remark: Generated from `#/components/schemas/tag/zipball_url`.
            package var zipballUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/tarball_url`.
            package var tarballUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/node_id`.
            package var nodeId: Swift.String
            /// Creates a new `Tag`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - zipballUrl:
            ///   - tarballUrl:
            ///   - nodeId:
            package init(
                name: Swift.String,
                commit: Components.Schemas.Tag.CommitPayload,
                zipballUrl: Swift.String,
                tarballUrl: Swift.String,
                nodeId: Swift.String
            ) {
                self.name = name
                self.commit = commit
                self.zipballUrl = zipballUrl
                self.tarballUrl = tarballUrl
                self.nodeId = nodeId
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case commit
                case zipballUrl = "zipball_url"
                case tarballUrl = "tarball_url"
                case nodeId = "node_id"
            }
        }
        /// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        package struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            package var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            package var nodeId: Swift.String?
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            package init(
                id: Swift.Int,
                nodeId: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {
        /// The number of results per page (max 100).
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        package typealias PerPage = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        package typealias Cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        package typealias DeliveryId = Swift.Int
        /// Page number of the results to fetch.
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        package typealias Page = Swift.Int
        /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        package typealias Since = Foundation.Date
        /// The unique identifier of the installation.
        ///
        /// - Remark: Generated from `#/components/parameters/installation-id`.
        package typealias InstallationId = Swift.Int
        /// The client ID of the GitHub app.
        ///
        /// - Remark: Generated from `#/components/parameters/client-id`.
        package typealias ClientId = Swift.String
        /// - Remark: Generated from `#/components/parameters/app-slug`.
        package typealias AppSlug = Swift.String
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        package typealias Enterprise = Swift.String
        /// A comma-separated list of states. If specified, only alerts with these states will be returned.
        ///
        /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-states`.
        package typealias DependabotAlertCommaSeparatedStates = Swift.String
        /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
        ///
        /// Can be: `low`, `medium`, `high`, `critical`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-severities`.
        package typealias DependabotAlertCommaSeparatedSeverities = Swift.String
        /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
        ///
        /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-ecosystems`.
        package typealias DependabotAlertCommaSeparatedEcosystems = Swift.String
        /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-packages`.
        package typealias DependabotAlertCommaSeparatedPackages = Swift.String
        /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
        @frozen package enum DependabotAlertScope: String, Codable, Hashable, Sendable, CaseIterable {
            case development = "development"
            case runtime = "runtime"
        }
        /// The property by which to sort the results.
        /// `created` means when the alert was created.
        /// `updated` means when the alert's state last changed.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
        @frozen package enum DependabotAlertSort: String, Codable, Hashable, Sendable, CaseIterable {
            case created = "created"
            case updated = "updated"
        }
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen package enum Direction: String, Codable, Hashable, Sendable, CaseIterable {
            case asc = "asc"
            case desc = "desc"
        }
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        package typealias PaginationBefore = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        package typealias PaginationAfter = Swift.String
        /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
        /// This parameter must not be used in combination with `last`.
        /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-first`.
        package typealias PaginationFirst = Swift.Int
        /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
        /// This parameter must not be used in combination with `first`.
        /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-last`.
        package typealias PaginationLast = Swift.Int
        /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
        @frozen package enum SecretScanningAlertState: String, Codable, Hashable, Sendable, CaseIterable {
            case open = "open"
            case resolved = "resolved"
        }
        /// A comma-separated list of secret types to return. By default all secret types are returned.
        /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
        /// for a complete list of secret types.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-secret-type`.
        package typealias SecretScanningAlertSecretType = Swift.String
        /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-resolution`.
        package typealias SecretScanningAlertResolution = Swift.String
        /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
        @frozen package enum SecretScanningAlertSort: String, Codable, Hashable, Sendable, CaseIterable {
            case created = "created"
            case updated = "updated"
        }
        /// The unique identifier of the gist.
        ///
        /// - Remark: Generated from `#/components/parameters/gist-id`.
        package typealias GistId = Swift.String
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        package typealias CommentId = Swift.Int
        /// A list of comma separated label names. Example: `bug,ui,@high`
        ///
        /// - Remark: Generated from `#/components/parameters/labels`.
        package typealias Labels = Swift.String
        /// account_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/account-id`.
        package typealias AccountId = Swift.Int
        /// The unique identifier of the plan.
        ///
        /// - Remark: Generated from `#/components/parameters/plan-id`.
        package typealias PlanId = Swift.Int
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen package enum Sort: String, Codable, Hashable, Sendable, CaseIterable {
            case created = "created"
            case updated = "updated"
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        package typealias Owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        package typealias Repo = Swift.String
        /// If `true`, show notifications marked as read.
        ///
        /// - Remark: Generated from `#/components/parameters/all`.
        package typealias All = Swift.Bool
        /// If `true`, only shows notifications in which the user is directly participating or mentioned.
        ///
        /// - Remark: Generated from `#/components/parameters/participating`.
        package typealias Participating = Swift.Bool
        /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before`.
        package typealias Before = Foundation.Date
        /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
        ///
        /// - Remark: Generated from `#/components/parameters/thread-id`.
        package typealias ThreadId = Swift.Int
        /// An organization ID. Only return organizations with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-org`.
        package typealias SinceOrg = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        package typealias Org = Swift.String
        /// The unique identifier of the repository.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id`.
        package typealias RepositoryId = Swift.Int
        /// Unique identifier of the self-hosted runner.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-id`.
        package typealias RunnerId = Swift.Int
        /// The name of a self-hosted runner's custom label.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-label-name`.
        package typealias RunnerLabelName = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        package typealias SecretName = Swift.String
        /// The number of results per page (max 30).
        ///
        /// - Remark: Generated from `#/components/parameters/variables-per-page`.
        package typealias VariablesPerPage = Swift.Int
        /// The name of the variable.
        ///
        /// - Remark: Generated from `#/components/parameters/variable-name`.
        package typealias VariableName = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        package typealias Username = Swift.String
        /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-name`.
        package typealias ToolName = Components.Schemas.CodeScanningAnalysisToolName
        /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
        ///
        /// - Remark: Generated from `#/components/parameters/tool-guid`.
        package typealias ToolGuid = Components.Schemas.CodeScanningAnalysisToolGuid
        /// The unique identifier of the hook.
        ///
        /// - Remark: Generated from `#/components/parameters/hook-id`.
        package typealias HookId = Swift.Int
        /// The unique identifier of the invitation.
        ///
        /// - Remark: Generated from `#/components/parameters/invitation-id`.
        package typealias InvitationId = Swift.Int
        /// The name of the codespace.
        ///
        /// - Remark: Generated from `#/components/parameters/codespace-name`.
        package typealias CodespaceName = Swift.String
        /// The unique identifier of the migration.
        ///
        /// - Remark: Generated from `#/components/parameters/migration-id`.
        package typealias MigrationId = Swift.Int
        /// repo_name parameter
        ///
        /// - Remark: Generated from `#/components/parameters/repo-name`.
        package typealias RepoName = Swift.String
        /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
        ///
        /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
        /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        ///
        /// - Remark: Generated from `#/components/parameters/package-visibility`.
        @frozen package enum PackageVisibility: String, Codable, Hashable, Sendable, CaseIterable {
            case _public = "public"
            case _private = "private"
            case _internal = "internal"
        }
        /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        ///
        /// - Remark: Generated from `#/components/parameters/package-type`.
        @frozen package enum PackageType: String, Codable, Hashable, Sendable, CaseIterable {
            case npm = "npm"
            case maven = "maven"
            case rubygems = "rubygems"
            case docker = "docker"
            case nuget = "nuget"
            case container = "container"
        }
        /// The name of the package.
        ///
        /// - Remark: Generated from `#/components/parameters/package-name`.
        package typealias PackageName = Swift.String
        /// Unique identifier of the package version.
        ///
        /// - Remark: Generated from `#/components/parameters/package-version-id`.
        package typealias PackageVersionId = Swift.Int
        /// The property by which to sort the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
        @frozen package enum PersonalAccessTokenSort: String, Codable, Hashable, Sendable, CaseIterable {
            case createdAt = "created_at"
        }
        /// A list of owner usernames to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-owner`.
        package typealias PersonalAccessTokenOwner = [Swift.String]
        /// The name of the repository to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-repository`.
        package typealias PersonalAccessTokenRepository = Swift.String
        /// The permission to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-permission`.
        package typealias PersonalAccessTokenPermission = Swift.String
        /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-before`.
        package typealias PersonalAccessTokenBefore = Foundation.Date
        /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-after`.
        package typealias PersonalAccessTokenAfter = Foundation.Date
        /// The unique identifier of the fine-grained personal access token.
        ///
        /// - Remark: Generated from `#/components/parameters/fine-grained-personal-access-token-id`.
        package typealias FineGrainedPersonalAccessTokenId = Swift.Int
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-before-org-repo`.
        package typealias SecretScanningPaginationBeforeOrgRepo = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-after-org-repo`.
        package typealias SecretScanningPaginationAfterOrgRepo = Swift.String
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        package typealias TeamSlug = Swift.String
        /// The number that identifies the discussion.
        ///
        /// - Remark: Generated from `#/components/parameters/discussion-number`.
        package typealias DiscussionNumber = Swift.Int
        /// The number that identifies the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-number`.
        package typealias CommentNumber = Swift.Int
        /// The unique identifier of the reaction.
        ///
        /// - Remark: Generated from `#/components/parameters/reaction-id`.
        package typealias ReactionId = Swift.Int
        /// The unique identifier of the project.
        ///
        /// - Remark: Generated from `#/components/parameters/project-id`.
        package typealias ProjectId = Swift.Int
        /// The security feature to enable or disable.
        ///
        /// - Remark: Generated from `#/components/parameters/security-product`.
        @frozen package enum SecurityProduct: String, Codable, Hashable, Sendable, CaseIterable {
            case dependencyGraph = "dependency_graph"
            case dependabotAlerts = "dependabot_alerts"
            case dependabotSecurityUpdates = "dependabot_security_updates"
            case advancedSecurity = "advanced_security"
            case codeScanningDefaultSetup = "code_scanning_default_setup"
            case secretScanning = "secret_scanning"
            case secretScanningPushProtection = "secret_scanning_push_protection"
        }
        /// The action to take.
        ///
        /// `enable_all` means to enable the specified security feature for all repositories in the organization.
        /// `disable_all` means to disable the specified security feature for all repositories in the organization.
        ///
        /// - Remark: Generated from `#/components/parameters/org-security-product-enablement`.
        @frozen package enum OrgSecurityProductEnablement: String, Codable, Hashable, Sendable, CaseIterable {
            case enableAll = "enable_all"
            case disableAll = "disable_all"
        }
        /// The unique identifier of the card.
        ///
        /// - Remark: Generated from `#/components/parameters/card-id`.
        package typealias CardId = Swift.Int
        /// The unique identifier of the column.
        ///
        /// - Remark: Generated from `#/components/parameters/column-id`.
        package typealias ColumnId = Swift.Int
        /// The unique identifier of the artifact.
        ///
        /// - Remark: Generated from `#/components/parameters/artifact-id`.
        package typealias ArtifactId = Swift.Int
        /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-git-ref-full`.
        package typealias ActionsCacheGitRefFull = Swift.String
        /// An explicit key or prefix for identifying the cache
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key`.
        package typealias ActionsCacheKey = Swift.String
        /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-list-sort`.
        @frozen package enum ActionsCacheListSort: String, Codable, Hashable, Sendable, CaseIterable {
            case createdAt = "created_at"
            case lastAccessedAt = "last_accessed_at"
            case sizeInBytes = "size_in_bytes"
        }
        /// A key for identifying the cache.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key-required`.
        package typealias ActionsCacheKeyRequired = Swift.String
        /// The unique identifier of the GitHub Actions cache.
        ///
        /// - Remark: Generated from `#/components/parameters/cache-id`.
        package typealias CacheId = Swift.Int
        /// The unique identifier of the job.
        ///
        /// - Remark: Generated from `#/components/parameters/job-id`.
        package typealias JobId = Swift.Int
        /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/actor`.
        package typealias Actor = Swift.String
        /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-branch`.
        package typealias WorkflowRunBranch = Swift.String
        /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        ///
        /// - Remark: Generated from `#/components/parameters/event`.
        package typealias Event = Swift.String
        /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
        @frozen package enum WorkflowRunStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case completed = "completed"
            case actionRequired = "action_required"
            case cancelled = "cancelled"
            case failure = "failure"
            case neutral = "neutral"
            case skipped = "skipped"
            case stale = "stale"
            case success = "success"
            case timedOut = "timed_out"
            case inProgress = "in_progress"
            case queued = "queued"
            case requested = "requested"
            case waiting = "waiting"
            case pending = "pending"
        }
        /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
        ///
        /// - Remark: Generated from `#/components/parameters/created`.
        package typealias Created = Foundation.Date
        /// If `true` pull requests are omitted from the response (empty array).
        ///
        /// - Remark: Generated from `#/components/parameters/exclude-pull-requests`.
        package typealias ExcludePullRequests = Swift.Bool
        /// Returns workflow runs with the `check_suite_id` that you specify.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-check-suite-id`.
        package typealias WorkflowRunCheckSuiteId = Swift.Int
        /// Only returns workflow runs that are associated with the specified `head_sha`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-head-sha`.
        package typealias WorkflowRunHeadSha = Swift.String
        /// The unique identifier of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/run-id`.
        package typealias RunId = Swift.Int
        /// The attempt number of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/attempt-number`.
        package typealias AttemptNumber = Swift.Int
        /// The ID of the workflow. You can also pass the workflow file name as a string.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-id`.
        @frozen package enum WorkflowId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
            case case1(Swift.Int)
            /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
            case case2(Swift.String)
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// The unique identifier of the autolink.
        ///
        /// - Remark: Generated from `#/components/parameters/autolink-id`.
        package typealias AutolinkId = Swift.Int
        /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
        ///
        /// - Remark: Generated from `#/components/parameters/branch`.
        package typealias Branch = Swift.String
        /// The unique identifier of the check run.
        ///
        /// - Remark: Generated from `#/components/parameters/check-run-id`.
        package typealias CheckRunId = Swift.Int
        /// The unique identifier of the check suite.
        ///
        /// - Remark: Generated from `#/components/parameters/check-suite-id`.
        package typealias CheckSuiteId = Swift.Int
        /// Returns check runs with the specified `name`.
        ///
        /// - Remark: Generated from `#/components/parameters/check-name`.
        package typealias CheckName = Swift.String
        /// Returns check runs with the specified `status`.
        ///
        /// - Remark: Generated from `#/components/parameters/status`.
        @frozen package enum Status: String, Codable, Hashable, Sendable, CaseIterable {
            case queued = "queued"
            case inProgress = "in_progress"
            case completed = "completed"
        }
        /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/git-ref`.
        package typealias GitRef = Components.Schemas.CodeScanningRef
        /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/alert-number`.
        package typealias AlertNumber = Components.Schemas.AlertNumber
        /// The SHA of the commit.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-sha`.
        package typealias CommitSha = Swift.String
        /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-ref`.
        package typealias CommitRef = Swift.String
        /// A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-manifests`.
        package typealias DependabotAlertCommaSeparatedManifests = Swift.String
        /// The number that identifies a Dependabot alert in its repository.
        /// You can find this at the end of the URL for a Dependabot alert within GitHub,
        /// or in `number` fields in the response from the
        /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-number`.
        package typealias DependabotAlertNumber = Components.Schemas.AlertNumber
        /// The full path, relative to the repository root, of the dependency manifest file.
        ///
        /// - Remark: Generated from `#/components/parameters/manifest-path`.
        package typealias ManifestPath = Swift.String
        /// deployment_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/deployment-id`.
        package typealias DeploymentId = Swift.Int
        /// The name of the environment.
        ///
        /// - Remark: Generated from `#/components/parameters/environment-name`.
        package typealias EnvironmentName = Swift.String
        /// The unique identifier of the branch policy.
        ///
        /// - Remark: Generated from `#/components/parameters/branch-policy-id`.
        package typealias BranchPolicyId = Swift.Int
        /// The unique identifier of the protection rule.
        ///
        /// - Remark: Generated from `#/components/parameters/protection-rule-id`.
        package typealias ProtectionRuleId = Swift.Int
        /// A user ID. Only return users with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-user`.
        package typealias SinceUser = Swift.Int
        /// The number that identifies the issue.
        ///
        /// - Remark: Generated from `#/components/parameters/issue-number`.
        package typealias IssueNumber = Swift.Int
        /// The unique identifier of the key.
        ///
        /// - Remark: Generated from `#/components/parameters/key-id`.
        package typealias KeyId = Swift.Int
        /// The number that identifies the milestone.
        ///
        /// - Remark: Generated from `#/components/parameters/milestone-number`.
        package typealias MilestoneNumber = Swift.Int
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        package typealias PullNumber = Swift.Int
        /// The unique identifier of the review.
        ///
        /// - Remark: Generated from `#/components/parameters/review-id`.
        package typealias ReviewId = Swift.Int
        /// The unique identifier of the asset.
        ///
        /// - Remark: Generated from `#/components/parameters/asset-id`.
        package typealias AssetId = Swift.Int
        /// The unique identifier of the release.
        ///
        /// - Remark: Generated from `#/components/parameters/release-id`.
        package typealias ReleaseId = Swift.Int
        /// The GHSA (GitHub Security Advisory) identifier of the advisory.
        ///
        /// - Remark: Generated from `#/components/parameters/ghsa_id`.
        package typealias GhsaId = Swift.String
        /// The unique identifier of the tag protection.
        ///
        /// - Remark: Generated from `#/components/parameters/tag-protection-id`.
        package typealias TagProtectionId = Swift.Int
        /// The time frame to display results for.
        ///
        /// - Remark: Generated from `#/components/parameters/per`.
        @frozen package enum Per: String, Codable, Hashable, Sendable, CaseIterable {
            case day = "day"
            case week = "week"
        }
        /// A repository ID. Only return repositories with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo`.
        package typealias SinceRepo = Swift.Int
        /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        ///
        /// - Remark: Generated from `#/components/parameters/order`.
        @frozen package enum Order: String, Codable, Hashable, Sendable, CaseIterable {
            case desc = "desc"
            case asc = "asc"
        }
        /// The unique identifier of the team.
        ///
        /// - Remark: Generated from `#/components/parameters/team-id`.
        package typealias TeamId = Swift.Int
        /// ID of the Repository to filter on
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id-in-query`.
        package typealias RepositoryIdInQuery = Swift.Int
        /// The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
        ///
        /// - Remark: Generated from `#/components/parameters/export-id`.
        package typealias ExportId = Swift.String
        /// The unique identifier of the GPG key.
        ///
        /// - Remark: Generated from `#/components/parameters/gpg-key-id`.
        package typealias GpgKeyId = Swift.Int
        /// Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo-date`.
        package typealias SinceRepoDate = Foundation.Date
        /// Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before-repo-date`.
        package typealias BeforeRepoDate = Foundation.Date
        /// The unique identifier of the SSH signing key.
        ///
        /// - Remark: Generated from `#/components/parameters/ssh-signing-key-id`.
        package typealias SshSigningKeyId = Swift.Int
        /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
        ///
        /// - Remark: Generated from `#/components/parameters/sort-starred`.
        @frozen package enum SortStarred: String, Codable, Hashable, Sendable, CaseIterable {
            case created = "created"
            case updated = "updated"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {
        package struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
        package struct ValidationFailedSimple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.ValidationErrorSimple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.ValidationErrorSimple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ValidationFailedSimple.Body
            /// Creates a new `ValidationFailedSimple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ValidationFailedSimple.Body) {
                self.body = body
            }
        }
        package struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        package struct ValidationFailed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.ValidationError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.ValidationError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ValidationFailed.Body
            /// Creates a new `ValidationFailed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ValidationFailed.Body) {
                self.body = body
            }
        }
        package struct Accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Accepted.Body
            /// Creates a new `Accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Accepted.Body) {
                self.body = body
            }
        }
        package struct NotModified: Sendable, Hashable {
            /// Creates a new `NotModified`.
            package init() {}
        }
        package struct RequiresAuthentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.RequiresAuthentication.Body
            /// Creates a new `RequiresAuthentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.RequiresAuthentication.Body) {
                self.body = body
            }
        }
        package struct Forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Forbidden.Body
            /// Creates a new `Forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Forbidden.Body) {
                self.body = body
            }
        }
        package struct ServiceUnavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    package var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    package var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    package var documentationUrl: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentationUrl:
                    package init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentationUrl: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentationUrl = documentationUrl
                    }
                    package enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentationUrl = "documentation_url"
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.ServiceUnavailable.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ServiceUnavailable.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ServiceUnavailable.Body
            /// Creates a new `ServiceUnavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ServiceUnavailable.Body) {
                self.body = body
            }
        }
        package struct ForbiddenGist: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden_gist/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    package struct BlockPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/reason`.
                        package var reason: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/created_at`.
                        package var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/html_url`.
                        package var htmlUrl: Swift.String?
                        /// Creates a new `BlockPayload`.
                        ///
                        /// - Parameters:
                        ///   - reason:
                        ///   - createdAt:
                        ///   - htmlUrl:
                        package init(
                            reason: Swift.String? = nil,
                            createdAt: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil
                        ) {
                            self.reason = reason
                            self.createdAt = createdAt
                            self.htmlUrl = htmlUrl
                        }
                        package enum CodingKeys: String, CodingKey {
                            case reason
                            case createdAt = "created_at"
                            case htmlUrl = "html_url"
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    package var block: Components.Responses.ForbiddenGist.Body.JsonPayload.BlockPayload?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/message`.
                    package var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/documentation_url`.
                    package var documentationUrl: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - block:
                    ///   - message:
                    ///   - documentationUrl:
                    package init(
                        block: Components.Responses.ForbiddenGist.Body.JsonPayload.BlockPayload? = nil,
                        message: Swift.String? = nil,
                        documentationUrl: Swift.String? = nil
                    ) {
                        self.block = block
                        self.message = message
                        self.documentationUrl = documentationUrl
                    }
                    package enum CodingKeys: String, CodingKey {
                        case block
                        case message
                        case documentationUrl = "documentation_url"
                    }
                }
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/application\/json`.
                case json(Components.Responses.ForbiddenGist.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ForbiddenGist.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ForbiddenGist.Body
            /// Creates a new `ForbiddenGist`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ForbiddenGist.Body) {
                self.body = body
            }
        }
        package struct MovedPermanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.MovedPermanently.Body
            /// Creates a new `MovedPermanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.MovedPermanently.Body) {
                self.body = body
            }
        }
        package struct Conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Conflict.Body
            /// Creates a new `Conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Conflict.Body) {
                self.body = body
            }
        }
        package struct ActionsRunnerJitconfig: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/runner`.
                    package var runner: Components.Schemas.Runner
                    /// The base64 encoded runner configuration.
                    ///
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/encoded_jit_config`.
                    package var encodedJitConfig: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - runner:
                    ///   - encodedJitConfig: The base64 encoded runner configuration.
                    package init(
                        runner: Components.Schemas.Runner,
                        encodedJitConfig: Swift.String
                    ) {
                        self.runner = runner
                        self.encodedJitConfig = encodedJitConfig
                    }
                    package enum CodingKeys: String, CodingKey {
                        case runner
                        case encodedJitConfig = "encoded_jit_config"
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/application\/json`.
                case json(Components.Responses.ActionsRunnerJitconfig.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ActionsRunnerJitconfig.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ActionsRunnerJitconfig.Body
            /// Creates a new `ActionsRunnerJitconfig`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ActionsRunnerJitconfig.Body) {
                self.body = body
            }
        }
        package struct ActionsRunnerLabels: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/total_count`.
                    package var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/labels`.
                    package var labels: [Components.Schemas.RunnerLabel]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - totalCount:
                    ///   - labels:
                    package init(
                        totalCount: Swift.Int,
                        labels: [Components.Schemas.RunnerLabel]
                    ) {
                        self.totalCount = totalCount
                        self.labels = labels
                    }
                    package enum CodingKeys: String, CodingKey {
                        case totalCount = "total_count"
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/application\/json`.
                case json(Components.Responses.ActionsRunnerLabels.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ActionsRunnerLabels.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ActionsRunnerLabels.Body
            /// Creates a new `ActionsRunnerLabels`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ActionsRunnerLabels.Body) {
                self.body = body
            }
        }
        package struct ActionsRunnerLabelsReadonly: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/total_count`.
                    package var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/labels`.
                    package var labels: [Components.Schemas.RunnerLabel]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - totalCount:
                    ///   - labels:
                    package init(
                        totalCount: Swift.Int,
                        labels: [Components.Schemas.RunnerLabel]
                    ) {
                        self.totalCount = totalCount
                        self.labels = labels
                    }
                    package enum CodingKeys: String, CodingKey {
                        case totalCount = "total_count"
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/application\/json`.
                case json(Components.Responses.ActionsRunnerLabelsReadonly.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ActionsRunnerLabelsReadonly.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ActionsRunnerLabelsReadonly.Body
            /// Creates a new `ActionsRunnerLabelsReadonly`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ActionsRunnerLabelsReadonly.Body) {
                self.body = body
            }
        }
        package struct InternalError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.InternalError.Body
            /// Creates a new `InternalError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.InternalError.Body) {
                self.body = body
            }
        }
        package struct PackageEsListError: Sendable, Hashable {
            /// Creates a new `PackageEsListError`.
            package init() {}
        }
        package struct NoContent: Sendable, Hashable {
            /// Creates a new `NoContent`.
            package init() {}
        }
        package struct Gone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/gone/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/gone/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Gone.Body
            /// Creates a new `Gone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Gone.Body) {
                self.body = body
            }
        }
        package struct TemporaryRedirect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/temporary_redirect/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/temporary_redirect/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.TemporaryRedirect.Body
            /// Creates a new `TemporaryRedirect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.TemporaryRedirect.Body) {
                self.body = body
            }
        }
        package struct CodeScanningForbiddenRead: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_read/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_read/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.CodeScanningForbiddenRead.Body
            /// Creates a new `CodeScanningForbiddenRead`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.CodeScanningForbiddenRead.Body) {
                self.body = body
            }
        }
        package struct CodeScanningForbiddenWrite: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_write/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_forbidden_write/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.CodeScanningForbiddenWrite.Body
            /// Creates a new `CodeScanningForbiddenWrite`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.CodeScanningForbiddenWrite.Body) {
                self.body = body
            }
        }
        package struct Found: Sendable, Hashable {
            /// Creates a new `Found`.
            package init() {}
        }
        package struct CodeScanningConflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/code_scanning_conflict/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/code_scanning_conflict/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.CodeScanningConflict.Body
            /// Creates a new `CodeScanningConflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.CodeScanningConflict.Body) {
                self.body = body
            }
        }
        package struct PorterMaintenance: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/porter_maintenance/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/porter_maintenance/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.PorterMaintenance.Body
            /// Creates a new `PorterMaintenance`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.PorterMaintenance.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        @frozen package enum Link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/headers/link/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/headers/link/case2`.
            case case2([Swift.String])
            package init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            package func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/headers/content-type`.
        package typealias ContentType = Swift.String
        /// - Remark: Generated from `#/components/headers/x-common-marker-version`.
        package typealias XCommonMarkerVersion = Swift.String
        /// - Remark: Generated from `#/components/headers/x-rate-limit-limit`.
        package typealias XRateLimitLimit = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-remaining`.
        package typealias XRateLimitRemaining = Swift.Int
        /// - Remark: Generated from `#/components/headers/x-rate-limit-reset`.
        package typealias XRateLimitReset = Swift.Int
        /// - Remark: Generated from `#/components/headers/location`.
        package typealias Location = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package enum AppsCreateInstallationAccessToken {
        package static let id: Swift.String = "apps/create-installation-access-token"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path/installation_id`.
                package var installationId: Components.Parameters.InstallationId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installationId: The unique identifier of the installation.
                package init(installationId: Components.Parameters.InstallationId) {
                    self.installationId = installationId
                }
            }
            package var path: Operations.AppsCreateInstallationAccessToken.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsCreateInstallationAccessToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsCreateInstallationAccessToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.AppsCreateInstallationAccessToken.Input.Headers
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// List of repository names that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repositories`.
                    package var repositories: [Swift.String]?
                    /// List of repository IDs that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repository_ids`.
                    package var repositoryIds: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/permissions`.
                    package var permissions: Components.Schemas.AppPermissions?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repositories: List of repository names that the token should have access to
                    ///   - repositoryIds: List of repository IDs that the token should have access to
                    ///   - permissions:
                    package init(
                        repositories: [Swift.String]? = nil,
                        repositoryIds: [Swift.Int]? = nil,
                        permissions: Components.Schemas.AppPermissions? = nil
                    ) {
                        self.repositories = repositories
                        self.repositoryIds = repositoryIds
                        self.permissions = permissions
                    }
                    package enum CodingKeys: String, CodingKey {
                        case repositories
                        case repositoryIds = "repository_ids"
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/content/application\/json`.
                case json(Operations.AppsCreateInstallationAccessToken.Input.Body.JsonPayload)
            }
            package var body: Operations.AppsCreateInstallationAccessToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.AppsCreateInstallationAccessToken.Input.Path,
                headers: Operations.AppsCreateInstallationAccessToken.Input.Headers = .init(),
                body: Operations.AppsCreateInstallationAccessToken.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.InstallationToken)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.InstallationToken {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.AppsCreateInstallationAccessToken.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.AppsCreateInstallationAccessToken.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.AppsCreateInstallationAccessToken.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.AppsCreateInstallationAccessToken.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization
    ///
    /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    package enum OrgsGet {
        package static let id: Swift.String = "orgs/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/path/org`.
                package var org: Components.Parameters.Org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                package init(org: Components.Parameters.Org) {
                    self.org = org
                }
            }
            package var path: Operations.OrgsGet.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OrgsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OrgsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.OrgsGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.OrgsGet.Input.Path,
                headers: Operations.OrgsGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrganizationFull)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.OrganizationFull {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.OrgsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.OrgsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OrgsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.OrgsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project card
    ///
    /// Gets information about a project card.
    ///
    /// - Remark: HTTP `GET /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)`.
    package enum ProjectsGetCard {
        package static let id: Swift.String = "projects/get-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsGetCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsGetCard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsGetCard.Input.Path,
                headers: Operations.ProjectsGetCard.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectCard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectCard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsGetCard.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsGetCard.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsGetCard.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsGetCard.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/get(projects/get-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing project card
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)`.
    package enum ProjectsUpdateCard {
        package static let id: Swift.String = "projects/update-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsUpdateCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdateCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdateCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsUpdateCard.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The project card's note
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json/note`.
                    package var note: Swift.String?
                    /// Whether or not the card is archived
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/json/archived`.
                    package var archived: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - note: The project card's note
                    ///   - archived: Whether or not the card is archived
                    package init(
                        note: Swift.String? = nil,
                        archived: Swift.Bool? = nil
                    ) {
                        self.note = note
                        self.archived = archived
                    }
                    package enum CodingKeys: String, CodingKey {
                        case note
                        case archived
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.ProjectsUpdateCard.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsUpdateCard.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsUpdateCard.Input.Path,
                headers: Operations.ProjectsUpdateCard.Input.Headers = .init(),
                body: Operations.ProjectsUpdateCard.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectCard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectCard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsUpdateCard.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsUpdateCard.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsUpdateCard.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsUpdateCard.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/patch(projects/update-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailedSimple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailedSimple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package enum ProjectsDeleteCard {
        package static let id: Swift.String = "projects/delete-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsDeleteCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsDeleteCard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsDeleteCard.Input.Path,
                headers: Operations.ProjectsDeleteCard.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsDeleteCard.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsDeleteCard.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.ProjectsDeleteCard.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsDeleteCard.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsDeleteCard.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsDeleteCard.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsDeleteCard.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsDeleteCard.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package enum ProjectsMoveCard {
        package static let id: Swift.String = "projects/move-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsMoveCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsMoveCard.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/position`.
                    package var position: Swift.String
                    /// The unique identifier of the column the card should be moved to
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/column_id`.
                    package var columnId: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - position: The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///   - columnId: The unique identifier of the column the card should be moved to
                    package init(
                        position: Swift.String,
                        columnId: Swift.Int? = nil
                    ) {
                        self.position = position
                        self.columnId = columnId
                    }
                    package enum CodingKeys: String, CodingKey {
                        case position
                        case columnId = "column_id"
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsMoveCard.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsMoveCard.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsMoveCard.Input.Path,
                headers: Operations.ProjectsMoveCard.Input.Headers = .init(),
                body: Operations.ProjectsMoveCard.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `JsonPayload`.
                        package init() {}
                        package init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.Created.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.Created.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsMoveCard.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsMoveCard.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/resource`.
                            package var resource: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/field`.
                            package var field: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            ///   - resource:
                            ///   - field:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil,
                                resource: Swift.String? = nil,
                                field: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                                self.resource = resource
                                self.field = field
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                                case resource
                                case field
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package var errors: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsMoveCard.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsMoveCard.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package var errors: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ProjectsMoveCard.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ProjectsMoveCard.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project column
    ///
    /// Gets information about a project column.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)`.
    package enum ProjectsGetColumn {
        package static let id: Swift.String = "projects/get-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsGetColumn.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetColumn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetColumn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsGetColumn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsGetColumn.Input.Path,
                headers: Operations.ProjectsGetColumn.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectColumn)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectColumn {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsGetColumn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsGetColumn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsGetColumn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsGetColumn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/get(projects/get-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing project column
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)`.
    package enum ProjectsUpdateColumn {
        package static let id: Swift.String = "projects/update-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsUpdateColumn.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdateColumn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdateColumn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsUpdateColumn.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project column
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/json/name`.
                    package var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project column
                    package init(name: Swift.String) {
                        self.name = name
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.ProjectsUpdateColumn.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsUpdateColumn.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsUpdateColumn.Input.Path,
                headers: Operations.ProjectsUpdateColumn.Input.Headers = .init(),
                body: Operations.ProjectsUpdateColumn.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectColumn)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectColumn {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsUpdateColumn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsUpdateColumn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsUpdateColumn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsUpdateColumn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/patch(projects/update-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project column
    ///
    /// Deletes a project column.
    ///
    /// - Remark: HTTP `DELETE /projects/columns/{column_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)`.
    package enum ProjectsDeleteColumn {
        package static let id: Swift.String = "projects/delete-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsDeleteColumn.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteColumn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteColumn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsDeleteColumn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsDeleteColumn.Input.Path,
                headers: Operations.ProjectsDeleteColumn.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsDeleteColumn.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsDeleteColumn.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/delete(projects/delete-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package enum ProjectsListCards {
        package static let id: Swift.String = "projects/list-cards"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsListCards.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                @frozen package enum ArchivedStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case archived = "archived"
                    case notArchived = "not_archived"
                }
                /// Filters the project cards that are returned by the card's state.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                package var archivedState: Operations.ProjectsListCards.Input.Query.ArchivedStatePayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - archivedState: Filters the project cards that are returned by the card's state.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    archivedState: Operations.ProjectsListCards.Input.Query.ArchivedStatePayload? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.archivedState = archivedState
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ProjectsListCards.Input.Query
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCards.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCards.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsListCards.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ProjectsListCards.Input.Path,
                query: Operations.ProjectsListCards.Input.Query = .init(),
                headers: Operations.ProjectsListCards.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ProjectsListCards.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProjectCard])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ProjectCard] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsListCards.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ProjectsListCards.Output.Ok.Headers = .init(),
                    body: Operations.ProjectsListCards.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsListCards.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsListCards.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package enum ProjectsCreateCard {
        package static let id: Swift.String = "projects/create-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsCreateCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsCreateCard.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json`.
                @frozen package enum JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    package struct Case1Payload: Codable, Hashable, Sendable {
                        /// The project card's note
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1/note`.
                        package var note: Swift.String?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - note: The project card's note
                        package init(note: Swift.String? = nil) {
                            self.note = note
                        }
                        package enum CodingKeys: String, CodingKey {
                            case note
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    case case1(Operations.ProjectsCreateCard.Input.Body.JsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    package struct Case2Payload: Codable, Hashable, Sendable {
                        /// The unique identifier of the content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_id`.
                        package var contentId: Swift.Int
                        /// The piece of content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_type`.
                        package var contentType: Swift.String
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - contentId: The unique identifier of the content associated with the card
                        ///   - contentType: The piece of content associated with the card
                        package init(
                            contentId: Swift.Int,
                            contentType: Swift.String
                        ) {
                            self.contentId = contentId
                            self.contentType = contentType
                        }
                        package enum CodingKeys: String, CodingKey {
                            case contentId = "content_id"
                            case contentType = "content_type"
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    case case2(Operations.ProjectsCreateCard.Input.Body.JsonPayload.Case2Payload)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsCreateCard.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsCreateCard.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsCreateCard.Input.Path,
                headers: Operations.ProjectsCreateCard.Input.Headers = .init(),
                body: Operations.ProjectsCreateCard.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProjectCard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectCard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsCreateCard.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsCreateCard.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json`.
                    @frozen package enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case1`.
                        case ValidationError(Components.Schemas.ValidationError)
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case2`.
                        case ValidationErrorSimple(Components.Schemas.ValidationErrorSimple)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .ValidationError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .ValidationErrorSimple(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .ValidationError(value):
                                try value.encode(to: encoder)
                            case let .ValidationErrorSimple(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/application\/json`.
                    case json(Operations.ProjectsCreateCard.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation failed
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.ProjectsCreateCard.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.ProjectsCreateCard.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package var errors: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/application\/json`.
                    case json(Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ProjectsCreateCard.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ProjectsCreateCard.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move a project column
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)`.
    package enum ProjectsMoveColumn {
        package static let id: Swift.String = "projects/move-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsMoveColumn.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveColumn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveColumn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsMoveColumn.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/json/position`.
                    package var position: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - position: The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
                    package init(position: Swift.String) {
                        self.position = position
                    }
                    package enum CodingKeys: String, CodingKey {
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsMoveColumn.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsMoveColumn.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsMoveColumn.Input.Path,
                headers: Operations.ProjectsMoveColumn.Input.Headers = .init(),
                body: Operations.ProjectsMoveColumn.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `JsonPayload`.
                        package init() {}
                        package init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/moves/POST/responses/201/content/application\/json`.
                    case json(Operations.ProjectsMoveColumn.Output.Created.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveColumn.Output.Created.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveColumn.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveColumn.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsMoveColumn.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsMoveColumn.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailedSimple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailedSimple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/moves/post(projects/move-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a project
    ///
    /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)`.
    package enum ProjectsGet {
        package static let id: Swift.String = "projects/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/GET/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsGet.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsGet.Input.Path,
                headers: Operations.ProjectsGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/get(projects/get)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a project
    ///
    /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    ///
    /// - Remark: HTTP `PATCH /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)`.
    package enum ProjectsUpdate {
        package static let id: Swift.String = "projects/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsUpdate.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/name`.
                    package var name: Swift.String?
                    /// Body of the project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// State of the project; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/state`.
                    package var state: Swift.String?
                    /// The baseline permission that all organization members have on this project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/organization_permission`.
                    @frozen package enum OrganizationPermissionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                        case none = "none"
                    }
                    /// The baseline permission that all organization members have on this project
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/organization_permission`.
                    package var organizationPermission: Operations.ProjectsUpdate.Input.Body.JsonPayload.OrganizationPermissionPayload?
                    /// Whether or not this project can be seen by everyone.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/json/private`.
                    package var _private: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project
                    ///   - body: Body of the project
                    ///   - state: State of the project; either 'open' or 'closed'
                    ///   - organizationPermission: The baseline permission that all organization members have on this project
                    ///   - _private: Whether or not this project can be seen by everyone.
                    package init(
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Swift.String? = nil,
                        organizationPermission: Operations.ProjectsUpdate.Input.Body.JsonPayload.OrganizationPermissionPayload? = nil,
                        _private: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.body = body
                        self.state = state
                        self.organizationPermission = organizationPermission
                        self._private = _private
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case body
                        case state
                        case organizationPermission = "organization_permission"
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.ProjectsUpdate.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsUpdate.Input.Path,
                headers: Operations.ProjectsUpdate.Input.Headers = .init(),
                body: Operations.ProjectsUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                package init() {}
            }
            /// Not Found if the authenticated user does not have access to the project
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProjectsUpdate.Output.NotFound)
            /// Not Found if the authenticated user does not have access to the project
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            package static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ProjectsUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/PATCH/responses/403/content/application\/json`.
                    case json(Operations.ProjectsUpdate.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsUpdate.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsUpdate.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsUpdate.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsUpdate.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsUpdate.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/patch(projects/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailedSimple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailedSimple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project
    ///
    /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)`.
    package enum ProjectsDelete {
        package static let id: Swift.String = "projects/delete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsDelete.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsDelete.Input.Path,
                headers: Operations.ProjectsDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Delete Success
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsDelete.Output.NoContent)
            /// Delete Success
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.ProjectsDelete.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsDelete.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsDelete.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsDelete.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsDelete.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsDelete.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/delete(projects/delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project collaborators
    ///
    /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)`.
    package enum ProjectsListCollaborators {
        package static let id: Swift.String = "projects/list-collaborators"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsListCollaborators.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/affiliation`.
                @frozen package enum AffiliationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case outside = "outside"
                    case direct = "direct"
                    case all = "all"
                }
                /// Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/affiliation`.
                package var affiliation: Operations.ProjectsListCollaborators.Input.Query.AffiliationPayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - affiliation: Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    affiliation: Operations.ProjectsListCollaborators.Input.Query.AffiliationPayload? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.affiliation = affiliation
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ProjectsListCollaborators.Input.Query
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCollaborators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCollaborators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsListCollaborators.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ProjectsListCollaborators.Input.Path,
                query: Operations.ProjectsListCollaborators.Input.Query = .init(),
                headers: Operations.ProjectsListCollaborators.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ProjectsListCollaborators.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SimpleUser])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.SimpleUser] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsListCollaborators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ProjectsListCollaborators.Output.Ok.Headers = .init(),
                    body: Operations.ProjectsListCollaborators.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsListCollaborators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsListCollaborators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/get(projects/list-collaborators)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add project collaborator
    ///
    /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    ///
    /// - Remark: HTTP `PUT /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)`.
    package enum ProjectsAddCollaborator {
        package static let id: Swift.String = "projects/add-collaborator"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/path/username`.
                package var username: Components.Parameters.Username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    projectId: Components.Parameters.ProjectId,
                    username: Components.Parameters.Username
                ) {
                    self.projectId = projectId
                    self.username = username
                }
            }
            package var path: Operations.ProjectsAddCollaborator.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsAddCollaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsAddCollaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsAddCollaborator.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant the collaborator.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json/permission`.
                    @frozen package enum PermissionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                    }
                    /// The permission to grant the collaborator.
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/json/permission`.
                    package var permission: Operations.ProjectsAddCollaborator.Input.Body.JsonPayload.PermissionPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant the collaborator.
                    package init(permission: Operations.ProjectsAddCollaborator.Input.Body.JsonPayload.PermissionPayload? = nil) {
                        self.permission = permission
                    }
                    package enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.ProjectsAddCollaborator.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsAddCollaborator.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsAddCollaborator.Input.Path,
                headers: Operations.ProjectsAddCollaborator.Input.Headers = .init(),
                body: Operations.ProjectsAddCollaborator.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsAddCollaborator.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsAddCollaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/put(projects/add-collaborator)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove user as a collaborator
    ///
    /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    ///
    /// - Remark: HTTP `DELETE /projects/{project_id}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)`.
    package enum ProjectsRemoveCollaborator {
        package static let id: Swift.String = "projects/remove-collaborator"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/path/username`.
                package var username: Components.Parameters.Username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    projectId: Components.Parameters.ProjectId,
                    username: Components.Parameters.Username
                ) {
                    self.projectId = projectId
                    self.username = username
                }
            }
            package var path: Operations.ProjectsRemoveCollaborator.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsRemoveCollaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsRemoveCollaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsRemoveCollaborator.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsRemoveCollaborator.Input.Path,
                headers: Operations.ProjectsRemoveCollaborator.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsRemoveCollaborator.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsRemoveCollaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/delete(projects/remove-collaborator)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get project permission for a user
    ///
    /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)`.
    package enum ProjectsGetPermissionForUser {
        package static let id: Swift.String = "projects/get-permission-for-user"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/path/username`.
                package var username: Components.Parameters.Username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                ///   - username: The handle for the GitHub user account.
                package init(
                    projectId: Components.Parameters.ProjectId,
                    username: Components.Parameters.Username
                ) {
                    self.projectId = projectId
                    self.username = username
                }
            }
            package var path: Operations.ProjectsGetPermissionForUser.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetPermissionForUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsGetPermissionForUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsGetPermissionForUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsGetPermissionForUser.Input.Path,
                headers: Operations.ProjectsGetPermissionForUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/collaborators/{username}/permission/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectCollaboratorPermission)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectCollaboratorPermission {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsGetPermissionForUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsGetPermissionForUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsGetPermissionForUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsGetPermissionForUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/collaborators/{username}/permission/get(projects/get-permission-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project columns
    ///
    /// Lists the project columns in a project.
    ///
    /// - Remark: HTTP `GET /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)`.
    package enum ProjectsListColumns {
        package static let id: Swift.String = "projects/list-columns"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsListColumns.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ProjectsListColumns.Input.Query
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListColumns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListColumns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsListColumns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ProjectsListColumns.Input.Path,
                query: Operations.ProjectsListColumns.Input.Query = .init(),
                headers: Operations.ProjectsListColumns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ProjectsListColumns.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProjectColumn])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ProjectColumn] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsListColumns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ProjectsListColumns.Output.Ok.Headers = .init(),
                    body: Operations.ProjectsListColumns.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsListColumns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsListColumns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/get(projects/list-columns)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a project column
    ///
    /// Creates a new project column.
    ///
    /// - Remark: HTTP `POST /projects/{project_id}/columns`.
    /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)`.
    package enum ProjectsCreateColumn {
        package static let id: Swift.String = "projects/create-column"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/path/project_id`.
                package var projectId: Components.Parameters.ProjectId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The unique identifier of the project.
                package init(projectId: Components.Parameters.ProjectId) {
                    self.projectId = projectId
                }
            }
            package var path: Operations.ProjectsCreateColumn.Input.Path
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateColumn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateColumn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsCreateColumn.Input.Headers
            /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the project column
                    ///
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/json/name`.
                    package var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the project column
                    package init(name: Swift.String) {
                        self.name = name
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsCreateColumn.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsCreateColumn.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsCreateColumn.Input.Path,
                headers: Operations.ProjectsCreateColumn.Input.Headers = .init(),
                body: Operations.ProjectsCreateColumn.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/{project_id}/columns/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProjectColumn)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectColumn {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateColumn.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateColumn.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsCreateColumn.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsCreateColumn.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailedSimple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailedSimple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/{project_id}/columns/post(projects/create-column)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get rate limit status for the authenticated user
    ///
    /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
    ///
    /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
    ///
    /// - Remark: HTTP `GET /rate_limit`.
    /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)`.
    package enum RateLimitGet {
        package static let id: Swift.String = "rate-limit/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rate_limit/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RateLimitGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RateLimitGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.RateLimitGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.RateLimitGet.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Limit`.
                    package var xRateLimitLimit: Components.Headers.XRateLimitLimit?
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Remaining`.
                    package var xRateLimitRemaining: Components.Headers.XRateLimitRemaining?
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/headers/X-RateLimit-Reset`.
                    package var xRateLimitReset: Components.Headers.XRateLimitReset?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - xRateLimitLimit:
                    ///   - xRateLimitRemaining:
                    ///   - xRateLimitReset:
                    package init(
                        xRateLimitLimit: Components.Headers.XRateLimitLimit? = nil,
                        xRateLimitRemaining: Components.Headers.XRateLimitRemaining? = nil,
                        xRateLimitReset: Components.Headers.XRateLimitReset? = nil
                    ) {
                        self.xRateLimitLimit = xRateLimitLimit
                        self.xRateLimitRemaining = xRateLimitRemaining
                        self.xRateLimitReset = xRateLimitReset
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.RateLimitGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rate_limit/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RateLimitOverview)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.RateLimitOverview {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.RateLimitGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.RateLimitGet.Output.Ok.Headers = .init(),
                    body: Operations.RateLimitGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RateLimitGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.RateLimitGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//rate_limit/get(rate-limit/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    package enum ReposGet {
        package static let id: Swift.String = "repos/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposGet.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ReposGet.Input.Path,
                headers: Operations.ReposGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FullRepository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.FullRepository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package enum ReposListCommits {
        package static let id: Swift.String = "repos/list-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListCommits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query`.
            package struct Query: Sendable, Hashable {
                /// SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/sha`.
                package var sha: Swift.String?
                /// Only commits containing this file path will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/path`.
                package var path: Swift.String?
                /// GitHub username or email address to use to filter by commit author.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/author`.
                package var author: Swift.String?
                /// GitHub username or email address to use to filter by commit committer.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/committer`.
                package var committer: Swift.String?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/since`.
                package var since: Components.Parameters.Since?
                /// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/until`.
                package var until: Foundation.Date?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha: SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///   - path: Only commits containing this file path will be returned.
                ///   - author: GitHub username or email address to use to filter by commit author.
                ///   - committer: GitHub username or email address to use to filter by commit committer.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - until: Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    sha: Swift.String? = nil,
                    path: Swift.String? = nil,
                    author: Swift.String? = nil,
                    committer: Swift.String? = nil,
                    since: Components.Parameters.Since? = nil,
                    until: Foundation.Date? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.sha = sha
                    self.path = path
                    self.author = author
                    self.committer = committer
                    self.since = since
                    self.until = until
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListCommits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListCommits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListCommits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListCommits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListCommits.Input.Path,
                query: Operations.ReposListCommits.Input.Query = .init(),
                headers: Operations.ReposListCommits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListCommits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListCommits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListCommits.Output.Ok.Headers = .init(),
                    body: Operations.ReposListCommits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListCommits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package enum ReposListPullRequestsAssociatedWithCommit {
        package static let id: Swift.String = "repos/list-pull-requests-associated-with-commit"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/commit_sha`.
                package var commitSha: Components.Parameters.CommitSha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commitSha: The SHA of the commit.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    commitSha: Components.Parameters.CommitSha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commitSha = commitSha
                }
            }
            package var path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListPullRequestsAssociatedWithCommit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListPullRequestsAssociatedWithCommit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path,
                query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query = .init(),
                headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestSimple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestSimple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Headers = .init(),
                    body: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package enum ReposCompareCommits {
        package static let id: Swift.String = "repos/compare-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/basehead`.
                package var basehead: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - basehead: The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    basehead: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.basehead = basehead
                }
            }
            package var path: Operations.ReposCompareCommits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Page number of the results to fetch.
                ///   - perPage: The number of results per page (max 100).
                package init(
                    page: Components.Parameters.Page? = nil,
                    perPage: Components.Parameters.PerPage? = nil
                ) {
                    self.page = page
                    self.perPage = perPage
                }
            }
            package var query: Operations.ReposCompareCommits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCompareCommits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCompareCommits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposCompareCommits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposCompareCommits.Input.Path,
                query: Operations.ReposCompareCommits.Input.Query = .init(),
                headers: Operations.ReposCompareCommits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommitComparison)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CommitComparison {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCompareCommits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposCompareCommits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposCompareCommits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposCompareCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package enum ReposListContributors {
        package static let id: Swift.String = "repos/list-contributors"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListContributors.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Set to `1` or `true` to include anonymous contributors in results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/anon`.
                package var anon: Swift.String?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - anon: Set to `1` or `true` to include anonymous contributors in results.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    anon: Swift.String? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.anon = anon
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListContributors.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListContributors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListContributors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListContributors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListContributors.Input.Path,
                query: Operations.ReposListContributors.Input.Query = .init(),
                headers: Operations.ReposListContributors.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListContributors.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contributor])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Contributor] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListContributors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListContributors.Output.Ok.Headers = .init(),
                    body: Operations.ReposListContributors.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// if repository contains content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListContributors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListContributors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ReposListContributors.Output.NoContent)
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ReposListContributors.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    package enum IssuesListForRepo {
        package static let id: Swift.String = "issues/list-for-repo"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.IssuesListForRepo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query`.
            package struct Query: Sendable, Hashable {
                /// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/milestone`.
                package var milestone: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                package var state: Operations.IssuesListForRepo.Input.Query.StatePayload?
                /// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/assignee`.
                package var assignee: Swift.String?
                /// The user that created the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/creator`.
                package var creator: Swift.String?
                /// A user that's mentioned in the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/mentioned`.
                package var mentioned: Swift.String?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/labels`.
                package var labels: Components.Parameters.Labels?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                @frozen package enum SortPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                package var sort: Operations.IssuesListForRepo.Input.Query.SortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen package enum Direction: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/direction`.
                package var direction: Components.Parameters.Direction?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/since`.
                package var since: Components.Parameters.Since?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - milestone: If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///   - state: Indicates the state of the issues to return.
                ///   - assignee: Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///   - creator: The user that created the issue.
                ///   - mentioned: A user that's mentioned in the issue.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    milestone: Swift.String? = nil,
                    state: Operations.IssuesListForRepo.Input.Query.StatePayload? = nil,
                    assignee: Swift.String? = nil,
                    creator: Swift.String? = nil,
                    mentioned: Swift.String? = nil,
                    labels: Components.Parameters.Labels? = nil,
                    sort: Operations.IssuesListForRepo.Input.Query.SortPayload? = nil,
                    direction: Components.Parameters.Direction? = nil,
                    since: Components.Parameters.Since? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.milestone = milestone
                    self.state = state
                    self.assignee = assignee
                    self.creator = creator
                    self.mentioned = mentioned
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.IssuesListForRepo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesListForRepo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesListForRepo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesListForRepo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.IssuesListForRepo.Input.Path,
                query: Operations.IssuesListForRepo.Input.Query = .init(),
                headers: Operations.IssuesListForRepo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.IssuesListForRepo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesListForRepo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.IssuesListForRepo.Output.Ok.Headers = .init(),
                    body: Operations.IssuesListForRepo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesListForRepo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.IssuesListForRepo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package enum IssuesCreate {
        package static let id: Swift.String = "issues/create"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.IssuesCreate.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    @frozen package enum TitlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    package var title: Operations.IssuesCreate.Input.Body.JsonPayload.TitlePayload
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignee`.
                    package var assignee: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    @frozen package enum MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    package var milestone: Operations.IssuesCreate.Input.Body.JsonPayload.MilestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload`.
                    @frozen package enum LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2`.
                        package struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/id`.
                            package var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/name`.
                            package var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/description`.
                            package var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/color`.
                            package var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            package init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            package enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2`.
                        case case2(Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayloadPayload.Case2Payload)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package typealias LabelsPayload = [Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayloadPayload]
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package var labels: Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayload?
                    /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignees`.
                    package var assignees: [Swift.String]?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///   - assignees: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    package init(
                        title: Operations.IssuesCreate.Input.Body.JsonPayload.TitlePayload,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        milestone: Operations.IssuesCreate.Input.Body.JsonPayload.MilestonePayload? = nil,
                        labels: Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/content/application\/json`.
                case json(Operations.IssuesCreate.Input.Body.JsonPayload)
            }
            package var body: Operations.IssuesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.IssuesCreate.Input.Path,
                headers: Operations.IssuesCreate.Input.Headers = .init(),
                body: Operations.IssuesCreate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers/Location`.
                    package var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    package init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.IssuesCreate.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.IssuesCreate.Output.Created.Headers = .init(),
                    body: Operations.IssuesCreate.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.IssuesCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.IssuesCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package enum IssuesGet {
        package static let id: Swift.String = "issues/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/issue_number`.
                package var issueNumber: Components.Parameters.IssueNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issueNumber: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    issueNumber: Components.Parameters.IssueNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issueNumber = issueNumber
                }
            }
            package var path: Operations.IssuesGet.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.IssuesGet.Input.Path,
                headers: Operations.IssuesGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.IssuesGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.IssuesGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access can edit an issue.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    package enum IssuesUpdate {
        package static let id: Swift.String = "issues/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/issue_number`.
                package var issueNumber: Components.Parameters.IssueNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issueNumber: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    issueNumber: Components.Parameters.IssueNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issueNumber = issueNumber
                }
            }
            package var path: Operations.IssuesUpdate.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    @frozen package enum TitlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    package var title: Operations.IssuesUpdate.Input.Body.JsonPayload.TitlePayload?
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// Username to assign to this issue. **This field is deprecated.**
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignee`.
                    package var assignee: Swift.String?
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    package var state: Operations.IssuesUpdate.Input.Body.JsonPayload.StatePayload?
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    @frozen package enum StateReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case completed = "completed"
                        case notPlanned = "not_planned"
                        case reopened = "reopened"
                    }
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    package var stateReason: Operations.IssuesUpdate.Input.Body.JsonPayload.StateReasonPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    @frozen package enum MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    package var milestone: Operations.IssuesUpdate.Input.Body.JsonPayload.MilestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload`.
                    @frozen package enum LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2`.
                        package struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2/id`.
                            package var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2/name`.
                            package var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2/description`.
                            package var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2/color`.
                            package var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            package init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            package enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/LabelsPayload/case2`.
                        case case2(Operations.IssuesUpdate.Input.Body.JsonPayload.LabelsPayloadPayload.Case2Payload)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    package typealias LabelsPayload = [Operations.IssuesUpdate.Input.Body.JsonPayload.LabelsPayloadPayload]
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    package var labels: Operations.IssuesUpdate.Input.Body.JsonPayload.LabelsPayload?
                    /// Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignees`.
                    package var assignees: [Swift.String]?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Username to assign to this issue. **This field is deprecated.**
                    ///   - state: The open or closed state of the issue.
                    ///   - stateReason: The reason for the state change. Ignored unless `state` is changed.
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///   - assignees: Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    package init(
                        title: Operations.IssuesUpdate.Input.Body.JsonPayload.TitlePayload? = nil,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        state: Operations.IssuesUpdate.Input.Body.JsonPayload.StatePayload? = nil,
                        stateReason: Operations.IssuesUpdate.Input.Body.JsonPayload.StateReasonPayload? = nil,
                        milestone: Operations.IssuesUpdate.Input.Body.JsonPayload.MilestonePayload? = nil,
                        labels: Operations.IssuesUpdate.Input.Body.JsonPayload.LabelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.state = state
                        self.stateReason = stateReason
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case state
                        case stateReason = "state_reason"
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.IssuesUpdate.Input.Body.JsonPayload)
            }
            package var body: Operations.IssuesUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.IssuesUpdate.Input.Path,
                headers: Operations.IssuesUpdate.Input.Headers = .init(),
                body: Operations.IssuesUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.IssuesUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.IssuesUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue comment
    ///
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    /// and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    /// for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    package enum IssuesCreateComment {
        package static let id: Swift.String = "issues/create-comment"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/issue_number`.
                package var issueNumber: Components.Parameters.IssueNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issueNumber: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    issueNumber: Components.Parameters.IssueNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issueNumber = issueNumber
                }
            }
            package var path: Operations.IssuesCreateComment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreateComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreateComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesCreateComment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json/body`.
                    package var body: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    package init(body: Swift.String) {
                        self.body = body
                    }
                    package enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.IssuesCreateComment.Input.Body.JsonPayload)
            }
            package var body: Operations.IssuesCreateComment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.IssuesCreateComment.Input.Path,
                headers: Operations.IssuesCreateComment.Input.Headers = .init(),
                body: Operations.IssuesCreateComment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers/Location`.
                    package var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    package init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.IssuesCreateComment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IssueComment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.IssueComment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesCreateComment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.IssuesCreateComment.Output.Created.Headers = .init(),
                    body: Operations.IssuesCreateComment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.IssuesCreateComment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.IssuesCreateComment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    package enum IssuesListEventsForTimeline {
        package static let id: Swift.String = "issues/list-events-for-timeline"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/issue_number`.
                package var issueNumber: Components.Parameters.IssueNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issueNumber: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    issueNumber: Components.Parameters.IssueNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issueNumber = issueNumber
                }
            }
            package var path: Operations.IssuesListEventsForTimeline.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.IssuesListEventsForTimeline.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesListEventsForTimeline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesListEventsForTimeline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesListEventsForTimeline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.IssuesListEventsForTimeline.Input.Path,
                query: Operations.IssuesListEventsForTimeline.Input.Query = .init(),
                headers: Operations.IssuesListEventsForTimeline.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.IssuesListEventsForTimeline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TimelineIssueEvents])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.TimelineIssueEvents] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesListEventsForTimeline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.IssuesListEventsForTimeline.Output.Ok.Headers = .init(),
                    body: Operations.IssuesListEventsForTimeline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesListEventsForTimeline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.IssuesListEventsForTimeline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    package enum PullsList {
        package static let id: Swift.String = "pulls/list"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.PullsList.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Either `open`, `closed`, or `all` to filter by state.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                package var state: Operations.PullsList.Input.Query.StatePayload?
                /// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/head`.
                package var head: Swift.String?
                /// Filter pulls by base branch name. Example: `gh-pages`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/base`.
                package var base: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                @frozen package enum SortPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                    case popularity = "popularity"
                    case longRunning = "long-running"
                }
                /// What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                package var sort: Operations.PullsList.Input.Query.SortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                @frozen package enum DirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                package var direction: Operations.PullsList.Input.Query.DirectionPayload?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Either `open`, `closed`, or `all` to filter by state.
                ///   - head: Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///   - base: Filter pulls by base branch name. Example: `gh-pages`.
                ///   - sort: What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///   - direction: The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    state: Operations.PullsList.Input.Query.StatePayload? = nil,
                    head: Swift.String? = nil,
                    base: Swift.String? = nil,
                    sort: Operations.PullsList.Input.Query.SortPayload? = nil,
                    direction: Operations.PullsList.Input.Query.DirectionPayload? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.state = state
                    self.head = head
                    self.base = base
                    self.sort = sort
                    self.direction = direction
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsList.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsList.Input.Path,
                query: Operations.PullsList.Input.Query = .init(),
                headers: Operations.PullsList.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsList.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestSimple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestSimple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsList.Output.Ok.Headers = .init(),
                    body: Operations.PullsList.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package enum PullsGet {
        package static let id: Swift.String = "pulls/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsGet.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.PullsGet.Input.Path,
                headers: Operations.PullsGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PullRequest)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.PullRequest {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PullsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package enum PullsUpdate {
        package static let id: Swift.String = "pulls/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsUpdate.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The title of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/title`.
                    package var title: Swift.String?
                    /// The contents of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    package var state: Operations.PullsUpdate.Input.Body.JsonPayload.StatePayload?
                    /// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/base`.
                    package var base: Swift.String?
                    /// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/maintainer_can_modify`.
                    package var maintainerCanModify: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the pull request.
                    ///   - body: The contents of the pull request.
                    ///   - state: State of this Pull Request. Either `open` or `closed`.
                    ///   - base: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///   - maintainerCanModify: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    package init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Operations.PullsUpdate.Input.Body.JsonPayload.StatePayload? = nil,
                        base: Swift.String? = nil,
                        maintainerCanModify: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.state = state
                        self.base = base
                        self.maintainerCanModify = maintainerCanModify
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case state
                        case base
                        case maintainerCanModify = "maintainer_can_modify"
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.PullsUpdate.Input.Body.JsonPayload)
            }
            package var body: Operations.PullsUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PullsUpdate.Input.Path,
                headers: Operations.PullsUpdate.Input.Headers = .init(),
                body: Operations.PullsUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.PullRequest)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.PullRequest {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PullsUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    package enum PullsListReviewComments {
        package static let id: Swift.String = "pulls/list-review-comments"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsListReviewComments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen package enum Sort: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/sort`.
                package var sort: Components.Parameters.Sort?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                @frozen package enum DirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort results. Ignored without `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                package var direction: Operations.PullsListReviewComments.Input.Query.DirectionPayload?
                /// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/since`.
                package var since: Components.Parameters.Since?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: The direction to sort results. Ignored without `sort` parameter.
                ///   - since: Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    sort: Components.Parameters.Sort? = nil,
                    direction: Operations.PullsListReviewComments.Input.Query.DirectionPayload? = nil,
                    since: Components.Parameters.Since? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsListReviewComments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviewComments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviewComments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsListReviewComments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsListReviewComments.Input.Path,
                query: Operations.PullsListReviewComments.Input.Query = .init(),
                headers: Operations.PullsListReviewComments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsListReviewComments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestReviewComment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestReviewComment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsListReviewComments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsListReviewComments.Output.Ok.Headers = .init(),
                    body: Operations.PullsListReviewComments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsListReviewComments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsListReviewComments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests files
    ///
    /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package enum PullsListFiles {
        package static let id: Swift.String = "pulls/list-files"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsListFiles.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsListFiles.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsListFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsListFiles.Input.Path,
                query: Operations.PullsListFiles.Input.Query = .init(),
                headers: Operations.PullsListFiles.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsListFiles.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.DiffEntry])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.DiffEntry] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsListFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsListFiles.Output.Ok.Headers = .init(),
                    body: Operations.PullsListFiles.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsListFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsListFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List reviews for a pull request
    ///
    /// The list of reviews returns in chronological order.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    package enum PullsListReviews {
        package static let id: Swift.String = "pulls/list-reviews"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsListReviews.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsListReviews.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviews.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviews.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsListReviews.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsListReviews.Input.Path,
                query: Operations.PullsListReviews.Input.Query = .init(),
                headers: Operations.PullsListReviews.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsListReviews.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestReview])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestReview] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsListReviews.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsListReviews.Output.Ok.Headers = .init(),
                    body: Operations.PullsListReviews.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of reviews returns in chronological order.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsListReviews.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsListReviews.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package enum ReposListReleases {
        package static let id: Swift.String = "repos/list-releases"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListReleases.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListReleases.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListReleases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListReleases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListReleases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListReleases.Input.Path,
                query: Operations.ReposListReleases.Input.Query = .init(),
                headers: Operations.ReposListReleases.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListReleases.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Release])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Release] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListReleases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListReleases.Output.Ok.Headers = .init(),
                    body: Operations.ReposListReleases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListReleases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListReleases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package enum ReposCreateRelease {
        package static let id: Swift.String = "repos/create-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposCreateRelease.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCreateRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCreateRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposCreateRelease.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/tag_name`.
                    package var tagName: Swift.String
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/target_commitish`.
                    package var targetCommitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/name`.
                    package var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/draft`.
                    package var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/prerelease`.
                    package var prerelease: Swift.Bool?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/discussion_category_name`.
                    package var discussionCategoryName: Swift.String?
                    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/generate_release_notes`.
                    package var generateReleaseNotes: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    @frozen package enum MakeLatestPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _true = "true"
                        case _false = "false"
                        case legacy = "legacy"
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    package var makeLatest: Operations.ReposCreateRelease.Input.Body.JsonPayload.MakeLatestPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tagName: The name of the tag.
                    ///   - targetCommitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///   - prerelease: `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///   - discussionCategoryName: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///   - generateReleaseNotes: Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///   - makeLatest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    package init(
                        tagName: Swift.String,
                        targetCommitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        discussionCategoryName: Swift.String? = nil,
                        generateReleaseNotes: Swift.Bool? = nil,
                        makeLatest: Operations.ReposCreateRelease.Input.Body.JsonPayload.MakeLatestPayload? = nil
                    ) {
                        self.tagName = tagName
                        self.targetCommitish = targetCommitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.discussionCategoryName = discussionCategoryName
                        self.generateReleaseNotes = generateReleaseNotes
                        self.makeLatest = makeLatest
                    }
                    package enum CodingKeys: String, CodingKey {
                        case tagName = "tag_name"
                        case targetCommitish = "target_commitish"
                        case name
                        case body
                        case draft
                        case prerelease
                        case discussionCategoryName = "discussion_category_name"
                        case generateReleaseNotes = "generate_release_notes"
                        case makeLatest = "make_latest"
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/content/application\/json`.
                case json(Operations.ReposCreateRelease.Input.Body.JsonPayload)
            }
            package var body: Operations.ReposCreateRelease.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ReposCreateRelease.Input.Path,
                headers: Operations.ReposCreateRelease.Input.Headers = .init(),
                body: Operations.ReposCreateRelease.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers/Location`.
                    package var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    package init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposCreateRelease.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCreateRelease.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposCreateRelease.Output.Created.Headers = .init(),
                    body: Operations.ReposCreateRelease.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ReposCreateRelease.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ReposCreateRelease.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.BasicError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BasicError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCreateRelease.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposCreateRelease.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReposCreateRelease.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ReposCreateRelease.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package enum ReposGetLatestRelease {
        package static let id: Swift.String = "repos/get-latest-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposGetLatestRelease.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGetLatestRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGetLatestRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposGetLatestRelease.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ReposGetLatestRelease.Input.Path,
                headers: Operations.ReposGetLatestRelease.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposGetLatestRelease.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposGetLatestRelease.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposGetLatestRelease.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposGetLatestRelease.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package enum ReposListTags {
        package static let id: Swift.String = "repos/list-tags"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListTags.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100).
                ///   - page: Page number of the results to fetch.
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListTags.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListTags.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListTags.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListTags.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListTags.Input.Path,
                query: Operations.ReposListTags.Input.Query = .init(),
                headers: Operations.ReposListTags.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/link`.
                    @frozen package enum Link: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/headers/link/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/headers/link/case2`.
                        case case2([Swift.String])
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListTags.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Tag])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Tag] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListTags.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListTags.Output.Ok.Headers = .init(),
                    body: Operations.ReposListTags.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListTags.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListTags.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
