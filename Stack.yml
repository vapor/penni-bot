Description: CF Stack for the Penny Discord Bot

Parameters:
  apiGatewayName:
    Type: String
    Default: penny-bot-api
  CoinsFilename:
    Type: String
    Description: Filename of the code function for the adding of coins uploaded to S3
    Default: CoinsLambda
  SponsorsFilename:
    Type: String
    Description: Filename containing the code to be executed when a new sponsor joins
    Default: SponsorsLambda
  AutoPingsFilename:
    Type: String
    Description: Filename containing the code to be executed for auto-pings
    Default: AutoPingsLambda
  FaqsFilename:
    Type: String
    Description: Filename containing the code to be executed for Faqs
    Default: FaqsLambda
  GHHooksFilename:
    Type: String
    Description: Filename containing the code to be executed for gh-hooks
    Default: GHHooksLambda
  VPC:
    Description: VPC for the app
    Type: AWS::EC2::VPC::Id
    Default: vpc-08d1e66947d6200d6
  Subnet:
    Description: Subnet for the app
    Type: AWS::EC2::Subnet::Id
    Default: subnet-088d7192c6c67e077
  TaskDefinition:
    Description: Task def for the ECS task
    Type: String

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub "${apiGatewayName}-Cluster"
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref apiGatewayName, SecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [/ecs, !Ref apiGatewayName]]
      RetentionInDays: 1
  Service:
    Type: AWS::ECS::Service
    Properties: 
      ServiceName: Penny-Bot
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet
          SecurityGroups:
            - !Ref AppSecurityGroup

  apiGateway: 
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: !Ref apiGatewayName
      Description: API Endpoints for the discord Penny bot
      ProtocolType: HTTP
      #Target: 
        #- !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CoinsFilename}-lambda/invocations
        #- !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FileNameBot}-lambda/invocations

  apiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref apiGateway
      StageName: prod
      AutoDeploy: true

  apiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStage

  # Coins lambda config

  addCoinIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Add Coin Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET 
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt addCoinFunction.Arn
      PayloadFormatVersion: '2.0'

  addCoinRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'POST /coin'
      Target: !Sub "integrations/${addCoinIntegration}"

  addCoinFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${CoinsFilename}.zip
      FunctionName: !Sub ${CoinsFilename}-lambda
      Handler: handler 
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 6

  lambdaAddCoinPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${CoinsFilename}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn: 
      - addCoinFunction
      
  # Sponsors lambda config
      
  sponsorsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Sponsor Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt sponsorsFunction.Arn
      PayloadFormatVersion: '2.0'

  sponsorsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /sponsors"
      Target: !Sub "integrations/${sponsorsIntegration}"
      
  sponsorsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${SponsorsFilename}.zip
      FunctionName: !Sub ${SponsorsFilename}-lambda
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 6
    
  lambdaSponsorsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${SponsorsFilename}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn:
      - sponsorsFunction

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow 
            Principal:
              Service: 
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies: 
        - PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Attributes
                  - dynamodb:LeadingKeys
                  - dynamodb:ConditionCheckItem
                  - dynamodb:Scan
                  - lambda:UpdateFunctionCode
                  - secretsmanager:GetSecretValue
                  - s3:PutObject
                  - s3:GetObject
                Effect: Allow 
                Resource: 
                  - !GetAtt dynamoUserTable.Arn
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-bot-table/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CoinsFilename}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CoinsFilename}-lambda
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SponsorsFilename}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SponsorsFilename}-lambda
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AutoPingsFilename}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AutoPingsFilename}-lambda
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FaqsFilename}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FaqsFilename}-lambda
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${GHHooksFilename}-lambda:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GHHooksFilename}-lambda
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/discord-bot-token-VmhBXH
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/trigger-gh-readme-workflow-token-cpZwMv
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/github-webhook-secret-MASfKL
                  - arn:aws:s3:::penny-auto-pings-lambda/*
                  - arn:aws:s3:::penny-faqs-lambda/*
          PolicyName: lambda
  
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PennyLambda
      RetentionInDays: 30
      
  # Auto-pings lambda config
    
  autoPingsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Auto-Pings Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt autoPingsFunction.Arn
      PayloadFormatVersion: '2.0'

  autoPingsRouteGetAll:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'GET /auto-pings/all'
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsRouteAddForUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'PUT /auto-pings/users'
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsRouteDeleteForUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'DELETE /auto-pings/users'
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${AutoPingsFilename}.zip
      FunctionName: !Sub ${AutoPingsFilename}-lambda
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 6

  lambdaAutoPingsRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${AutoPingsFilename}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn:
      - autoPingsFunction

  autoPingsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-auto-pings-lambda

  autoPingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/AutoPingsLambda-lambda
      RetentionInDays: 30

  # Faqs lambda config

  faqsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Faqs Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt faqsFunction.Arn
      PayloadFormatVersion: '2.0'

  faqsRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'POST /faqs'
      Target: !Sub "integrations/${faqsIntegration}"

  faqsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${FaqsFilename}.zip
      FunctionName: !Sub ${FaqsFilename}-lambda
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 6

  lambdaFaqsRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${FaqsFilename}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn:
      - faqsFunction

  faqsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-faqs-lambda

  faqsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/FaqsLambda-lambda
      RetentionInDays: 30

  # GH-Hooks lambda config

  ghHooksIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda GHHooks Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ghHooksFunction.Arn
      PayloadFormatVersion: '2.0'

  ghHooksRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'POST /gh-hooks'
      Target: !Sub "integrations/${ghHooksIntegration}"

  ghHooksFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-discord-bot
        S3Key: !Sub ${GHHooksFilename}.zip
      Environment:
        Variables:
          BOT_TOKEN_ARN: arn:aws:secretsmanager:eu-west-1:177420307256:secret:prod/penny/penny-bot/discord-bot-token-VmhBXH
          WH_SECRET_ARN: arn:aws:secretsmanager:eu-west-1:177420307256:secret:prod/penny/penny-bot/github-webhook-secret-MASfKL
      FunctionName: !Sub ${GHHooksFilename}-lambda
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 6

  lambdaGHHooksRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${GHHooksFilename}-lambda
      Principal: apigateway.amazonaws.com
    DependsOn:
      - ghHooksFunction

  ghHooksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/GHHooksLambda-lambda
      RetentionInDays: 30

  # Caches S3 bucket

  cachesS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-caches

  # DynamoDB penny-bot table

  dynamoUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "penny-bot-table"
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        - 
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "data1"
          AttributeType: "S"
        -
          AttributeName: "data2"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "pk"
          KeyType: "HASH"
        - 
          AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI-1"
          KeySchema:
            -
              AttributeName: "data1"
              KeyType: "HASH"
            -
              AttributeName: "pk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        -
          IndexName: "GSI-2"
          KeySchema:
            - 
              AttributeName: "data2"
              KeyType: "HASH"
            -
              AttributeName: "pk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true


Outputs:
  ghHooksLambdaArn:
    Value: !GetAtt ghHooksFunction.Arn

  faqsLambdaArn:
    Value: !GetAtt faqsFunction.Arn

  autoPingsLambdaArn:
    Value: !GetAtt autoPingsFunction.Arn

  sponsorsLambdaArn:
    Value: !GetAtt sponsorsFunction.Arn

  addCoinLambdaArn:
    Value: !GetAtt addCoinFunction.Arn

  dynamoDBArn:
    Value: !GetAtt dynamoUserTable.Arn

  


